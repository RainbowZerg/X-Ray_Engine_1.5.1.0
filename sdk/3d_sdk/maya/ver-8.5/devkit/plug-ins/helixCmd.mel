//-
// ==========================================================================
// Copyright (C) 1995 - 2006 Autodesk, Inc. and/or its licensors.  All 
// rights reserved.
//
// The coded instructions, statements, computer programs, and/or related 
// material (collectively the "Data") in these files contain unpublished 
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its 
// licensors, which is protected by U.S. and Canadian federal copyright 
// law and by international treaties.
//
// The Data is provided for use exclusively by You. You have the right 
// to use, modify, and incorporate this Data into other products for 
// purposes authorized by the Autodesk software license agreement, 
// without fee.
//
// The copyright notices in the Software and this entire statement, 
// including the above license grant, this restriction and the 
// following disclaimer, must be included in all copies of the 
// Software, in whole or in part, and all derivative works of 
// the Software, unless such copies or derivative works are solely 
// in the form of machine-executable object code generated by a 
// source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. 
// AUTODESK DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED 
// WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF 
// NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR 
// PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR 
// TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS LICENSORS 
// BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, 
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK 
// AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY 
// OR PROBABILITY OF SUCH DAMAGES.
//
// ==========================================================================
//+

global proc saveHelixUI() {
	// Read values out of controls
	//
	float $helixRadius = `floatSliderGrp -q -v "helixWindow|parameters|radius"`;
	float $helixPitch  = `floatSliderGrp -q -v "helixWindow|parameters|pitch"`;

	optionVar -fv "helixPitch" $helixPitch -fv "helixRadius" $helixRadius;
}

global proc helixSave() {
	saveHelixUI;
	deleteUI helixWindow;;
}

global proc helixReset() {
	floatSliderGrp -e -v 4.0 "helixWindow|parameters|radius";
	floatSliderGrp -e -v 0.1 "helixWindow|parameters|pitch";
}

global proc helixCommand() {
	// Read values out of controls
	//
	float $helixRadius = `floatSliderGrp -q -v "helixWindow|parameters|radius"`;
	float $helixPitch  = `floatSliderGrp -q -v "helixWindow|parameters|pitch"`;

	// Save the new current values for next time.
	saveHelixUI;

	// Call command (written in API) to create helix
	//
	helix -r $helixRadius -p $helixPitch;

	deleteUI helixWindow;
}

global proc helixUI() {
//
// Description:
//     Brings up a window which allows the user to create a helix
//
	float $helixRadius;
	float $helixPitch;

	if ( !`optionVar -exists helixRadius` ) optionVar -fv helixRadius 4.0;
	if ( !`optionVar -exists helixPitch`  ) optionVar -fv helixPitch  0.1;

    window -t "Helix Generator" -wh 400 110 "helixWindow";

	// Create UI Controls
	//
	columnLayout -adj true -cal left -cw 400 parameters; 
		floatSliderGrp -cw3 100 100 100
			-field true -l "Radius:"
			-min 1.0 -max 5.0
			-v `optionVar -q helixRadius`
			radius;

		floatSliderGrp -cw3 100 100 100
			-field true -l "Pitch:"
			-min 0.1 -max 1.0
			-v `optionVar -q helixPitch`
			pitch;

        rowColumnLayout -nc 4 -cw 1 100 -cw 2 100 -cw 3 100 -cw 4 100 buttons;
			button -l "Reset" resetButton;
			button -l "Save" saveButton;
			button -l "Cancel" cancelButton;
			button -l "OK" okayButton;
		setParent ..; 
	setParent ..;

	// Set Callbacks
	//
	button -e -c "helixReset" resetButton;
	button -e -c "helixSave" saveButton;
	button -e -c "deleteUI helixWindow" cancelButton;
	button -e -c "helixCommand" okayButton;

	showWindow helixWindow;
}

menu -l "Plugins" -p "MayaWindow" pluginsMenu;
menuItem -l "Helix" -c "helixUI" helixMenuItem;
