//-
// ==========================================================================
// Copyright (C) 1995 - 2006 Autodesk, Inc. and/or its licensors.  All 
// rights reserved.
//
// The coded instructions, statements, computer programs, and/or related 
// material (collectively the "Data") in these files contain unpublished 
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its 
// licensors, which is protected by U.S. and Canadian federal copyright 
// law and by international treaties.
//
// The Data is provided for use exclusively by You. You have the right 
// to use, modify, and incorporate this Data into other products for 
// purposes authorized by the Autodesk software license agreement, 
// without fee.
//
// The copyright notices in the Software and this entire statement, 
// including the above license grant, this restriction and the 
// following disclaimer, must be included in all copies of the 
// Software, in whole or in part, and all derivative works of 
// the Software, unless such copies or derivative works are solely 
// in the form of machine-executable object code generated by a 
// source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. 
// AUTODESK DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED 
// WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF 
// NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR 
// PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR 
// TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS LICENSORS 
// BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, 
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK 
// AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY 
// OR PROBABILITY OF SUCH DAMAGES.
//
// ==========================================================================
//+

#include <maya/MIOStream.h>
#include <maya/MTime.h>
#include <maya/MVector.h>
#include <maya/MObject.h>
#include <maya/MPlug.h>
#include <maya/MDataBlock.h>
#include <maya/MFnPlugin.h>
#include <maya/MPxSpringNode.h>


class MIntArray;
class MVectorArray;

#define McheckErr(stat, msg)		\
	if ( MS::kSuccess != stat )		\
	{								\
		cerr << msg;				\
		return MS::kFailure;		\
	}

class simpleSpring: public MPxSpringNode
{
public:
	simpleSpring();
	virtual ~simpleSpring();

	static void		*creator();
	static MStatus	initialize();

	// will be used to get user defined attributes
	//
	virtual MStatus	compute( const MPlug& plug, MDataBlock& block );

	// Override applySpringLaw.
	//
	virtual MStatus	applySpringLaw( double stiffness,
						double damping, double restLength,
						double endMass1, double endMass2,
						const MVector &endP1, const MVector &endP2,
						const MVector &endV1, const MVector &endV2,
						MVector &forceV1, MVector &forceV2 );


	//=================================================================
	// If you need new attributes, add them here. Below is an example.
	//=================================================================

	// Your numeric attribute
	//
	static MObject	aSpringFactor;

	// Other data members
	//
	static MTypeId	id;

    // INLINEs to get attribute value.
    //
    double  end1WeightValue( MDataBlock& block );
    double  end2WeightValue( MDataBlock& block );

private:

	// methods to get attribute value.
	//
	double	springFactor( MDataBlock& block );

	// A parameter for this simple spring node.
	//
	double	factor;
};

// inlines
//
inline double simpleSpring::springFactor( MDataBlock& block )
{
	MStatus status;

	MDataHandle hValue = block.inputValue( aSpringFactor, &status );

	double value = 0.0;
	if( status == MS::kSuccess )
		value = hValue.asDouble();

	return( value );
}


// INLINE
//
inline double simpleSpring::end1WeightValue( MDataBlock& block )
{
	MStatus status;
	MDataHandle hValue = block.inputValue( mEnd1Weight, &status );

	double value = 0.0;
	if( status == MS::kSuccess )
		value = hValue.asDouble();

	return( value );
}

inline double simpleSpring::end2WeightValue( MDataBlock& block )
{
	MStatus status;
	MDataHandle hValue = block.inputValue( mEnd2Weight, &status );

	double value = 0.0;
	if( status == MS::kSuccess )
		value = hValue.asDouble();

	return( value );
}
