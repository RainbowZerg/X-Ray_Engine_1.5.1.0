//-
// ==========================================================================
// Copyright (C) 1995 - 2006 Autodesk, Inc. and/or its licensors.  All 
// rights reserved.
//
// The coded instructions, statements, computer programs, and/or related 
// material (collectively the "Data") in these files contain unpublished 
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its 
// licensors, which is protected by U.S. and Canadian federal copyright 
// law and by international treaties.
//
// The Data is provided for use exclusively by You. You have the right 
// to use, modify, and incorporate this Data into other products for 
// purposes authorized by the Autodesk software license agreement, 
// without fee.
//
// The copyright notices in the Software and this entire statement, 
// including the above license grant, this restriction and the 
// following disclaimer, must be included in all copies of the 
// Software, in whole or in part, and all derivative works of 
// the Software, unless such copies or derivative works are solely 
// in the form of machine-executable object code generated by a 
// source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. 
// AUTODESK DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED 
// WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF 
// NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR 
// PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR 
// TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS LICENSORS 
// BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, 
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK 
// AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY 
// OR PROBABILITY OF SUCH DAMAGES.
//
// ==========================================================================
//+

//
//  Description:
//     This script creates a new Maya menu that contains a
//	   single item "Formated Text". When selected, it will create
//     a beveled text with history, where the text can be the
//     formatted result of numerical inputs.
//
//  Procedures:
//     createFormatedText, addStringFormatMenuItems,
//     stringFormatCreateUI, stringFormatDeleteUI
//

//	Callback routine for the menu item
global proc createFormatedText()
{
	optionVar -intValue textCurvesType 3;
	performtextCurves(0);
	string $sel[] = `ls -sl`;

	// Create a circle node dependency object called "stringFormat"
	string $nodes = `createNode stringFormat`;
	connectAttr ($nodes+".output") ($sel[0]+".text");

	// Initialize with some values that do not produce an empty string
	setAttr -type "string" ($nodes+".format") "format ^0f ^0d ^0t ";
	setAttr ($nodes+".values[0]") 35.5 ;
}

// Add menu entries to the Create Light menu
//
global proc string addStringFormatMenuItems(string $parentMenu)
{
	string $menuName;
	string $res = "";

	$menuName = `menuItem -p $parentMenu -l "Formated Text"
		-ann "Creates a formated text node which can be animated"
		-c "createFormatedText" -i "text.xpm"` ;
	$res = $res + ";deleteUI -mi " + $menuName;

	return $res; 
}

// Add UI when plugin is loaded
///////////////////////////////////////////////////////////////////////////////
global string $StrFMTCreateMenuVariable = "";
global proc stringFormatCreateUI()
{ 
	// Build the actual UI for all those items:
    global string $gMainCreateMenu;

	string $parent = $gMainCreateMenu;	// Create menu
	string $cmd = "addStringFormatMenuItems "+$parent;
	addMenuItemSafe($parent, $cmd, "StrFMTCreateMenuVariable");
}

// Remove UI when plugin is unloaded
///////////////////////////////////////////////////////////////////////////////
global proc stringFormatDeleteUI()
{
    global string $gMainCreateMenu;

	string $parent = $gMainCreateMenu;	// Create menu
	removeMenuItemSafe($parent, "StrFMTCreateMenuVariable");
}
