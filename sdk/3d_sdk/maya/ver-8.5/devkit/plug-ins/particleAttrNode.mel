//-
// ==========================================================================
// Copyright (C) 1995 - 2006 Autodesk, Inc. and/or its licensors.  All 
// rights reserved.
//
// The coded instructions, statements, computer programs, and/or related 
// material (collectively the "Data") in these files contain unpublished 
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its 
// licensors, which is protected by U.S. and Canadian federal copyright 
// law and by international treaties.
//
// The Data is provided for use exclusively by You. You have the right 
// to use, modify, and incorporate this Data into other products for 
// purposes authorized by the Autodesk software license agreement, 
// without fee.
//
// The copyright notices in the Software and this entire statement, 
// including the above license grant, this restriction and the 
// following disclaimer, must be included in all copies of the 
// Software, in whole or in part, and all derivative works of 
// the Software, unless such copies or derivative works are solely 
// in the form of machine-executable object code generated by a 
// source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. 
// AUTODESK DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED 
// WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF 
// NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR 
// PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR 
// TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS LICENSORS 
// BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, 
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK 
// AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY 
// OR PROBABILITY OF SUCH DAMAGES.
//
// ==========================================================================
//+

//
//	Purpose:
//
//		uses the "particleAttrNode" plugin node to demonstrate how to implement
//		interesting particle attribute mapping effects.  Two examples are
//		shown:
//
//		1) how to use the particleAttrNode to implement a per-particle color
//		   ramp that fades from white to black based on a particle's age
//
//		2) how to use the particleAttrNode to move particles onto the surface
//		   of a particular geometric object.
//
//		Calling particleAttrNode(0) will demonstrate the first case, and
//		calling particleAttrNode(1) will demonstrate the second case.
//

global proc particleAttrNode( int $texOrGeo )
{
	if( !`pluginInfo -q -l particleAttrNode` )
	{
		loadPlugin particleAttrNode;
	}

	//	create a particle system and an emitter
	//
	string $e[] = `emitter -pos 0 0 0 -type omni -r 100 -sro 0 -nuv 0 -cye none -cyi 1 -spd 1 -srn 0 -nsp 1 -tsp 0 -mxd 0 -mnd 0 -dx 1 -dy 0 -dz 0 -sp 0` ;
	string $p[] = `particle`;
	string $emitter = $e[0];
	string $particleShape = $p[1];
	connectDynamic -em $emitter $particleShape;
	setAttr ($emitter+".speed") 2.5;
	setAttr ($particleShape+".particleRenderType") 4;

	//	create the plugin particle attribute mapper node
	//
	string $particleAttrMapper = `createNode particleAttr`;
	
	if( $texOrGeo == 0 )
	{
		//	use the particle attribute mapper to ramp off the particle color
		//	based on particle age
		//
		
		//	create the ramp texture and placement node
		//
		string $ramp = `shadingNode -asTexture ramp`;
		string $place = `shadingNode -asUtility place2dTexture`;
		connectAttr ($place+".outUV") ($ramp+".uv");
		connectAttr ($place+".outUvFilterSize") ($ramp+".uvFilterSize");
		setAttr ($place+".repeatV") 0.05;
		
		//	set the ramp to a white-to-black ramp
		//
		removeMultiInstance -break true ($ramp+".colorEntryList[1]");
		setAttr ($ramp+".colorEntryList[2].color") -type double3 0 0 0 ;
		setAttr ($ramp+".colorEntryList[0].color") -type double3 1 1 1 ;
		setAttr ($ramp+".colorEntryList[2].position") 0.23;
	
		//	add a per-particle color attribute to the particle system
		//		
		addAttr -ln "rgbPP" -dt vectorArray $particleShape;
		addAttr -ln "rgbPP0" -dt vectorArray $particleShape;
		
		//	connect the ramp's outColor attribute to the "computeNode" 
		//	attribute on the particle mapper.  The mapper will pass
		//	inputs through this node to produce outputs.  In this case,
		//	we will use the particle age as texture coordinates to be 
		//	fed to the texture, and the texture's output color will be
		//	fed back into the particle system's per-particle color attribute.
		//
		connectAttr ($ramp+".outColor") ($particleAttrMapper+".computeNode");

		//	set the particle age as the u and v coordinates to be passed through
		//	the compute node
		//
		connectAttr	($particleShape+".age") ($particleAttrMapper+".uCoordPP");
		connectAttr ($particleShape+".age") ($particleAttrMapper+".vCoordPP");
		
		//	connect the output of the mapper to the per-particle color attribute.
		//
		connectAttr ($particleAttrMapper+".outColorPP") ($particleShape+".rgbPP");
	}
	else
	{
		//	use the particle attribute mapper to position particles at the 
		//	vertices of a poly sphere.
		//

		//	create the sphere
		//
		string $s[] = `polySphere -r 5 -sx 50 -sy 50 -ax 0 1 0 -tx 2 -ch 1`;		
		string $c[] = `listRelatives -f -s $s[0]`;
		string $sphereShape = $c[0];
		
		//	Connect the sphere to the mapper's "compute node" attribute.
		//	The node knows that if a mesh is connected to this attribute,
		//	it is to use the particle's index to look up a position of one
		//	of the mesh's vertices, and return that in the output array.
		//	This output array is then fed into the rampPosition attribute
		//	on the particle system, which causes the particles to snap to
		//	the appropriate position on the mesh.
		//
		connectAttr ($sphereShape+".worldMesh[0]") ($particleAttrMapper+".computeNode");
		connectAttr ($particleAttrMapper+".outPosition") ($particleShape+".rampPosition");

		//	since we are not driving the mapper node with a per-particle input,
		//	we connect up the particle count, so we know what size of output
		//	array to return
		//
		connectAttr ($particleShape+".count") ($particleAttrMapper+".particleCount");
	}
	
	playbackOptions -max 500;
	DisplayShaded;
	select -cl;
	PlaybackToggle;	
}
