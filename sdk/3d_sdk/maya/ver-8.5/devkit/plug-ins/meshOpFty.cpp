//-
// ==========================================================================
// Copyright (C) 1995 - 2006 Autodesk, Inc. and/or its licensors.  All 
// rights reserved.
//
// The coded instructions, statements, computer programs, and/or related 
// material (collectively the "Data") in these files contain unpublished 
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its 
// licensors, which is protected by U.S. and Canadian federal copyright 
// law and by international treaties.
//
// The Data is provided for use exclusively by You. You have the right 
// to use, modify, and incorporate this Data into other products for 
// purposes authorized by the Autodesk software license agreement, 
// without fee.
//
// The copyright notices in the Software and this entire statement, 
// including the above license grant, this restriction and the 
// following disclaimer, must be included in all copies of the 
// Software, in whole or in part, and all derivative works of 
// the Software, unless such copies or derivative works are solely 
// in the form of machine-executable object code generated by a 
// source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. 
// AUTODESK DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED 
// WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF 
// NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR 
// PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR 
// TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS LICENSORS 
// BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, 
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK 
// AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY 
// OR PROBABILITY OF SUCH DAMAGES.
//
// ==========================================================================
//+

#include "meshOpFty.h"

meshOpFty::meshOpFty()
//
//	Description:
//		meshOpFty constructor
//
{
	fComponentIDs.clear();
}

meshOpFty::~meshOpFty()
//
//	Description:
//		meshOpFty destructor
//
{}

void meshOpFty::setMesh( MObject& mesh )
//
//	Description:
//		Sets the mesh object for the factory to operate on
//
{
	fMesh = mesh;
}

void meshOpFty::setComponentList( MObject& componentList )
//
//	Description:
//		Sets the list of the components for the factory to operate on
//
{
	fComponentList = componentList;
}


void meshOpFty::setComponentIDs( MIntArray& componentIDs )
//
//	Description:
//		Sets the list of the components for the factory to operate on
//
{
	fComponentIDs = componentIDs;
}

void meshOpFty::setMeshOperation( MeshOperation operationType )
//
//	Description:
//		Sets the mesh operation for the factory to execute
//
{
	fOperationType = operationType;
}


MFn::Type meshOpFty::getExpectedComponentType( MeshOperation operationType )
{
	switch (operationType)
	{
	case kSubdivideEdges: return MFn::kMeshEdgeComponent;
	case kSubdivideFaces: return MFn::kMeshPolygonComponent;
	case kExtrudeEdges: return MFn::kMeshEdgeComponent;
	case kExtrudeFaces: return MFn::kMeshPolygonComponent;
	case kCollapseEdges: return MFn::kMeshEdgeComponent;
	case kCollapseFaces: return MFn::kMeshPolygonComponent;
	case kDuplicateFaces: return MFn::kMeshPolygonComponent;
	case kExtractFaces: return MFn::kMeshPolygonComponent;
	case kSplitLightning: return MFn::kMeshPolygonComponent;

	default: return MFn::kInvalid;
	}
}
