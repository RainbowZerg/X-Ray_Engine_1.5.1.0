#ifndef _MHairSystem
#define _MHairSystem

//
//-
// ==========================================================================
// Copyright (C) 1995 - 2006 Autodesk, Inc., and/or its licensors.  All
// rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its
// licensors,  which is protected by U.S. and Canadian federal copyright law
// and by international treaties.
//
// The Data may not be disclosed or distributed to third parties or be
// copied or duplicated, in whole or in part, without the prior written
// consent of Autodesk.
//
// The copyright notices in the Software and this entire statement,
// including the above license grant, this restriction and the following
// disclaimer, must be included in all copies of the Software, in whole
// or in part, and all derivative works of the Software, unless such copies
// or derivative works are solely in the form of machine-executable object
// code generated by a source language processor.

// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND.
// AUTODESK DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED
// WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF
// NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE,
// OR ARISING FROM A COURSE OF DEALING, USAGE, OR TRADE PRACTICE. IN NO
// EVENT WILL AUTODESK AND/OR ITS LICENSORS BE LIABLE FOR ANY LOST
// REVENUES, DATA, OR PROFITS, OR SPECIAL, DIRECT, INDIRECT, OR
// CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK AND/OR ITS LICENSORS HAS
// BEEN ADVISED OF THE POSSIBILITY OR PROBABILITY OF SUCH DAMAGES.
// ==========================================================================
//+
//
// CLASS:    MHairSystem
//
// *****************************************************************************
//
// CLASS DESCRIPTION (MHairSystem)
//
// Interface with Maya's Dynamic Hair System.
//
// At present, this interface only supports the ability to override the
// geometry collision component of hair. You can implement your own
// collision detection algorithm, and have the option of using Maya's
// built-in or your own custom collision response algorithm.
//
// *****************************************************************************

#if defined __cplusplus

// *****************************************************************************

// INCLUDED HEADER FILES


#include <maya/MTypes.h>

class MDoubleArray;
class MIntArray;
class MObjectArray;
class MVector;
class MVectorArray;

// *****************************************************************************

// CLASS DECLARATION (MHairSystem)

#ifdef _WIN32
#pragma warning(disable: 4522)
#endif // _WIN32

// Function types for user-registerable hair/geometry collision handler.
//

// Type for user-defined hair/geometry collision pre-frame function.
// This method will be called once per frame.
///
typedef bool	(*MHairSystemCollisionSolverPreFrameFnPtr)(
						const MObject			hairSystem,
						const double			curTime,
						void					**privateData );

// Type for user-defined hair/geometry collision collide function.
// Implement intersection algorithm here.
///
typedef bool	(*MHairSystemCollisionSolverCollideFnPtr)(
						const MObject			hairSystem,
						const int				follicleIndex,
						MVectorArray			&hairPositions,
						MVectorArray			&hairPositionsLast,
						const MDoubleArray		&hairWidths,
						const int				startIndex,
						const int				endIndex,
						const double			curTime,
						const double			friction,
						const void 				*privateData );


// Interface with Maya's Dynamic Hair System.
///
class OPENMAYAFX_EXPORT MHairSystem
{
public:
	// Methods for registering a user-definable hair/geometry collision
	// solver.
	//

	// Register the collide method.
	///
	static MStatus	registerCollisionSolverCollide(
						MHairSystemCollisionSolverCollideFnPtr );

	// Register the pre-frame method.
	///
	static MStatus	registerCollisionSolverPreFrame(
						MHairSystemCollisionSolverPreFrameFnPtr );

	// Unregister the collide method.
	///
	static MStatus	unregisterCollisionSolverCollide();

	// Unregister the pre-frame method.
	///
	static MStatus	unregisterCollisionSolverPreFrame();

	// Helper methods for user-definable hair/geometry collision solver.
	//

	// Get the ith collison geometry associated with the hair system.
	///
	static MObject	getCollisionObject( const MObject hairSystem,
						const int index, MStatus *status );

	// Get all collison geometries associated with the hair system.
	///
	static MStatus	getCollisionObject( const MObject hairSystem,
						MObjectArray &objects, MIntArray &logicalIndices );

	// Get the ith follicle associated with the hair system.
	///
	static MObject	getFollicle( const MObject hairSystem,
						const int index, MStatus *status );
	// Get all follicles associated with the hair system.
	///
	static MStatus	getFollicle( const MObject hairSystem,
						MObjectArray &follicles,
						MIntArray &logicalIndices );

#if 0
	///
	static void setRegisteringCallableScript();
	///
	static bool registeringCallableScript();
#endif

protected:
// No protected members

private:
	static const char	*className();
	static bool			fRegisteringCallableScript;
};


// *****************************************************************************
#endif /* __cplusplus */
#endif /* _MHairSystem */
