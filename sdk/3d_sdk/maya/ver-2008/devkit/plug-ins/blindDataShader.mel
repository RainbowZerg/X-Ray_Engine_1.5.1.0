//-
// ==========================================================================
// Copyright (C) 1995 - 2006 Autodesk, Inc. and/or its licensors.  All 
// rights reserved.
//
// The coded instructions, statements, computer programs, and/or related 
// material (collectively the "Data") in these files contain unpublished 
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its 
// licensors, which is protected by U.S. and Canadian federal copyright 
// law and by international treaties.
//
// The Data is provided for use exclusively by You. You have the right 
// to use, modify, and incorporate this Data into other products for 
// purposes authorized by the Autodesk software license agreement, 
// without fee.
//
// The copyright notices in the Software and this entire statement, 
// including the above license grant, this restriction and the 
// following disclaimer, must be included in all copies of the 
// Software, in whole or in part, and all derivative works of 
// the Software, unless such copies or derivative works are solely 
// in the form of machine-executable object code generated by a 
// source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. 
// AUTODESK DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED 
// WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF 
// NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR 
// PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR 
// TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS LICENSORS 
// BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, 
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK 
// AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY 
// OR PROBABILITY OF SUCH DAMAGES.
//
// ==========================================================================
//+

// You must load the plugin before using this script.
//

// Create the plane mesh
//
string $transformName = `createNode transform -n blindDataShaderEx1`;
string $shapeNodeName = `createNode mesh -n blindDataShape1 -p $transformName`;
sets -add initialShadingGroup $shapeNodeName;
string $meshNodeName = `createNode blindDataMesh -n blindDataMesh1`;
connectAttr ($meshNodeName+".outputMesh") ($shapeNodeName+".inMesh");

// Create an empty UV set for the mesh, so that the shader can run
//
polyUVSet -create -uvSet "blindDataMeshUVSet";

// Create the shader and attach it to a phong shader
//
string $shaderNodeName = `createNode blindDataShader -n blindDataShader1`;
string $phongNodeName = `createNode phong`;
source "buildShaderMenus.mel";
assignSG $phongNodeName $shapeNodeName;
connectAttr ($shaderNodeName+".outColor") ($phongNodeName+".hardwareShader");

