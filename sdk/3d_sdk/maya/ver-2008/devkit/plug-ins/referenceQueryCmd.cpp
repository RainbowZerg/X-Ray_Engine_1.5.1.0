//-
// ==========================================================================
// Copyright (C) 1995 - 2006 Autodesk, Inc. and/or its licensors.  All 
// rights reserved.
//
// The coded instructions, statements, computer programs, and/or related 
// material (collectively the "Data") in these files contain unpublished 
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its 
// licensors, which is protected by U.S. and Canadian federal copyright 
// law and by international treaties.
//
// The Data is provided for use exclusively by You. You have the right 
// to use, modify, and incorporate this Data into other products for 
// purposes authorized by the Autodesk software license agreement, 
// without fee.
//
// The copyright notices in the Software and this entire statement, 
// including the above license grant, this restriction and the 
// following disclaimer, must be included in all copies of the 
// Software, in whole or in part, and all derivative works of 
// the Software, unless such copies or derivative works are solely 
// in the form of machine-executable object code generated by a 
// source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. 
// AUTODESK DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED 
// WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF 
// NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR 
// PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR 
// TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS LICENSORS 
// BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, 
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK 
// AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY 
// OR PROBABILITY OF SUCH DAMAGES.
//
// ==========================================================================
//+

#include <maya/MString.h>
#include <maya/MStatus.h>
#include <maya/MObject.h>
#include <maya/MFileIO.h>
#include <maya/MSelectionList.h>
#include <maya/MGlobal.h>
#include <maya/MPxCommand.h>
#include <maya/MFnPlugin.h>

#include <maya/MIOStream.h>

class referenceQuery : public MPxCommand { 
public:
						referenceQuery();
	virtual				~referenceQuery();

	MStatus				doIt( const MArgList & );
	bool				isUndoable() const;

	static		void   *creator();
};


referenceQuery::referenceQuery()
{
}

referenceQuery::~referenceQuery()
{
}

void *referenceQuery::creator()
{
	return new referenceQuery;
}

bool referenceQuery::isUndoable() const {
	return false;
};

MStatus referenceQuery::doIt( const MArgList &  )
{
	MStringArray referenceFiles;
	MFileIO::getReferences( referenceFiles );

	// Print some useful information about the files referenced
	// in the main scene.
	//
	// Output format is as follows:
	// 
	// Referenced File: filename1
	// 		Connections Made
	// 			source -> destination
	// 			...
	// 
	// 		Connections Broken
	//			source ->destination
	// 			...
	//
	//		Attributes Changed Since File Referenced
	//			attribute1
	//			attribute2
	//			...
	//
	for( unsigned i = 0; i < referenceFiles.length(); i++ ) {
		MStringArray  	connectionsMade;
		MFileIO::getReferenceConnectionsMade( referenceFiles[i],
											  connectionsMade );

		cout << "Referenced File: " << referenceFiles[i].asChar() << ":\n";
		cout << "	Connections Made:\n";
		unsigned j;
		for( j = 0; j < connectionsMade.length(); j+=2 ) {
			cout << "	";
			cout << connectionsMade[j].asChar() << " -> ";
			if( j + 1 < connectionsMade.length() ) {
				cout << connectionsMade[j+1].asChar();
			}
			cout << "\n" ;
		}
		cout << "\n";

		MStringArray  	connectionsBroken;
		MFileIO::getReferenceConnectionsBroken( referenceFiles[i],
											  connectionsBroken );
		cout << "	Connections Broken: \n";
		for( j = 0; j < connectionsBroken.length(); j+=2 ) {
			cout << "	";
			cout << connectionsBroken[j].asChar() << " -> ";
			if( j + 1 < connectionsBroken.length() ) {
				cout << connectionsBroken[j+1].asChar();
			}
			cout << "\n" ;
		}
		cout << "\n";

		MStringArray	referencedNodes;
		
		cout << "	Attrs Changed Since File Open:\n";
		MFileIO::getReferenceNodes( referenceFiles[i], referencedNodes );
		for( j = 0; j < referencedNodes.length(); j++ ) {
			// For each node, call a MEL command to get its
			// attributes.  Say we're only interested in scalars.
			//
			MString cmd( "listAttr -s -cfo " );
			cmd = cmd + referencedNodes[j];
			
			MSelectionList referencedPlugs;
			MStringArray   referencedAttributes;	

			MGlobal::executeCommand( cmd, referencedAttributes );
			for( unsigned k = 0; k < referencedAttributes.length(); k++ ) {
				MString plugName( referencedNodes[j] );
				plugName = plugName + "." + referencedAttributes[k];
				cout << "		" << plugName.asChar() << "\n";
			}
		}
		cout << "\n";
	}

	// End of output 
	//
	cout << "=====================================\n";

	return MS::kSuccess;
}

MStatus initializePlugin( MObject obj )
{
	MStatus   status;
    MFnPlugin plugin( obj, PLUGIN_COMPANY, "4.0", "Any");

    // NOTE: referenceQuery is already a Maya cmd
    status = plugin.registerCommand( "refQuery", 
									 referenceQuery::creator );
	if (!status) {
		status.perror("registerCommand");
		return status;
	}

    return status;
}

MStatus uninitializePlugin( MObject obj )
{
	MStatus   status;
    MFnPlugin plugin( obj );

    status = plugin.deregisterCommand( "refQuery" );
	if (!status) {
		status.perror("deregisterCommand");
	}
    return status;
}
