//-
// ==========================================================================
// Copyright (C) 1995 - 2006 Autodesk, Inc. and/or its licensors.  All
// rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its
// licensors, which is protected by U.S. and Canadian federal copyright
// law and by international treaties.
//
// The Data is provided for use exclusively by You. You have the right
// to use, modify, and incorporate this Data into other products for
// purposes authorized by the Autodesk software license agreement,
// without fee.
//
// The copyright notices in the Software and this entire statement,
// including the above license grant, this restriction and the
// following disclaimer, must be included in all copies of the
// Software, in whole or in part, and all derivative works of
// the Software, unless such copies or derivative works are solely
// in the form of machine-executable object code generated by a
// source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND.
// AUTODESK DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED
// WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF
// NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR
// PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR
// TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS LICENSORS
// BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK
// AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY
// OR PROBABILITY OF SUCH DAMAGES.
//
// ==========================================================================
//+

// Creates a scripted panel with a stereo camera panel
// 
stereoCameraCustomPanel( ); 

global string $gStereoCameraEditorModelEditor; 

// Define callbacks for this type and make it a unique type
// as we don't want two panels sharing the same global data.
//
global proc stereoCameraCustomPanelType()
{
	int $exists = `scriptedPanelType -q -ex scvScriptedPanelType`; 
	if ( !$exists ) { 
		scriptedPanelType
			-ccb scvCreateCallback
			-icb scvInitCallback
			-acb scvAddCallback
			-rcb scvRemoveCallback
			-dcb scvDeleteCallback
			-scb scvSaveStateCallback
			-cv  true
			-unique false
			scvScriptedPanelType;
	}
}

global proc stereoCameraCustomPanel( )
{
	if ( !`pluginInfo -q -loaded stereoCameraView` ) { 
		loadPlugin "stereoCameraView"; 
	}

	stereoCameraCustomPanelType();
	scriptedPanel -unParent -type scvScriptedPanelType -label "Stereo Camera View" scvScriptedPanel; 
}


global proc scvCreateCallback(string $panelName)
//
//  Description:
//      Create any editors unparented here and do
//      any other initialization required.
//
//      In this example we will only declare a global array to
//        maintain some state information.
//
{
	source "createStereoCameraViewUI.mel"; 
	string $editor = ($panelName + "Editor"); 

	global string $gMainCameraName; 
	global string $gMainCameraNameShape; 

	if ( $gMainCameraName == "" || !`objExists ($gMainCameraNameShape)`  ) {
		createCameras(); 
	}

	stereoCameraView -unParent $editor; 
	eval("stereoCameraView -edit -camera " +  $gMainCameraNameShape + " " + $editor);
	eval("stereoCameraView -edit -rightCamera " + $gMainCameraName + "Right " + $editor); 
	eval("stereoCameraView -edit -leftCamera " +  $gMainCameraName + "Left " + $editor); 
	eval("stereoCameraView -edit -centerCamera " + $gMainCameraNameShape + " " + " " + $editor);
	eval("stereoCameraView -edit -displayMode centerEye " + $editor);
}


global proc scvInitCallback(string $panelName)
//
//  Description:
//      Re-initialize the panel on file -new or file -open.
//
//      In this example we will only re-init the global array.
//
{ 
}

global proc scvAddCallback(string $panelName) 
//
//  Description:  Create UI and parent any editors.
//
{
	string $editor = ($panelName + "Editor"); 
	createStereoCameraViewUI( $panelName, $editor); 

	global string $gStereoCameraEditorModelEditor;
	$gStereoCameraEditorModelEditor = $editor; 
	global string $gScriptedModelEditorTypes[];
	global string $gScriptedModelEditorList[]; 
	int $nextAvail = size( $gScriptedModelEditorTypes );
	$gScriptedModelEditorTypes[$nextAvail] = "scvScriptedPanelType"; 
	$gScriptedModelEditorList[$nextAvail] = $editor; 

	// Choose which of the standard modelPanel menus should appear (in our
	// case its Lighting and Shading. We don't for example, display Views.
	//
	string $subset[] = { "Lighting", "Shading" };
	string $extraMenus[] = {};
	string $extraCmds[] = {}; 
	createModelEditorMenu( "", $editor, $subset, $extraMenus, $extraCmds ); 
}

global proc scvRemoveCallback(string $panelName) 
//
//  Description:
//        Unparent any editors and save state if required.
//
{
	//  Scope the control names to this panel.
	//
	string $editor = ($panelName + "Editor");

	string $control = `scriptedPanel -q -control $panelName`;
	setParent $control;

	if ( `stereoCameraView -exists $editor` ) { 
		stereoCameraView -edit -unParent $editor; 
	}

	global string $gScriptedModelEditorTypes[];
	global string $gScriptedModelEditorList[]; 
	int $index = -1; 
	for ( $i = 0; $i < size($gScriptedModelEditorTypes); $i ++ ) { 
		if ( $gScriptedModelEditorTypes[$i] == "scvScriptedPanelType" ) { 
			$index = $i; 
			break; 
		}
	}
	if ( $index != -1 ) { 
		stringArrayRemoveAtIndex( $index, $gScriptedModelEditorTypes ); 
		stringArrayRemoveAtIndex( $index, $gScriptedModelEditorList ); 
	}
}

global proc scvDeleteCallback(string $panelName) 
//
//  Description:
//        Delete any editors and do any other cleanup required.
{
	string $editor = ($panelName + "Editor"); 
	
	if ( `stereoCameraView -exists $editor` ) { 
		deleteUI -editor $editor; 
	}
}

global proc string scvSaveStateCallback(string $panelName) 
//
//  Description:
//        Return a string that will restore the current state
//        when it is executed.
{
	return ""; 
}


