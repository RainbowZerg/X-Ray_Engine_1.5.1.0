#ifndef __POLYEXPORTER_H
#define __POLYEXPORTER_H

//-
// ==========================================================================
// Copyright (C) 1995 - 2006 Autodesk, Inc. and/or its licensors.  All 
// rights reserved.
//
// The coded instructions, statements, computer programs, and/or related 
// material (collectively the "Data") in these files contain unpublished 
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its 
// licensors, which is protected by U.S. and Canadian federal copyright 
// law and by international treaties.
//
// The Data is provided for use exclusively by You. You have the right 
// to use, modify, and incorporate this Data into other products for 
// purposes authorized by the Autodesk software license agreement, 
// without fee.
//
// The copyright notices in the Software and this entire statement, 
// including the above license grant, this restriction and the 
// following disclaimer, must be included in all copies of the 
// Software, in whole or in part, and all derivative works of 
// the Software, unless such copies or derivative works are solely 
// in the form of machine-executable object code generated by a 
// source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. 
// AUTODESK DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED 
// WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF 
// NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR 
// PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR 
// TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS LICENSORS 
// BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, 
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK 
// AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY 
// OR PROBABILITY OF SUCH DAMAGES.
//
// ==========================================================================
//+

//	polyExporter.h

//
// *****************************************************************************
//
// CLASS:    polyExporter
//
// *****************************************************************************
//
// CLASS DESCRIPTION (polyExporter)
// 
// polyExporter is a class used for creating polygonal mesh exporter plugins.  
// It is derived from the MPxFileTranslator class and thus implements the
// functions writer(), haveWriteMethod(), haveReadMethod(), and canBeOpened(),
// which are called by Maya when a scene export is executed.  This class allows
// the choice of exporting all or only selected poly meshes in the scene.
//
// To use this class, derive a new class and begin by adding the following *.h 
// files:
// #include <maya/MFnPlugin.h> - used for defining plugins
// #include <maya/MIOStream.h> - used for input/output operations
// #include <maya/MFStream.h>  - used for file input/output operations
//
// The following functions must be implemented:
// creator() - required by Maya to allocate an instance of the derived class
// initializePlugin() - required to register the plugin with Maya
// uninitializePlugin() - required to unregister the plugin with Maya
// defaultExtension() - returns an the export file type extension
// createPolyWriter() - returns a new polyWriter which performs the exporting
//
// For examples, see the classes polyRawExporter and polyX3DExporter
//
// *****************************************************************************

#include <maya/MPxFileTranslator.h>

class polyWriter;
class MDagPath;
class MFnDagNode;

class polyExporter:public MPxFileTranslator {

	public:
								polyExporter();
		virtual					~polyExporter();

		virtual MStatus			writer (const MFileObject& file,
										const MString& optionsString,
										MPxFileTranslator::FileAccessMode mode);
		virtual bool			haveWriteMethod () const;
		virtual bool			haveReadMethod () const;
		virtual	bool			canBeOpened () const;

		virtual MString			defaultExtension () const = 0;


	protected:	
		virtual	bool			isVisible(MFnDagNode& fnDag, MStatus& status);
		virtual	MStatus			exportAll(ostream& os);
		virtual	MStatus			exportSelection(ostream& os);
		virtual void			writeHeader(ostream& os);
		virtual void			writeFooter(ostream& os);
		virtual MStatus			processPolyMesh(const MDagPath dagPath, ostream& os);
		virtual polyWriter*		createPolyWriter(const MDagPath dagPath, MStatus& status) = 0;
};

#endif /*__POLYEXPORTER_H*/
