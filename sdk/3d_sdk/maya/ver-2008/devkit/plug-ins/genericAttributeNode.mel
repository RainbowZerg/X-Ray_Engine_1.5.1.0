//-
// ==========================================================================
// Copyright (C) 1995 - 2006 Autodesk, Inc. and/or its licensors.  All 
// rights reserved.
//
// The coded instructions, statements, computer programs, and/or related 
// material (collectively the "Data") in these files contain unpublished 
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its 
// licensors, which is protected by U.S. and Canadian federal copyright 
// law and by international treaties.
//
// The Data is provided for use exclusively by You. You have the right 
// to use, modify, and incorporate this Data into other products for 
// purposes authorized by the Autodesk software license agreement, 
// without fee.
//
// The copyright notices in the Software and this entire statement, 
// including the above license grant, this restriction and the 
// following disclaimer, must be included in all copies of the 
// Software, in whole or in part, and all derivative works of 
// the Software, unless such copies or derivative works are solely 
// in the form of machine-executable object code generated by a 
// source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. 
// AUTODESK DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED 
// WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF 
// NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR 
// PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR 
// TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS LICENSORS 
// BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, 
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK 
// AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY 
// OR PROBABILITY OF SUCH DAMAGES.
//
// ==========================================================================
//+

//
//	genericAttributeNode.mel
//		Simple test script that demonstrates how to invoke
//		the genericAttributeNode plug-in and have it update
//		for different situations
//

// If plug-in has not been loaded
loadPlugin genericAttributeNode;

// Make the node
string $g = `createNode genericAttributeNode`;

// Execute some setAttr and getAttr commands
// to modify the generic attribute

// Boolean false case
setAttr ($g + ".gInputInt") 1;
getAttr ($g + ".gOutputFloat_2Float_3Float");

// Boolean true case
setAttr ($g + ".gInputInt") 2;
getAttr ($g + ".gOutputFloat_2Float_3Float");

// Float case
setAttr ($g + ".gInputInt") 5;
getAttr ($g + ".gOutputFloat_2Float_3Float");

// 3 Float case
setAttr ($g + ".gInputInt") 9;
getAttr ($g + ".gOutputFloat_2Float_3Float");

// What happens when you have mutiple nodes and the
// attribute type is changed.
// 1. Create 2 nodes
string $ga = `createNode genericAttributeNode`;
string $gb = `createNode genericAttributeNode`;
// 2. Put both nodes into the same state
setAttr ($ga + ".gInputInt") 9;
setAttr ($gb + ".gInputInt") 9;
// 3. Get the output attribute and their type
getAttr ($ga + ".gOutputFloat_2Float_3Float");
getAttr ($gb + ".gOutputFloat_2Float_3Float");
getAttr -type ($ga + ".gOutputFloat_2Float_3Float");
getAttr -type ($gb + ".gOutputFloat_2Float_3Float");
// 4. Modify the generic attribute of 1 one the nodes
setAttr ($ga + ".gInputInt") 1;
// 5. Show the types
getAttr -type ($ga + ".gOutputFloat_2Float_3Float");
getAttr -type ($gb + ".gOutputFloat_2Float_3Float");




