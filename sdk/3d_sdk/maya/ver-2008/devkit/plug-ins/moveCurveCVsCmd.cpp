//-
// ==========================================================================
// Copyright (C) 1995 - 2006 Autodesk, Inc. and/or its licensors.  All 
// rights reserved.
//
// The coded instructions, statements, computer programs, and/or related 
// material (collectively the "Data") in these files contain unpublished 
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its 
// licensors, which is protected by U.S. and Canadian federal copyright 
// law and by international treaties.
//
// The Data is provided for use exclusively by You. You have the right 
// to use, modify, and incorporate this Data into other products for 
// purposes authorized by the Autodesk software license agreement, 
// without fee.
//
// The copyright notices in the Software and this entire statement, 
// including the above license grant, this restriction and the 
// following disclaimer, must be included in all copies of the 
// Software, in whole or in part, and all derivative works of 
// the Software, unless such copies or derivative works are solely 
// in the form of machine-executable object code generated by a 
// source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND. 
// AUTODESK DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED 
// WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF 
// NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR 
// PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR 
// TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS LICENSORS 
// BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL, 
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK 
// AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY 
// OR PROBABILITY OF SUCH DAMAGES.
//
// ==========================================================================
//+

////////////////////////////////////////////////////////////////////////
//
//		Iterates over selected CVs - sets CV to world 0.0
//
////////////////////////////////////////////////////////////////////////

#include <maya/MIOStream.h>
#include <maya/MPxCommand.h>
#include <maya/MString.h>
#include <maya/MArgList.h>
#include <maya/MGlobal.h>
#include <maya/MSelectionList.h>
#include <maya/MItSelectionList.h>
#include <maya/MPoint.h>
#include <maya/MDagPath.h>
#include <maya/MFnPlugin.h>
#include <maya/MFnNurbsCurve.h>
#include <maya/MItCurveCV.h>

class moveCurveCVs : public MPxCommand
{
public:
					moveCurveCVs() {};
	virtual			~moveCurveCVs(); 

	MStatus			doIt( const MArgList& args );
	static void*	creator();
};

moveCurveCVs::~moveCurveCVs() {}

void* moveCurveCVs::creator()
{
	return new moveCurveCVs();
}

MStatus moveCurveCVs::doIt( const MArgList& )
{
	MStatus stat;

	// Create a selection list iterator
	// set the filter moveCurveCVsComponents
	//
	MSelectionList list;
	MGlobal::getActiveSelectionList( list );
	MItSelectionList * iter = new MItSelectionList( list,
													MFn::kCurveCVComponent,
													&stat );

	if ( MS::kSuccess == stat ) {
		MDagPath 	mdagPath;		// Item dag path
		MObject  	mComponent;		// Current component
		double 		coord[4] = {0.0,0.0,0.0,0.0};
		MPoint 		point( coord );

		// Iterate over all selected curves
		//
		for ( ; !iter->isDone(); iter->next() ) 
		{
			// Create a function set to operate on selected curves
			//
			iter->getDagPath( mdagPath, mComponent );
			MItCurveCV fnmoveCurveCVs( mdagPath, mComponent, &stat );

			if ( MS::kSuccess == stat ) {
				for ( ; !fnmoveCurveCVs.isDone(); fnmoveCurveCVs.next() )
				{
					fnmoveCurveCVs.setPosition( point, MSpace::kWorld );
				}
				fnmoveCurveCVs.updateCurve();
			}
			else {
				cerr << "Function set error\n";
			}
		}
	}
	else {
		cerr << "Error creating selection list iterator\n";
	}
	return stat;
}


MStatus initializePlugin( MObject obj )
{
	MStatus   status;
	MFnPlugin plugin( obj, PLUGIN_COMPANY, "3.0", "Any");

	status = plugin.registerCommand( "moveCurveCVs", moveCurveCVs::creator );
	if (!status) {
		status.perror("registerCommand");
		return status;
	}

	return status;
}

MStatus uninitializePlugin( MObject obj)
{
	MStatus   status;
	MFnPlugin plugin( obj );

	status = plugin.deregisterCommand( "moveCurveCVs" );
	if (!status) {
		status.perror("deregisterCommand");
		return status;
	}

	return status;
}
