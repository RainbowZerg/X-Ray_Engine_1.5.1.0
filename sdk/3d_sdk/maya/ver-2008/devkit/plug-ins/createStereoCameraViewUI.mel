//-
// ==========================================================================
// Copyright (C) 1995 - 2006 Autodesk, Inc. and/or its licensors.  All
// rights reserved.
//
// The coded instructions, statements, computer programs, and/or related
// material (collectively the "Data") in these files contain unpublished
// information proprietary to Autodesk, Inc. ("Autodesk") and/or its
// licensors, which is protected by U.S. and Canadian federal copyright
// law and by international treaties.
//
// The Data is provided for use exclusively by You. You have the right
// to use, modify, and incorporate this Data into other products for
// purposes authorized by the Autodesk software license agreement,
// without fee.
//
// The copyright notices in the Software and this entire statement,
// including the above license grant, this restriction and the
// following disclaimer, must be included in all copies of the
// Software, in whole or in part, and all derivative works of
// the Software, unless such copies or derivative works are solely
// in the form of machine-executable object code generated by a
// source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND.
// AUTODESK DOES NOT MAKE AND HEREBY DISCLAIMS ANY EXPRESS OR IMPLIED
// WARRANTIES INCLUDING, BUT NOT LIMITED TO, THE WARRANTIES OF
// NON-INFRINGEMENT, MERCHANTABILITY OR FITNESS FOR A PARTICULAR
// PURPOSE, OR ARISING FROM A COURSE OF DEALING, USAGE, OR
// TRADE PRACTICE. IN NO EVENT WILL AUTODESK AND/OR ITS LICENSORS
// BE LIABLE FOR ANY LOST REVENUES, DATA, OR PROFITS, OR SPECIAL,
// DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES, EVEN IF AUTODESK
// AND/OR ITS LICENSORS HAS BEEN ADVISED OF THE POSSIBILITY
// OR PROBABILITY OF SUCH DAMAGES.
//
// ==========================================================================
//+

global string $gMainCameraName = "";
global string $gMainCameraNameShape = ""; 

global proc createCameras()
//
// Description: 
//   Create 3 camera. A left eye camera, a right eye camera, and a center 
//   camera.  Note, this does not correctly setup everything for true 
//   stereo camera. It is only intended to demonstrate the camera
//   functionality. 
//
{
	global string $gMainCameraName;
	global string $gMainCameraNameShape; 
	$gMainCameraName = "stereoCamera"; 
	string $cameraMain[] = `camera`; 
	rename $cameraMain[0] ($gMainCameraName + "Center"); 
	addAttr -k on -ln "eyeOffset" -at "float" ;
	string $gMainCameraNameShape = "stereoCameraCenterShape"; 
	
	string $cameraLeft[] = `camera`; 
	string $cameraRight[] = `camera`; 
	
	rename $cameraLeft[0] ($gMainCameraName + "Left" );
	rename $cameraRight[0] ($gMainCameraName + "Right" );

	parent ($gMainCameraName + "Left") ($gMainCameraName + "Center");
	parent ($gMainCameraName + "Right") ($gMainCameraName + "Center");
	
	connectAttr ($gMainCameraName + "Center.eyeOffset") ($gMainCameraName + "Right.translateX");
	expression -s ("\"" + $gMainCameraName + "Left.translateX = -" + $gMainCameraName + "Center.eyeOffset\r\"") -o ($gMainCameraName + "Left") -ae 1 -uc all; 
	
	setAttr -l on ($gMainCameraName + "Left.translate");
	setAttr -l on ($gMainCameraName + "Right.translate");
	setAttr -l on ($gMainCameraName + "Left.rotate");
	setAttr -l on ($gMainCameraName + "Right.rotate");
}

global proc createStereoCameraViewWindow( )
{
	// Create a stereo view as a panel window. 
	//
	createStereoCameraViewUI( "", "" ); 
}

proc buildMarkingMenuForStereoCamera( string $parent, string $panelControl )
{
	global int $gIsMarkingMenuOn;

	//  Find out current location of the panel and ensure that it has
	//  a control layout associated with it.
	//
	//	regular popup mappings.
	int $objectButton = 3;
	int $ctlObjectQualifier = 0;
	int $shObjectQualifier = 0;
	
	string $objectMenuName = ( $parent + "ObjectPop" );
	string $convertMenuName = ( $parent + "ConvertPop" );
	string $commandMenuName = ( $parent + "CommandPop" );
	string $toolOptionsMenuName = ( $parent + "ToolOptionsPop" );
	
	// Build the object specific menu
	if( !`popupMenu -exists $objectMenuName` )
	{
		string $fullObjectMenuName = `popupMenu -parent $panelControl $objectMenuName`;
			
		string $buildObjectMenuItemsNow =  "buildObjectMenuItemsNow";

		popupMenu -e 
			-mm $gIsMarkingMenuOn
			-button $objectButton 
			-sh $shObjectQualifier  
			-ctl $ctlObjectQualifier 
			-aob true 
			-pmc (  $buildObjectMenuItemsNow + " \"" + $fullObjectMenuName + "\"")
			$objectMenuName;
	}

	if (!`popupMenu -exists $convertMenuName`) {
			
		string $fullConvertMenuName = `popupMenu -parent $panelControl
			-allowOptionBoxes true $convertMenuName`;
		string $buildConvertMM = "buildConvertMM";
		
		popupMenu -edit
			-markingMenu $gIsMarkingMenuOn 
			-ctrlModifier true 
			-button 3 
			-postMenuCommand ($buildConvertMM + " \"" + $fullConvertMenuName + "\"")
			$convertMenuName;
	}

	if (!`popupMenu -exists $commandMenuName`) {
			
		string $fullCommandMenuName = `popupMenu -parent $panelControl
			-allowOptionBoxes true $commandMenuName`;
		string $buildCommandMM = "contextPolyToolsMM";
		
		popupMenu -edit
			-markingMenu $gIsMarkingMenuOn 
			-ctrlModifier false
			-shiftModifier true
			-button 3 
			-postMenuCommand ($buildCommandMM + " \"" + $fullCommandMenuName + "\"")
			$commandMenuName;
	}

	if (!`popupMenu -exists $toolOptionsMenuName`) {
		
		string $fullToolOptionsMenuName = `popupMenu -parent $panelControl
			-allowOptionBoxes true $toolOptionsMenuName`;
		string $buildCommandMM = "buildToolOptionsMM";
		
		popupMenu -edit
			-markingMenu $gIsMarkingMenuOn 
			-ctrlModifier true
			-shiftModifier true
			-button 3 
			-postMenuCommand ($buildCommandMM + " \"" + $fullToolOptionsMenuName + "\"")
			$toolOptionsMenuName;
	}
}

global proc string createStereoCameraViewUI( string $panelName, string $editor ) 
//
//  Description:  Create UI and parent any editors.
//
{
	global string $gMainCameraName; 
	global string $gMainCameraNameShape; 

	if ( $gMainCameraName == "" || !`objExists ($gMainCameraNameShape)`  ) {
		createCameras(); 
	}
	
	string $window = "";
	if ( $panelName == "" ) { 
		$window = `window`; 
	}
	string $form = `formLayout`;
	int $newEditor = 0; 
	if ( $editor == "" ) { 
		$newEditor = 1; 
		$editor = eval( "stereoCameraView" ); 
	} else { 
		eval( ("stereoCameraView -edit -parent " + $form + " " + $editor) );
	}

	string $column = `columnLayout -adjustableColumn true`;

	//  Create some buttons that will alter the display appearance of
	//  objects in the model editor, eg. wireframe vs. shaded mode.
	//
	button -label "Stereo"
		-command ("stereoCameraView -edit -displayMode stereo " + $editor);
	button -label "Left Camera"
		-command ("stereoCameraView -edit -displayMode leftEye " + $editor);
	button -label "Right Camera"
		-command ("stereoCameraView -edit -displayMode rightEye " + $editor);
	button -label "Center Camera"
		-command ("stereoCameraView -edit -displayMode centerEye " + $editor);
	button -label "Swap Buffers" 
		-command ("stereoCameraView -edit -swapBuffers " + $editor); 

	button -label "Smooth Shaded"
		-command ("stereoCameraView -edit -displayAppearance smoothShaded " + $editor);
	button -label "Wireframe"
		-command ("stereoCameraView -edit -displayAppearance wireframe " + $editor);
	
	checkBox -label "Override HUD" 
		-onCommand ("stereoCameraView -edit -overrideHUD 1 " + $editor)
		-offCommand ("stereoCameraView -edit -overrideHUD 0 " + $editor) 
		-value `stereoCameraView -query -overrideHUD $editor`; 

	checkBox -label "Override Adornments" 
		-onCommand ("stereoCameraView -edit -overrideAdornment 1 " + $editor)
		-offCommand ("stereoCameraView -edit -overrideAdornment 0 " + $editor)
		-value `stereoCameraView -query -overrideAdornment $editor`; 
		
	//  Set up the window layout attachments.
	//
	formLayout -edit
		-attachForm	$column "top"	0
		-attachForm	$column "left"   0
		-attachNone	$column "bottom"
		-attachNone	$column "right"
		-attachForm	$editor "top"	0
		-attachControl $editor "left"   0 $column
		-attachForm	$editor "bottom" 0
		-attachForm	$editor "right"  0
		$form;


	if ( $newEditor ) { 
		eval("stereoCameraView -edit -camera " +  $gMainCameraNameShape + " " + $editor);
		eval("stereoCameraView -edit -rightCamera " + $gMainCameraName + "Right " + $editor); 
		eval("stereoCameraView -edit -leftCamera " +  $gMainCameraName + "Left " + $editor); 
		eval("stereoCameraView -edit -centerCamera " + $gMainCameraNameShape + " " + " " + $editor);
		eval("stereoCameraView -edit -displayMode centerEye " + $editor);
	}
	select -r ($gMainCameraName + "Center"); 

	if ( $panelName == "" ) { 
		buildMarkingMenuForStereoCamera( $window, $editor );
	} else { 
		buildMarkingMenuForStereoCamera( $panelName, $editor ); 
	}

	refresh(); 
	
	if ( $panelName == "" ) { 
		showWindow $window; 
	}
	return $editor; 
}

