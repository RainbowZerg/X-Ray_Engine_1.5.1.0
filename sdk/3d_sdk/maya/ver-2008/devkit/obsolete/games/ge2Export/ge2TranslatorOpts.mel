//-
// ==========================================================================
// Copyright (C) 1995 - 2005 Alias Systems Corp. and/or its licensors.  All 
// rights reserved. 
// 
// The coded instructions, statements, computer programs, and/or related 
// material (collectively the "Data") in these files are provided by Alias 
// Systems Corp. ("Alias") and/or its licensors for the exclusive use of the 
// Customer (as defined in the Alias Software License Agreement that 
// accompanies this Alias software). Such Customer has the right to use, 
// modify, and incorporate the Data into other products and to distribute such 
// products for use by end-users.
//  
// THE DATA IS PROVIDED "AS IS".  ALIAS HEREBY DISCLAIMS ALL WARRANTIES 
// RELATING TO THE DATA, INCLUDING, WITHOUT LIMITATION, ANY AND ALL EXPRESS OR 
// IMPLIED WARRANTIES OF NON-INFRINGEMENT, MERCHANTABILITY AND/OR FITNESS FOR A 
// PARTICULAR PURPOSE. IN NO EVENT SHALL ALIAS BE LIABLE FOR ANY DAMAGES 
// WHATSOEVER, WHETHER DIRECT, INDIRECT, SPECIAL, OR PUNITIVE, WHETHER IN AN 
// ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, OR IN EQUITY, 
// ARISING OUT OF ACCESS TO, USE OF, OR RELIANCE UPON THE DATA.
// ==========================================================================
//+

global proc int ge2TranslatorOpts ( string $parent,
									string $action,
									string $initialSettings,
									string $resultCallback )
//
//	Description:
//		This script posts the GameExchange2 file translator options.
//		The optionsString is of the form:
//			varName1=value1;varName2=value2;...
//
//	Parameters:
//		$parent	- the elf parent layout for this options layout. It is
//					always a scrollLayout.
//		$action	- the action that is to be performed with this invokation
//					of this proc. Valid options are:
//						"query" - construct the options string and pass it
//									to the resultCallback.
//						"post"	- post all the elf controls.
//		$initialSettings - the current options string in effect at the
//						   time this script is invoked.
//		$resultCallback	-
//				This is the proc to be called with the result string. 
//				resultCallback ( string $optionsString )
//
//	Returns:
//		1 if successfull.
//		0 otherwise.
//
{
	string	$form;
	string  $tabs;
	int		$intVal;
	string	$strVal;
	float	$floatVal;
	int		$bResult;
	string	$currentOptions;
	string	$optionList[];
	string	$optionBreakDown[];
	int		$index;
	int		$counter;

	string	$texTypeString[] = { "als", "bmp", "png", "ppm", "sgi", "tif" };
	int		$defaultTexTypeIndex = 4;

	if ($action == "post") {
		setParent $parent;

		setUITemplate -pushTemplate DefaultTemplate;		

		formLayout -e -visible false optionsBoxForm;

		columnLayout -adj true;
			frameLayout
					-cll true 
					-cl true
					-bv true 
					-bs "etchedIn"
					-l "Domain Options" 
					ge2DomainFrame;

				columnLayout -adj true ge2DomainOptions;

					checkBoxGrp
							-l "Format data for domain:"
							-ncb 2
							-va2 true false
							-la2 "GL/DirectX" "SonyPSX"
							ge2DomainFlags;

					checkBoxGrp
							-l " "
							-ncb 2
							-va2 false false
							-la2 "N64" "Custom"
							ge2DomainFlags2;

				setParent ..; // columnLayout
			setParent ..; // frameLayout

			frameLayout 
					-cll true 
					-cl false 
					-bv true 
					-bs "etchedIn"
					-l "Animation Options" 
					ge2AnimateFrame;

				columnLayout -adj true ge2AnimateOptions;

					checkBoxGrp
							-l " "
							-ncb 1
							-v1 true
							-l1 "Enable Animation"
							-cc ge2SetAnim
							ge2AnimEnable;

					intSliderGrp -l "Start:" -f true -min 1 -max 1000 ge2AnimStart;
					intSliderGrp -e -v 1 ge2AnimStart;

					intSliderGrp -l "End:" -f true -min 1 -max 1000 ge2AnimEnd;
					intSliderGrp -e -v 1 ge2AnimEnd;

					intSliderGrp -l "Step:" -f true -min 1 -max 100 ge2AnimStep;
					intSliderGrp -e -v 1 ge2AnimStep;

					checkBoxGrp
							-l "Animate:"
							-ncb 2
							-va2 false true
							-cc ge2SetAnim
							-la2 "Vertices" "Transforms" ge2AnimFlags;

					checkBoxGrp
							-l " "
							-ncb 2
							-va2 true true
							-cc ge2SetAnim
							-la2 "Lights" "Camera" ge2AnimFlags2;

					checkBoxGrp
							-l "Keyframe using:"
							-ncb 2
							-va2 true false
							-cc ge2SetAnim
							-la2 "Anim Curves" "Sampling" ge2AnimKeyframe;

					intSliderGrp
							-l "Sample by" -field true
							-min 1 -max 50
							-v 1
							ge2AnimSampRate;

					floatSliderGrp
							-l "Tolerance"
							-field true
							-min 0.0 -max 5.0
							-v 0.5
							ge2AnimSampTolerance;

					radioButtonGrp
							-l "Animation displacement:"
							-nrb 2
							-la2 "Relative to Current Frame" "Absolute"
							-sl 1
							ge2AnimDisplacement;

				setParent ..; // columnLayout
			setParent ..; // frameLayout

			frameLayout 
					-cll true 
					-cl false 
					-bv true 
					-bs "etchedIn"
					-l "Export Options" 
					ge2ExportFrame;

				columnLayout -adj true ge2ExportOptions;

					radioButtonGrp
							-l "Hierarchy:"
							-nrb 3
							-la3 "World" "Flat" "Full" 
							-sl 1
							ge2HrcType;

					radioButtonGrp
							-l "Export:"
							-nrb 3
							-la3 "All" "Selected" "Active" 
							-sl 1
							ge2ExportSel;

					radioButtonGrp
							-l "Tesselation:"
							-nrb 2
							-la2 "Tri" "Quad" 
							-sl 1
							ge2Tesselation;

					checkBoxGrp
							-l "Export:"
							-ncb 2
							-va2 true true
							-la2 "Lights" "Camera"
							ge2ExportFlags;

					checkBoxGrp
							-l ""
							-ncb 2
							-va2 true true
							-la2 "Textures" "Geometry"
							-cc1 ge2SetTextureExportOptions
							-cc2 ge2SetGeometryExportOptions
							ge2ExportFlags2;

					checkBoxGrp
							-l ""
							-v1 true
							-l1 "Normals"
							-cc1 ge2SetNormalExportOptions
							ge2ExportFlags3;

					checkBoxGrp
							-l "Export options:"
							-ncb 2
							-va2 false false
							-la2 "Reverse winding" "Flip normals"							
							ge2ExportFlags4;

				setParent ..; // columnLayout
			setParent ..; // frameLayout

			frameLayout 
					-cll true 
					-cl true 
					-bv true 
					-bs "etchedIn"
					-l "Texture Options" 
					ge2TextureFrame;

				columnLayout -adj true ge2TextureOptions;

					checkBoxGrp
						-l " "
						-v1 true 
						-l1 "Use 2d and 3d texture placement"
						ge2TextureFlags;					

					checkBoxGrp
						-l " "
						-v1 true
						-l1 "Use convertSolidTx on file textures"
						ge2TextureFlags2;

					checkBoxGrp
						-l " "
						-v1 false
						-l1 "Use original file textures"
						ge2TextureFlags3;					

					separator -style "none";

					optionMenuGrp -l "Texture file type:" ge2TextureType;
						int $arraySize = size($texTypeString);
						for ( $counter = 0; $counter < $arraySize; $counter++ )
						{
							menuItem -label $texTypeString[$counter];
						}
					optionMenuGrp -e -sl ($defaultTexTypeIndex+1) ge2TextureType;

					intSliderGrp -l "X Tex Res" -field true 
										-max 10000 -fmx 4096 ge2Xtexres;
					intSliderGrp -l "Y Tex Res" -field true 
										-max 10000 -fmx 4096 ge2Ytexres;

					intSliderGrp -l "Max X Tex Res" -field true 
										-max 10000 -fmx 4096 ge2MaxXtexres;
					intSliderGrp -l "Max Y Tex Res" -field true 
										-max 10000 -fmx 4096 ge2MaxYtexres;
					intSliderGrp -e -v 256 ge2Xtexres;
					intSliderGrp -e -v 256 ge2Ytexres;
					intSliderGrp -e -v 4096 ge2MaxXtexres;
					intSliderGrp -e -v 4096 ge2MaxYtexres;					

					text -l "  Texture path:" -al "left";
					rowLayout -nc 2 -cw2 360 45; //-cl2 "both" "both";
						textField ge2TextPath;	
						button	-l "Browse" -rs true 
								-al "center" -c ge2BrowseForTextureSearchPath 
								ge2TexSPBrowser;
					setParent ..; // rowLayout


				setParent ..; // columnLayout				
			setParent ..; // frameLayout

			frameLayout 
					-cll true 
					-cl true
					-bv true 
					-bs "etchedIn"
					-l "Other Options" 
					ge2OtherFrame;

				columnLayout -adj true ge2OtherOptions;

		            optionMenuGrp -l "Float precision:" ge2Precision;
	                        menuItem -label ".x";
		                    menuItem -label ".xx";
			                menuItem -label ".xxx";
				            menuItem -label ".xxxx";
					        menuItem -label ".xxxxx";
						    menuItem -label ".xxxxxx";
					optionMenuGrp -e -sl 3 ge2Precision;

					checkBoxGrp
							-l "Format output:"
							-ncb 2
							-va2 true false
							-la2 "Tabs" "Comments"
							ge2OtherFlags;

					checkBoxGrp
							-l "Debug output:"
							-ncb 3
							-va3 false false false
							-la3 "Geometry" "Cameras" "Lights"
							ge2VerboseFlags;

					text -l "  Run script when done:" -al "left";

					rowLayout -nc 2 -cw2 360 45; //-cl2 "both" "both";
						textField ge2Script;
						button -l "Browse" -rs true -al "center" -c ge2BrowseForScript ge2ScriptBrowser;
					setParent ..; // rowLayout


					text -l "  (Use forward slash (\"/\") for path delimiter)" -al "left";

					checkBoxGrp
							-l " "
							-ncb 1
							-v1 true
							-l1 "Append file name to script"
							ge2ScriptAppend;


				setParent ..; // columnLayout
			setParent ..; // frameLayout

		setParent ..; // columnLayout

		setParent ..; // formLayout (optionsBoxForm)
		
		// Now set to current settings.

		$currentOptions = $initialSettings;
		if (size($currentOptions) > 0) 
		{
			tokenize($currentOptions, ";", $optionList);
			for ($index = 0; $index < size($optionList); $index++) 
			{
				tokenize($optionList[$index], "=", $optionBreakDown);

//
// Domain selection options
//
				 if ( $optionBreakDown[0] == "clDomain" )
				 {					 
					 $intVal = $optionBreakDown[1];
					 frameLayout -e -cl $intVal ge2DomainFrame;
				 }
				else
				 if ( $optionBreakDown[0] == "clAnimate" )
				 {
					 $intVal = $optionBreakDown[1];
					 frameLayout -e -cl $intVal ge2AnimateFrame;
				 }
				else
				 if ( $optionBreakDown[0] == "clExport" )
				 {
					 $intVal = $optionBreakDown[1];
					 frameLayout -e -cl $intVal ge2ExportFrame;
				 }
				else
				 if ( $optionBreakDown[0] == "clTexture" )
				 {
					 $intVal = $optionBreakDown[1];
					 frameLayout -e -cl $intVal ge2TextureFrame;
				 }
				else
				 if ( $optionBreakDown[0] == "clOther" )
				 {
					 $intVal = $optionBreakDown[1];
					 frameLayout -e -cl $intVal ge2OtherFrame;
				 }
				else
				 if ( $optionBreakDown[0] == "useGL" )
				 {
					 $intVal = $optionBreakDown[1];
					 checkBoxGrp -e -v1 $intVal ge2DomainFlags;
				 }
				else
				 if ( $optionBreakDown[0] == "usePSX" )
				 {
					 $intVal = $optionBreakDown[1];
					 checkBoxGrp -e -v2 $intVal ge2DomainFlags;
				 }
				else
				 if ( $optionBreakDown[0] == "useN64" )
				 {
					 $intVal = $optionBreakDown[1];
					 checkBoxGrp -e -v1 $intVal ge2DomainFlags2;
				 }
				else
				 if ( $optionBreakDown[0] == "useCustom" )
				 {
					 $intVal = $optionBreakDown[1];
					 checkBoxGrp -e -v2 $intVal ge2DomainFlags2;
				 }


// Set Animation sliders
//
				else
				 if ( $optionBreakDown[0] == "enableAnim" )
				 {
					 $intVal = $optionBreakDown[1];
					 checkBoxGrp -e -v1 $intVal ge2AnimEnable;
				 }
				else
				 if ( $optionBreakDown[0] == "animStart" ) 
				 {
					$intVal = $optionBreakDown[1];
					intSliderGrp -e -v $intVal ge2AnimStart;
				 }
				else
				 if ( $optionBreakDown[0] == "animEnd" ) 
				 {
					$intVal = $optionBreakDown[1];
					intSliderGrp -e -v $intVal ge2AnimEnd;
				 }
				else
				 if ( $optionBreakDown[0] == "animStep" ) 
				 {
					$intVal = $optionBreakDown[1];
					intSliderGrp -e -v $intVal ge2AnimStep;
				 }

// Post Animation flags
//
				else
				 if ( $optionBreakDown[0] == "animVertices" ) 
				 {
					$intVal = $optionBreakDown[1];
					checkBoxGrp -e -v1 $intVal ge2AnimFlags; 
				 }

				else
				 if ( $optionBreakDown[0] == "animTransforms" ) 
				 {
					$intVal = $optionBreakDown[1];
					checkBoxGrp -e -v2 $intVal ge2AnimFlags; 
				 }
				else
				 if ( $optionBreakDown[0] == "animLights" ) 
				 {
					$intVal = $optionBreakDown[1];
					checkBoxGrp -e -v1 $intVal ge2AnimFlags2; 
				 }
				else
				 if ( $optionBreakDown[0] == "animCamera" )
				 {
					 $intVal = $optionBreakDown[1];
					 checkBoxGrp -e -v2 $intVal ge2AnimFlags2;
				 }
				else
				 if ( $optionBreakDown[0] == "keyCurves" )
				 {
					 $intVal = $optionBreakDown[1];
					 checkBoxGrp -e -v1 $intVal ge2AnimKeyframe;
				 }
				else
				 if ( $optionBreakDown[0] == "keySample" )
				 {
					 $intVal = $optionBreakDown[1];
					 checkBoxGrp -e -v2 $intVal ge2AnimKeyframe;
				 }
				else
				 if ( $optionBreakDown[0] == "sampRate" )
				 {
					 $intVal = $optionBreakDown[1];
					 intSliderGrp -e -v $intVal ge2AnimSampRate;
				 }
				else
				 if ( $optionBreakDown[0] == "sampTol" )
				 {
					 $floatVal = $optionBreakDown[1];
					 floatSliderGrp -e -v $floatVal ge2AnimSampTolerance;
				 }
				else
				 if ( $optionBreakDown[0] == "animDisplacement" )
				 {
					 $intVal = $optionBreakDown[1];
					 radioButtonGrp -e -sl $intVal ge2AnimDisplacement;
				 }

//
// Hierarchy and export selection
//				
				if ($optionBreakDown[0] == "hrcType") 
				{
					$intVal = $optionBreakDown[1];
                    radioButtonGrp -e -sl $intVal ge2HrcType;
				}
                else 
				 if ($optionBreakDown[0] == "exportSel") 
				 {
                    $intVal = $optionBreakDown[1];
					radioButtonGrp -e -sl $intVal ge2ExportSel;
				 }  
				else 
				 if ($optionBreakDown[0] == "tesselation")
				 {
                    $intVal = $optionBreakDown[1] + 1;
					radioButtonGrp -e -sl $intVal ge2Tesselation;
				}

 				else
				 if ( $optionBreakDown[0] == "exportLights" ) {
					$intVal = $optionBreakDown[1];
					checkBoxGrp -e -v1 $intVal ge2ExportFlags; 
				 }
				else
				 if ( $optionBreakDown[0] == "exportCamera" ) {
					$intVal = $optionBreakDown[1];
					checkBoxGrp -e -v2 $intVal ge2ExportFlags;
				 }
				else
				 if ( $optionBreakDown[0] == "exportTextures" ) {
					$intVal = $optionBreakDown[1];
					checkBoxGrp -e -v1 $intVal ge2ExportFlags2;
				 }
				else
				 if ( $optionBreakDown[0] == "exportGeometry" ) {
					$intVal = $optionBreakDown[1];
					checkBoxGrp -e -v2 $intVal ge2ExportFlags2;
				 }
				else
				 if ( $optionBreakDown[0] == "exportNormals" ) {
					$intVal = $optionBreakDown[1];
					checkBoxGrp -e -v1 $intVal ge2ExportFlags3;
				 }
				else
				 if ( $optionBreakDown[0] == "reverse" ) {
					$intVal = $optionBreakDown[1];
					checkBoxGrp -e -v1 $intVal ge2ExportFlags4;
				 }
				
				else
				 if ( $optionBreakDown[0] == "opposite" ) {
					$intVal = $optionBreakDown[1];
					checkBoxGrp -e -v2 $intVal ge2ExportFlags4;
				 }

// Post texture options
//
                else
                 if ( $optionBreakDown[0] == "texsample" ) {
                    $intVal = $optionBreakDown[1];
					checkBoxGrp -e -v1 $intVal ge2TextureFlags; 
                 }  

                else
                 if ( $optionBreakDown[0] == "texevaluate" ) {
                    $intVal = $optionBreakDown[1];
                    checkBoxGrp -e -v1 $intVal ge2TextureFlags2;
                 }
				else
				 if ( $optionBreakDown[0] == "texOriginal" )
				 {
					$intVal = $optionBreakDown[1];
					checkBoxGrp -e -v1 $intVal ge2TextureFlags3;
				 }
                else
                 if ( $optionBreakDown[0] == "Xtexres" ) {
                    $intVal = $optionBreakDown[1];
                    intSliderGrp -e -v $intVal ge2Xtexres;
                 }
                else
                 if ( $optionBreakDown[0] == "Ytexres" ) {
                    $intVal = $optionBreakDown[1];
                    intSliderGrp -e -v $intVal ge2Ytexres;
                 }
                else
                 if ( $optionBreakDown[0] == "MaxXtexres" ) {
                    $intVal = $optionBreakDown[1];
                    intSliderGrp -e -v $intVal ge2MaxXtexres;
                 }
                else
                 if ( $optionBreakDown[0] == "MaxYtexres" ) {
                    $intVal = $optionBreakDown[1];
                    intSliderGrp -e -v $intVal ge2MaxYtexres;
                 }
				else
				 if ( $optionBreakDown[0] == "texType" )
				 {
					 // In case caller passes us one we don't know
					 optionMenuGrp -e -sl ($defaultTexTypeIndex+1) ge2TextureType;
					 $strVal = $optionBreakDown[1];
					 for ( $counter = 0; $counter < size($texTypeString); $counter++ )
					 {
						 if ( $strVal == $texTypeString[$counter] )
						 {
							 optionMenuGrp -e -sl ($counter+1) ge2TextureType;
							 break;
						 }
					 }
				 }
				else
				 if ( $optionBreakDown[0] == "textPath" )
				 {
					 textField -e -text $optionBreakDown[1] ge2TextPath;
				 }

//
// Other options...
				else
				 if ( $optionBreakDown[0] == "precision" )
				 {
					$intVal = $optionBreakDown[1];
					optionMenuGrp -e -sl $intVal ge2Precision;
				 }
				else
				 if ( $optionBreakDown[0] == "format" )
				 {
					 $intVal = $optionBreakDown[1];
					 checkBoxGrp -e -v1 $intVal ge2OtherFlags;
				 }
				else
				 if ( $optionBreakDown[0] == "comments" )
				 {
					 $intVal = $optionBreakDown[1];
					 checkBoxGrp -e -v2 $intVal ge2OtherFlags;
				 }
				else
				 if ( $optionBreakDown[0] == "verboseGeom" )
				 {
					 $intVal = $optionBreakDown[1];
					 checkBoxGrp -e -v1 $intVal ge2VerboseFlags;
				 }
				else
				 if ( $optionBreakDown[0] == "verboseLgt" )
				 {
					 $intVal = $optionBreakDown[1];
					 checkBoxGrp -e -v3 $intVal ge2VerboseFlags;
				 }
				else
				 if ( $optionBreakDown[0] == "verboseCam" )
				 {
					 $intVal = $optionBreakDown[1];
					 checkBoxGrp -e -v2 $intVal ge2VerboseFlags;
				 }
				else 
				 if ( $optionBreakDown[0] == "script" )
				 {
					 textField -e -tx $optionBreakDown[1] ge2Script;
				 }
				else
				 if ( $optionBreakDown[1] == "scriptAppend" )
				 {
					$intVal = $optionBreakDown[1];
					checkBoxGrp -e -v $intVal ge2ScriptAppend;
				 }
			}
		}
		$bResult = 1;

		ge2SetAnim;
		ge2SetNormalExportOptions;
		ge2SetGeometryExportOptions;
		ge2SetTextureExportOptions;

		formLayout -e -visible true optionsBoxForm;

		setUITemplate -popTemplate;

	} else if ($action == "query") {

// Get collapse status
//
		$currentOptions = $currentOptions + "clDomain=" + `frameLayout -q -cl ge2DomainFrame` + ";";
		$currentOptions = $currentOptions + "clAnimate=" + `frameLayout -q -cl ge2AnimateFrame` + ";";
		$currentOptions = $currentOptions + "clExport=" + `frameLayout -q -cl ge2ExportFrame` + ";";
		$currentOptions = $currentOptions + "clTexture=" + `frameLayout -q -cl ge2TextureFrame` + ";";
		$currentOptions = $currentOptions + "clOther=" + `frameLayout -q -cl ge2OtherFrame` + ";";
		
// Query animation range/step
//
		$currentOptions = $currentOptions + "enableAnim=" + `checkBoxGrp -q -v1 ge2AnimEnable` + ";";
		$currentOptions = $currentOptions + "animStart=" + `intSliderGrp -q -v ge2AnimStart` + ";";
		$currentOptions = $currentOptions + "animEnd=" + `intSliderGrp -q -v ge2AnimEnd` + ";";
		$currentOptions = $currentOptions + "animStep=" + `intSliderGrp -q -v ge2AnimStep` + ";";

// Query Anim options
//
		$currentOptions = $currentOptions + "animVertices=" + `checkBoxGrp -q -v1 ge2AnimFlags` + ";";
		$currentOptions = $currentOptions + "animTransforms=" + `checkBoxGrp -q -v2 ge2AnimFlags` + ";";
		$currentOptions = $currentOptions + "animLights=" + `checkBoxGrp -q -v1 ge2AnimFlags2` + ";";
		$currentOptions = $currentOptions + "animCamera=" + `checkBoxGrp -q -v2 ge2AnimFlags2` + ";";
		$currentOptions = $currentOptions + "keyCurves=" + `checkBoxGrp -q -v1 ge2AnimKeyframe` + ";";
		$currentOptions = $currentOptions + "keySample=" + `checkBoxGrp -q -v2 ge2AnimKeyframe` + ";";
		$currentOptions = $currentOptions + "sampRate=" + `intSliderGrp -q -v ge2AnimSampRate` + ";";
		$currentOptions = $currentOptions + "sampTol=" + `floatSliderGrp -q -v ge2AnimSampTolerance` + ";";
		$currentOptions = $currentOptions + "animDisplacement=" + `radioButtonGrp -q -sl ge2AnimDisplacement` + ";";

// Query domain selection
//
		$currentOptions = $currentOptions + "useGL=" + `checkBoxGrp -q -v1 ge2DomainFlags` + ";";
		$currentOptions = $currentOptions + "usePSX=" + `checkBoxGrp -q -v2 ge2DomainFlags` + ";";
		$currentOptions = $currentOptions + "useN64=" + `checkBoxGrp -q -v1 ge2DomainFlags2` + ";";
		$currentOptions = $currentOptions + "useCustom=" + `checkBoxGrp -q -v2 ge2DomainFlags2` + ";";

// Query hierarchy type and export options
//
		$currentOptions = $currentOptions + "hrcType=" + `radioButtonGrp -q -sl ge2HrcType` + ";";
		$currentOptions = $currentOptions + "exportSel=" + `radioButtonGrp -q -sl ge2ExportSel` + ";";
		$currentOptions = $currentOptions + "tesselation=" + `radioButtonGrp -q -sl ge2Tesselation` + ";";
		$currentOptions = $currentOptions + "exportLights=" + `checkBoxGrp -q -v1 ge2ExportFlags` + ";";
		$currentOptions = $currentOptions + "exportCamera=" + `checkBoxGrp -q -v2 ge2ExportFlags` + ";";
		$currentOptions = $currentOptions + "exportTextures=" + `checkBoxGrp -q -v1 ge2ExportFlags2` + ";";
		$currentOptions = $currentOptions + "exportGeometry=" + `checkBoxGrp -q -v2 ge2ExportFlags2` + ";";
		$currentOptions = $currentOptions + "exportNormals=" + `checkBoxGrp -q -v1 ge2ExportFlags3` + ";";
		$currentOptions = $currentOptions + "reverse=" + `checkBoxGrp -q -v1 ge2ExportFlags4` + ";";
		$currentOptions = $currentOptions + "opposite=" + `checkBoxGrp -q -v2 ge2ExportFlags4` + ";";

// Query Texture options
//
		$currentOptions = $currentOptions + "texevaluate=" + `checkBoxGrp -q -v1 ge2TextureFlags` + ";";
		$currentOptions = $currentOptions + "texsample=" + `checkBoxGrp -q -v1 ge2TextureFlags2` + ";";
		$currentOptions = $currentOptions + "texOriginal=" + `checkBoxGrp -q -v1 ge2TextureFlags3` + ";";

        $currentOptions = $currentOptions + "Xtexres=" + `intSliderGrp -q -v ge2Xtexres` + ";";
        $currentOptions = $currentOptions + "Ytexres=" + `intSliderGrp -q -v ge2Ytexres` + ";";
        $currentOptions = $currentOptions + "MaxXtexres=" + `intSliderGrp -q -v ge2MaxXtexres` + ";";
        $currentOptions = $currentOptions + "MaxYtexres=" + `intSliderGrp -q -v ge2MaxYtexres` + ";";

		$currentOptions = $currentOptions + "texType=" + `optionMenuGrp -q -v ge2TextureType` + ";";
		$currentOptions = $currentOptions + "textPath=" + `textField -q -text ge2TextPath` + ";";

// Query other flags
//
        $currentOptions = $currentOptions + "precision=" + `optionMenuGrp -q -sl ge2Precision` + ";";
		$currentOptions = $currentOptions + "format=" + `checkBoxGrp -q -v1 ge2OtherFlags` + ";";
		$currentOptions = $currentOptions + "comments=" + `checkBoxGrp -q -v2 ge2OtherFlags` + ";";
		$currentOptions = $currentOptions + "verboseGeom=" + `checkBoxGrp -q -v1 ge2VerboseFlags` + ";";
		$currentOptions = $currentOptions + "verboseLgt=" + `checkBoxGrp -q -v2 ge2VerboseFlags` + ";";
		$currentOptions = $currentOptions + "verboseCam=" + `checkBoxGrp -q -v3 ge2VerboseFlags` + ";";

		$currentOptions = $currentOptions + "script=" + `textField -q -text ge2Script` + ";";
		$currentOptions = $currentOptions + "scriptAppend=" + `checkBoxGrp -q -v1 ge2ScriptAppend` + ";";

		print( "Options: " + $currentOptions + "\n" );

		eval($resultCallback+" \""+$currentOptions+"\"");

		$bResult = 1;
	} else {
		$bResult = 0;
	}
	
	return $bResult;
}

global proc
ge2SetAnim()
{
	int $animEn = `checkBoxGrp -q -v1 ge2AnimEnable`;
	int $vertOn = `checkBoxGrp -q -v1 ge2AnimFlags`;
	int $transOn = `checkBoxGrp -q -v2 ge2AnimFlags`;
	int $lightsOn = `checkBoxGrp -q -v1 ge2AnimFlags2`;
	int $cameraOn = `checkBoxGrp -q -v2 ge2AnimFlags2`;
	int $sampOn = `checkBoxGrp -q -v2 ge2AnimKeyframe`;

	int $enableDisplacement;
	int $enableKeyframe;
	int $enableSliders;

	if ( !$animEn )
	{
		$enableDisplacement = false;
		$enableKeyframe = false;
		$enableSliders = false;
	}
	else {
		if ( $vertOn )
			$enableDisplacement = true;
		else
			$enableDisplacement = false;
		if ( $vertOn || $transOn || $lightsOn || $cameraOn )
			$enableKeyframe = true;
		else
			$enableKeyframe = false;
		if ( $sampOn )
			$enableSliders = true;
		else
			$enableSliders = false;
	}

	checkBoxGrp -e -en1 $enableKeyframe ge2AnimKeyframe;
	checkBoxGrp -e -en2 $enableKeyframe ge2AnimKeyframe;
	intSliderGrp -e -en $enableSliders ge2AnimSampRate;
	floatSliderGrp -e -en $enableSliders ge2AnimSampTolerance;
	radioButtonGrp -e -en $enableDisplacement ge2AnimDisplacement;

	ge2SetAnimSliders( $animEn );
	ge2SetAnimFlags( $animEn );	
}

global proc
ge2SetAnimSliders( int $enable )
{
	intSliderGrp -e -en $enable ge2AnimStart;
	intSliderGrp -e -en $enable ge2AnimEnd;
	intSliderGrp -e -en $enable ge2AnimStep;

	int $enKeyAnimCurves = `checkBoxGrp -q -en1 ge2AnimKeyframe`;
	int $keyAnimCurves = `checkBoxGrp -q -v1 ge2AnimKeyframe`;

	if ( $enKeyAnimCurves && $keyAnimCurves )
	{
		intSliderGrp -e -v 1 ge2AnimStep;
		intSliderGrp -e -en false ge2AnimStep;
	}
}

global proc
ge2SetAnimFlags( int $enable )
{
	checkBoxGrp -e -en1 $enable ge2AnimFlags;
	checkBoxGrp -e -en2 $enable ge2AnimFlags;
	checkBoxGrp -e -en1 $enable ge2AnimFlags2;
	checkBoxGrp -e -en2 $enable ge2AnimFlags2;
}

global proc
ge2SetNormalExportOptions()
{
	int $selected = `checkBoxGrp -q -v1 ge2ExportFlags3`;
	int $enabled = `checkBoxGrp -q -en1 ge2ExportFlags3`;

	if ( $selected && $enabled )
	{
		checkBoxGrp -e -en2 true ge2ExportFlags4;
	} else
	{
		checkBoxGrp -e -en2 false ge2ExportFlags4;
	}
}

global proc
ge2SetGeometryExportOptions()
{
	int $enable = `checkBoxGrp -q -v2 ge2ExportFlags2`;
	// Disable normals:
	checkBoxGrp -e -en1 $enable ge2ExportFlags3;
	// Disable reverse winding
	checkBoxGrp -e -en1 $enable ge2ExportFlags4;

	// tell Normal options to do what it will with opposites
	ge2SetNormalExportOptions();
}

global proc
ge2SetTextureExportOptions()
{
	int $enable = `checkBoxGrp -q -v1 ge2ExportFlags2`;

	checkBoxGrp -e -en $enable ge2TextureFlags;
	checkBoxGrp -e -en $enable ge2TextureFlags2;
	checkBoxGrp -e -en $enable ge2TextureFlags3;

	optionMenuGrp -e -en $enable ge2TextureType;
	intSliderGrp -e -en $enable ge2Xtexres;
	intSliderGrp -e -en $enable ge2Ytexres;
	intSliderGrp -e -en $enable ge2MaxXtexres;
	intSliderGrp -e -en $enable ge2MaxYtexres;

	textField -e -en $enable ge2TextPath;
}

global proc 
ge2SetTextureSearchPath(string $path, string $type)
{
	string $currSearchPath = `textField -q -text ge2TextPath`;
	if ( "" == $currSearchPath )
		$currSearchPath = $path;
	else
		$currSearchPath = $currSearchPath + "|" + $path;
	textField -e -text $currSearchPath ge2TextPath;
}

global proc
ge2BrowseForTextureSearchPath()
{
	fileBrowser "ge2SetTextureSearchPath" "Select Texture Path" "" 4;
}

global proc
ge2BrowseForScript()
{
	string $file = `fileDialog`;
	textField -e -text $file ge2Script;
}
