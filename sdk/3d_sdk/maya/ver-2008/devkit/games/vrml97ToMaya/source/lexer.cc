/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /vobs/aw/Maya/src/vrml97ToMayaASCII/source/lexer.cc /main/1 1999/06/16 11:23:47 jpakalns Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

#include <stdio.h>


/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include <unistd.h>

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;
extern FILE *yyin, *yyout;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};

static YY_BUFFER_STATE yy_current_buffer = 0;

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer


/* yy_hold_char holds the character lost when yytext is formed. */
static char yy_hold_char;

static int yy_n_chars;		/* number of characters read into yy_ch_buf */


int yyleng;

/* Points to current character in buffer. */
static char *yy_c_buf_p = (char *) 0;
static int yy_init = 1;		/* whether we need to initialize */
static int yy_start = 0;	/* start state number */

/* Flag which is used to allow yywrap()'s to do buffer switches
 * instead of setting up a fresh yyin.  A bit of a hack ...
 */
static int yy_did_buffer_switch_on_eof;

void yyrestart YY_PROTO(( FILE *input_file ));

void yy_switch_to_buffer YY_PROTO(( YY_BUFFER_STATE new_buffer ));
void yy_load_buffer_state YY_PROTO(( void ));
YY_BUFFER_STATE yy_create_buffer YY_PROTO(( FILE *file, int size ));
void yy_delete_buffer YY_PROTO(( YY_BUFFER_STATE b ));
void yy_init_buffer YY_PROTO(( YY_BUFFER_STATE b, FILE *file ));
void yy_flush_buffer YY_PROTO(( YY_BUFFER_STATE b ));
#define YY_FLUSH_BUFFER yy_flush_buffer( yy_current_buffer )

YY_BUFFER_STATE yy_scan_buffer YY_PROTO(( char *base, yy_size_t size ));
YY_BUFFER_STATE yy_scan_string YY_PROTO(( yyconst char *yy_str ));
YY_BUFFER_STATE yy_scan_bytes YY_PROTO(( yyconst char *bytes, int len ));

static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

typedef unsigned char YY_CHAR;
FILE *yyin = (FILE *) 0, *yyout = (FILE *) 0;
typedef int yy_state_type;
extern char *yytext;
#define yytext_ptr yytext

static yy_state_type yy_get_previous_state YY_PROTO(( void ));
static yy_state_type yy_try_NUL_trans YY_PROTO(( yy_state_type current_state ));
static int yy_get_next_buffer YY_PROTO(( void ));
static void yy_fatal_error YY_PROTO(( yyconst char msg[] ));

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 50
#define YY_END_OF_BUFFER 51
static yyconst short int yy_accept[1024] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   51,   49,   47,   48,   47,   14,
       47,   14,   14,   14,   14,   14,   14,   14,   14,   14,
       14,   49,   49,   49,   49,   49,   49,   49,   49,   23,
       49,   49,   49,   49,   21,   21,   49,   49,   49,   36,
       34,   36,   36,   49,   49,   33,   49,   49,   49,   49,
       49,   49,   49,   49,   49,   49,   17,   18,   49,   49,

       24,   49,   22,   22,   49,   49,   49,   37,   35,   37,
       37,   49,   49,   49,   49,   49,   49,   42,   41,   43,
       49,   44,   49,   46,   46,   47,   48,   47,   48,   48,
       47,   47,   47,   47,   14,   14,   14,    7,   14,   14,
       14,    6,   14,   14,   14,   14,    0,   15,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   23,   23,   23,
        0,    0,    0,    0,    0,   21,   21,    0,    0,    0,
        0,    0,    0,    0,   36,   36,   36,   15,    0,   33,
       33,   33,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,   16,    0,   24,   24,   24,    0,
       22,   22,    0,    0,    0,    0,    0,    0,    0,   37,
       37,   37,   16,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   42,   38,   39,
       40,   46,   46,   48,   48,   48,   47,    4,   14,   14,
       14,   14,    5,   14,   14,   14,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
       23,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   21,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   33,    0,    0,   25,    0,    0,

        0,    0,    0,   25,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   24,
       22,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   26,    0,    0,    0,    0,    0,
       26,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,   46,   47,   14,    9,   14,   14,
       14,   14,   14,    0,   20,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,   25,   25,    0,   25,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,   26,   26,    0,
       26,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,   47,   14,    2,    8,   14,   14,   12,   19,
        0,    0,   31,    0,    0,    0,    0,    0,   31,    0,
        0,    0,    0,   31,    0,    0,    0,   31,    0,    0,
        0,    0,    0,   31,    0,    0,    0,   45,   45,    0,
        0,    0,    0,   45,   45,    0,    0,   45,   45,    0,

        0,   45,   45,    0,    0,    0,    0,   45,   45,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,   25,
        0,   25,    0,    0,   27,    0,    0,    0,    0,    0,
       27,    0,    0,    0,    0,   27,    0,    0,    0,   27,
        0,    0,    0,    0,    0,   27,    0,    0,    0,    0,
       32,    0,    0,    0,    0,    0,   32,    0,    0,    0,
        0,   32,    0,    0,    0,   32,    0,    0,    0,    0,
        0,   32,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,   26,    0,   26,    0,    0,   28,    0,    0,    0,
        0,    0,   28,    0,    0,    0,    0,   28,    0,    0,
        0,   28,    0,    0,    0,    0,    0,   28,    0,    0,
       47,   14,   14,   14,   14,   31,   31,    0,   31,    0,
       31,   31,    0,   31,   31,    0,   31,    0,   45,   45,
       45,   45,   45,   45,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   27,   27,

        0,   27,    0,   27,   27,    0,   27,   27,    0,   27,
        0,   32,   32,    0,   32,    0,   32,   32,    0,   32,
       32,    0,   32,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   28,   28,
        0,   28,    0,   28,   28,    0,   28,   28,    0,   28,
        0,   47,   14,   10,   14,   14,    0,   31,    0,   31,
        0,   31,    0,   31,    0,   31,   45,   45,   45,   45,
       45,   45,   45,   45,   45,   45,   45,    0,    0,   29,
        0,    0,    0,    0,    0,   29,    0,    0,    0,    0,

       29,    0,    0,   29,    0,    0,    0,    0,    0,   29,
        0,    0,    0,    0,   29,    0,    0,    0,   29,    0,
        0,    0,    0,    0,   29,    0,    0,    0,    0,    0,
        0,   29,    0,    0,    0,   27,    0,   27,    0,   27,
        0,   27,    0,   27,    0,   32,    0,   32,    0,   32,
        0,   32,    0,   32,    0,    0,   30,    0,    0,    0,
        0,    0,   30,    0,    0,    0,    0,   30,    0,    0,
       30,    0,    0,    0,    0,    0,   30,    0,    0,    0,
        0,   30,    0,    0,    0,   30,    0,    0,    0,    0,
        0,   30,    0,    0,    0,    0,    0,    0,   30,    0,

        0,    0,   28,    0,   28,    0,   28,    0,   28,    0,
       28,   47,   14,   11,   14,   29,   29,    0,   29,    0,
       29,   29,    0,   29,   29,    0,   29,    0,   29,   29,
        0,   29,   29,    0,   29,    0,   29,   29,    0,   30,
       30,    0,   30,    0,   30,   30,    0,   30,   30,    0,
       30,    0,   30,   30,    0,   30,   30,    0,   30,    0,
       30,   30,    0,   47,   14,   14,    0,   29,    0,   29,
        0,   29,    0,   29,    0,   29,    0,   29,    0,   29,
        0,   29,    0,   29,    0,   30,    0,   30,    0,   30,
        0,   30,    0,   30,    0,   30,    0,   30,    0,   30,

        0,   30,   47,   14,   14,   47,    3,   14,   47,   13,
       47,   47,   47,   47,   47,    1,   47,    1,    1,    1,
        1,    1,    0
    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    4,    5,    6,    7,    5,    5,    5,    1,    5,
        5,    5,    8,    2,    8,    9,    5,   10,   11,   12,
       11,   11,   11,   11,   11,   13,   11,    5,    5,    5,
        5,    5,    5,    5,   14,   15,   15,   16,   17,   18,
        5,    5,   19,    5,    5,   20,   21,   22,   23,   24,
        5,   25,   26,   27,   28,   29,    5,   30,    5,    5,
       31,   32,   33,    5,    5,    5,   15,   15,   15,   34,

       35,   36,    5,    5,   37,    5,    5,   38,    5,   39,
       40,   41,    5,    5,   42,   43,   44,   45,    5,   46,
        5,    5,    1,    5,    1,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
        5,    5,    5,    5,    5
    } ;

static yyconst int yy_meta[47] =
    {   0,
        1,    2,    3,    2,    4,    5,    6,    4,    1,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        8,    9,    8,    7,    7,    7,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4
    } ;

static yyconst short int yy_base[1186] =
    {   0,
        0,    6,   13,    0,   58,   84,  110,    0,   58,   70,
       84,   96,  122,  128,  134,  140,  152,  158,  170,  176,
      182,  188,  194,  200,  206,  232,  258,  284,  310,  336,
      362,  388,  420,  452,  478,  504,  530,  556,   69,  217,
      218,  223,  582,  594,  924, 9853,  165,  226,  250,    0,
      257,  906,  886,  887,  874,  876,  867,  866,  835,   18,
      815,  813,  792,  768,  115,  163,  612,  263,  270,  639,
      274,  673,   43,  288,  294,  298,  321,  315,  718,    0,
     9853,  350,  758,  326,  348,  745,  353,  366,  779,  373,
      377,  813,  393,  398,  847,  733, 9853, 9853,  403,  418,

      874,  422,  430,  434,  452,  456,  908,    0, 9853,  942,
      726,  468,  462,  974,  483,  488, 1008,    0, 9853, 9853,
      386, 9853,  492,  514,  508,  526,  543,  549,  555,  569,
      575,  581,  624,  630,    0,  732,  721,    0,  704,  700,
      669,    0,  671,  638,  621,  619,  600, 9853,  553,  586,
        0,  599, 1042, 1054,   81,  628,  632,    0,  647,  655,
      679,    0, 1066, 1078,  691,  659,    0,  689,    0,  695,
     1090, 1102,  221,  701,    0,  730,  736,    0,  705,    0,
      734,  753,  760,  764,    0,  788, 1114, 1126,  333,  794,
      798,    0,  822, 1138, 1150,  403,  828,  832,    0,  856,

     1162, 1174,  435,  862, 9853,  866, 1179,  887,  882,  895,
      916,    0,  920, 1213,  925, 1247, 1259,  519,  942,    0,
     1271, 1303,    0,  929, 1335,  947, 1369, 1381,  583,  953,
      957, 1393,  983, 1427, 1439,  600,  989,    0, 9853, 9853,
     9853,  993,    0, 1020, 1024, 1028, 1191,    0,  563,  552,
      528,  519,    0,  495,  491,  472,  482,  490, 1027, 1189,
     1451, 1485, 1497,    0,    0,    0, 1509, 1193, 1543, 1197,
     1221, 1225, 1555,   44, 1600, 1612, 1624, 1636, 1648,   54,
     1237,    0, 1270, 1274, 1693, 1727, 1739,    0,    0,    0,
     1751, 1278, 1785, 1282, 1286, 1302, 1306, 1790, 1824, 1836,

        0,    0,    0,  644, 1310, 1848, 1315, 1319, 1860, 1894,
     1906,    0,    0,    0, 1918, 1343, 1952, 1348, 1352, 1964,
     1998, 2010,    0,    0,    0, 2022, 1356, 2056, 1401, 1405,
        0, 1410, 1414, 2068, 2102, 2114,    0,    0,    0, 2126,
     1459, 2160, 1464, 1468, 2165, 2199, 2211,    0,    0,    0,
      732, 1472, 2223, 1510, 1517, 2235, 2269, 2281,    0,    0,
        0, 2293, 1521, 2327,    0, 1567,  459,    0,  459,  440,
      407,  407,  414,  420, 9853, 1526, 2339, 2351,  646, 1565,
     2363, 2375, 2387, 2399, 2411, 2423, 2435, 1577, 2447, 2459,
     2471, 2483, 2518, 2552, 2564,  661, 1578, 2576, 2588, 2600,

     2612, 2624, 1582, 1530, 1654, 2636, 2648, 2660, 2694, 2706,
      743, 1660, 2718, 2730, 2742, 2754, 2766, 2778, 2812, 2824,
      744, 1669, 2836, 2848, 2860, 2872, 2884, 2896, 2930, 2942,
      768, 1675, 2954, 2966, 2978, 2990, 3002, 1709, 1679, 1701,
     3014, 3026, 3038, 3072, 3084,  777, 1751, 3096, 3108, 3120,
     3132, 3144, 1763,  414,    0,    0,  147,  382,    0, 9853,
     1762, 1705, 3149, 3183, 3195,    0,    0,    0,  778, 1766,
     3207, 3219, 3231, 3243, 3277, 1771, 1798, 3289, 3323,    0,
        0,    0,    0,  812, 1802, 3328, 1806, 1811, 1868, 3362,
     3374, 3386, 3398, 3410,   69, 1880, 3455, 3467,  201, 3512,

     1878, 3524,  202, 3569, 3581, 3593, 3605, 3617,  216, 3654,
      476,  502, 1919, 1926, 3699, 3733, 3745,    0,    0,    0,
     3757, 1930, 3791, 3803, 3815, 3827, 3861, 1935, 1939, 3873,
     3907,    0,    0,    0,    0, 3919, 1972, 3953, 1976, 1980,
     3987, 3999, 1985, 2022, 4026, 4060, 4072,    0,    0,    0,
      846, 2030, 4084, 4096, 4108, 4120, 4154, 2035, 2039, 4166,
     4200,    0,    0,    0,    0,  879, 2043, 4205, 2077, 2081,
     4232, 4266, 4278,    0,    0,    0,  963, 2085, 4290, 4302,
     4314, 4326, 4360, 2127, 2089, 4372, 4406,    0,    0,    0,
        0,  973, 2134, 4411, 2139, 2143, 4445, 4479, 4491,    0,

        0,    0, 4503, 2147, 4537, 4549, 4561, 4573, 4607, 2174,
     2178, 4619, 4653,    0,    0,    0,    0, 4665, 2182, 4699,
     2186, 2243, 4733, 4745, 2248, 2252, 4772, 4806, 4818,    0,
        0,    0, 1024, 2256, 4830, 4842, 4854, 4866, 4900, 2294,
     2301, 4912, 4946,    0,    0,    0,    0, 1025, 2305, 4951,
     2503,  370,  352,  336,  317, 2309, 2501, 2526, 4985, 4997,
     5009, 5043, 5055, 5067,  802, 2532, 5101, 5113,    0, 5125,
     5160, 5205, 2544, 5240, 5275, 5309, 5321,  811, 2668, 5333,
     5345, 5357, 5369, 5381, 5393, 5427, 5439, 5451, 2674, 5463,
     5475, 5509,  836, 2680, 5521, 5533, 5545, 5557, 2794, 2786,

     2904, 5569, 5581, 5593, 5627, 5639, 5651,  845, 2910, 5685,
     5697, 3054, 2790, 2916, 5709, 5721, 5733, 5767, 5779, 5791,
      954, 3046, 5825, 5837, 5849, 5883, 5895, 1012, 3157, 5907,
     5919, 5931, 5943, 5955, 5967, 6001, 6013, 6025, 3163, 6037,
     6049, 6083, 1162, 3169, 6095, 6107, 6119, 6131, 3259, 3050,
     3251, 6143, 6155, 6167, 6201, 6213, 6225, 1194, 3297, 6259,
     6271, 3309,  317,    0,  273,  296, 3255, 3307, 6283, 6295,
     6329, 6341, 3336, 6375, 6387, 6399,    0, 6434,  528,  540,
     6480,  600,  680, 3348, 6526,  977, 1041, 3347, 3414, 6564,
     6598, 6610,    0,    0,    0, 1210, 3418, 6622, 6634, 6646,

     6658, 3423, 3431, 6692, 6726, 6738,    0,    0,    0, 1690,
     3435, 6743, 6777, 6789, 6801, 6835, 3440, 3471, 6847, 6881,
        0,    0,    0,    0, 1857, 3475, 6886, 3479, 6920, 6932,
     6944, 6956, 3483, 6983, 3488, 3492, 7017, 7029, 7063, 7075,
     3496, 7109, 7121, 7133, 3528, 3532, 7167, 7179, 7213, 7225,
     3536, 7259, 7271, 7283, 3546, 3540, 7310, 7344, 7356,    0,
        0,    0, 1859, 3550, 7368, 7380, 7392, 7404, 3555, 3621,
     7438, 7472, 7484,    0,    0,    0, 1876, 3625, 7489, 7523,
     7535, 7547, 7581, 3630, 3638, 7593, 7627,    0,    0,    0,
        0, 2292, 3642, 7632, 3646, 7666, 7678, 7690, 7702, 3663,

     7729, 3667, 3681, 7763, 7775, 7809, 7821, 3685, 7855, 7867,
     7879, 3711,  290,    0,  275, 3715, 3711, 3757, 7913, 7925,
     7937, 7971, 7983, 7995, 1211, 3765, 8029, 8041, 8053, 8087,
     8099, 8111, 1230, 3771, 8145, 8157, 8169, 8203, 8215, 3843,
     3775, 3835,    0, 3881, 3886, 3679, 3892, 3920, 1316, 3927,
        0, 3933, 3938, 3965, 3963, 3968, 1547, 3974,    0, 4007,
     4012, 4024, 4034, 4046,  275,  255, 3839, 4047,  280, 2775,
     8227, 8232, 4128, 4132,  270, 3035, 8266, 8271, 4136, 4140,
      250, 3240, 8305, 8310, 4174, 4178, 4182, 8337, 4186, 8364,
     4213, 4217, 4221, 8391, 4225, 8418, 4240, 4244, 4248, 8445,

     4252, 8472, 4338,  213,  197, 4344,    0,  200, 4350,    0,
     4393, 4399, 4423, 4429, 4435, 4457, 4463, 4467, 4471, 4507,
     4511, 4515, 9853, 8507, 8516, 8525, 8534, 8543, 8549, 8556,
     8565, 8574, 8583, 8592, 8600, 8609, 8618, 8626,  220, 8633,
     8642, 8651, 8660,  215, 8669, 8678, 8687, 8696, 8705, 8714,
      156, 8722, 8731, 8737, 8744, 8753, 8761,  150, 8768, 8777,
     8786, 8795,  103, 8804, 8813, 8822, 8831, 8840, 8849, 8858,
     8866, 8873, 8882, 8891, 8900, 8909, 8918, 8927, 8936, 8945,
     8954, 8963, 8972, 8981, 8990, 8999, 9008, 9017, 9026, 9035,
     9044, 9050, 9057, 9066, 9075, 9084, 9092, 9099, 9108, 9117,

     9126, 9135, 9144, 9153, 9162, 9171, 9180, 9189, 9198, 9207,
     9216, 9225, 9234, 9243, 9252, 9261, 9270, 9276, 9283, 9292,
     9301,    5, 9310, 9319, 9327, 9334, 9343, 9352, 9361, 9370,
     9379, 9388, 9397, 9406, 9415, 9424, 9433, 9442, 9451, 9460,
     9469, 9478, 9487, 9496, 9505, 9514, 9523, 9532, 9538, 9545,
     9554, 9563,    4, 9571, 9578, 9587, 9596, 9605, 9614, 9623,
     9632, 9641, 9650, 9659, 9668, 9677, 9686, 9695, 9704, 9713,
     9722, 9731, 9740, 9749, 9758, 9767, 9773, 9780, 9789, 9798,
     9807, 9816, 9825, 9834, 9843
    } ;

static yyconst short int yy_def[1186] =
    {   0,
     1024, 1024, 1023,    3, 1024, 1024, 1024,    7,    7,    7,
        7,    7,    7,    7,    7,    7, 1025, 1025,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7, 1026, 1026,    7,    7,    7,    7, 1027, 1027,
     1027, 1027,    7,    7, 1023, 1023, 1023, 1023, 1028, 1029,
     1028, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023,   72, 1023, 1023, 1023, 1023, 1023, 1023, 1030,
     1023, 1031, 1030, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,

     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1032, 1023, 1033,
     1032, 1023, 1023, 1023, 1023, 1023, 1023, 1034, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1028, 1023, 1035,
     1028, 1028, 1028, 1028, 1029, 1029, 1029, 1029, 1029, 1029,
     1029, 1029, 1029, 1029, 1029, 1029, 1023, 1023, 1023, 1023,
       67,   67, 1023, 1036,  152, 1023, 1023,   70, 1023, 1023,
     1023,   73, 1023, 1037, 1038, 1023, 1039, 1023,   79,   79,
     1023, 1040,  170, 1023, 1030, 1031, 1031, 1030, 1023,   86,
     1023, 1023, 1023, 1023,   89,   89, 1023, 1041,  186, 1023,
     1023,   92,   92, 1023, 1042,  193, 1023, 1023,   95,   95,

     1023, 1043,  200, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1044, 1023, 1023,  214, 1023, 1045,  215, 1023, 1046,
     1047, 1047, 1046, 1023, 1023,  225, 1023, 1048,  226, 1023,
     1023, 1023,  232, 1023, 1049,  233, 1023, 1050, 1023, 1023,
     1023, 1023, 1051, 1052, 1052, 1052, 1053, 1054, 1054, 1054,
     1054, 1054, 1054, 1054, 1054, 1054, 1023, 1023, 1023, 1023,
     1023, 1055, 1055,  263,  263,  263,  263, 1023, 1023, 1023,
     1023, 1023, 1023,  273, 1056, 1056, 1056, 1056, 1056,  279,
     1057, 1058, 1023, 1023, 1023, 1059, 1059,  287,  287,  287,
      287, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1060, 1060,

      300,  300,  300,  300, 1023, 1023, 1023, 1023, 1023, 1061,
     1061,  311,  311,  311,  311, 1023, 1023, 1023, 1023, 1023,
     1062, 1062,  322,  322,  322,  322, 1023, 1023, 1023, 1023,
     1063, 1023, 1023, 1023, 1064, 1064,  336,  336,  336,  336,
     1023, 1023, 1023, 1023, 1023, 1065, 1065,  347,  347,  347,
      347, 1023, 1023, 1023, 1023, 1023, 1066, 1066,  358,  358,
      358,  358, 1023, 1023, 1051, 1053, 1054, 1054, 1054, 1054,
     1054, 1054, 1054, 1023, 1023,  261, 1023, 1067,  376, 1023,
     1068, 1023, 1069, 1068,  384, 1023, 1070, 1071, 1072, 1023,
     1073, 1072, 1023, 1023, 1074,  393, 1023, 1075, 1023, 1076,

     1075,  401, 1023, 1023, 1023, 1077, 1077, 1023, 1023, 1078,
      408, 1023, 1079, 1023, 1080, 1079,  416, 1023, 1023, 1081,
      418, 1023, 1082, 1023, 1083, 1082,  426, 1023, 1023, 1084,
      428, 1023, 1085, 1023, 1086, 1085,  436, 1023, 1023, 1023,
     1087, 1087, 1023, 1023, 1088,  443, 1023, 1089, 1023, 1090,
     1089,  451, 1091, 1092, 1092, 1092, 1092, 1092, 1092, 1023,
     1023, 1023, 1023, 1093, 1093,  465,  465,  465,  465, 1023,
     1023, 1094, 1094,  473, 1095, 1023, 1023, 1023, 1095,  479,
      479,  479,  479,  479,  473,  474, 1023, 1023, 1023, 1096,
     1096, 1096, 1096, 1096,  494, 1097, 1098, 1098,  498, 1099,

     1023, 1023,  502, 1099, 1099, 1099, 1099, 1099,  508,  498,
      510,  510, 1023, 1023, 1023, 1100, 1100,  517,  517,  517,
      517, 1023, 1023, 1101, 1101,  525, 1102, 1023, 1023, 1023,
     1102,  531,  531,  531,  531,  531,  525,  525, 1023, 1023,
     1103, 1103, 1023, 1023, 1023, 1104, 1104,  547,  547,  547,
      547, 1023, 1023, 1105, 1105,  555, 1106, 1023, 1023, 1023,
     1106,  561,  561,  561,  561,  561,  555,  556, 1023, 1023,
     1023, 1107, 1107,  573,  573,  573,  573, 1023, 1023, 1108,
     1108,  581, 1109, 1023, 1023, 1023, 1109,  587,  587,  587,
      587,  587,  581,  582, 1023, 1023, 1023, 1110, 1110,  599,

      599,  599,  599, 1023, 1023, 1111, 1111,  607, 1112, 1023,
     1023, 1023, 1112,  613,  613,  613,  613,  613,  607,  607,
     1023, 1023, 1113, 1113, 1023, 1023, 1023, 1114, 1114,  629,
      629,  629,  629, 1023, 1023, 1115, 1115,  637, 1116, 1023,
     1023, 1023, 1116,  643,  643,  643,  643,  643,  637,  638,
     1117, 1118, 1118, 1118, 1118, 1023, 1023, 1023, 1119, 1119,
     1120, 1120,  662, 1023,  664, 1023, 1121, 1121, 1122, 1123,
     1124, 1124, 1125, 1126, 1023, 1023, 1127,  675, 1023, 1128,
     1023, 1129, 1128,  683, 1130, 1130, 1023, 1131,  686,  686,
     1023, 1129,  691, 1023, 1132, 1131, 1132,  697, 1023, 1023,

     1023, 1133, 1133, 1134, 1134,  705, 1023,  707, 1023, 1135,
     1135, 1023, 1023, 1023, 1136, 1136, 1137, 1137,  718, 1023,
      720, 1023, 1138, 1138, 1023, 1023, 1139,  725, 1023, 1140,
     1023, 1141, 1140,  733, 1142, 1142, 1023, 1143,  736,  736,
     1023, 1141,  741, 1023, 1144, 1143, 1144,  747, 1023, 1023,
     1023, 1145, 1145, 1146, 1146,  755, 1023,  757, 1023, 1147,
     1147, 1148, 1149, 1149, 1149, 1149, 1023, 1023, 1150, 1150,
     1151, 1151, 1023, 1023, 1152, 1152, 1153, 1023,  778,  778,
     1023,  781,  781, 1154, 1023,  785,  785, 1023, 1023, 1023,
     1155, 1155,  792,  792,  792,  792, 1023, 1023, 1156, 1156,

      800, 1023, 1023, 1023, 1157, 1157,  806,  806,  806,  806,
      800,  801, 1158, 1158,  814, 1159, 1023, 1023, 1023, 1159,
      820,  820,  820,  820,  820,  814,  815, 1023, 1023, 1160,
     1160,  831,  831,  832, 1023, 1023, 1161, 1161, 1162, 1162,
     1023, 1023, 1163, 1163, 1023, 1023, 1164, 1164, 1165, 1165,
     1023, 1023, 1166, 1166, 1023, 1023, 1023, 1167, 1167,  859,
      859,  859,  859, 1023, 1023, 1168, 1168,  867, 1023, 1023,
     1023, 1169, 1169,  873,  873,  873,  873,  867,  868, 1170,
     1170,  881, 1171, 1023, 1023, 1023, 1171,  887,  887,  887,
      887,  887,  881,  882, 1023, 1023, 1172, 1172,  898,  898,

      899, 1023, 1023, 1173, 1173, 1174, 1174, 1023, 1023, 1175,
     1175, 1176, 1177, 1177, 1177, 1023, 1023, 1023, 1178, 1178,
     1179, 1179,  922, 1023,  924, 1023, 1180, 1180, 1181, 1181,
      930, 1023,  932, 1023, 1182, 1182, 1183, 1183,  938, 1023,
     1023, 1023,  859,  859,  868,  867,  867,  871,  948, 1023,
      873,  873,  882,  881,  881,  886,  956, 1023,  887,  887,
      899,  898,  898, 1176, 1177, 1177, 1023, 1023,  920,  920,
      922,  922, 1023,  925,  928,  928,  930,  930, 1023,  933,
      936,  936,  938,  938, 1023, 1023,  859,  859,  867,  868,
     1023,  949,  873,  873,  881,  882, 1023,  957,  887,  887,

      898,  899, 1176, 1177, 1177, 1176, 1177, 1177, 1176, 1177,
     1176, 1176, 1184, 1184, 1184, 1023, 1184, 1023, 1185, 1185,
     1185, 1185,    0, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,

     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023
    } ;

static yyconst short int yy_nxt[9900] =
    {   0,
     1023,   47,   48,   47, 1023, 1023,   49,   47,   48,   47,
      777,  777,   49,   46,   47,   48,   47,   50,   46,   51,
       46,   46,   46,   46,   46,   46,   50,   50,   52,   53,
       50,   54,   50,   50,   55,   50,   56,   57,   50,   58,
       59,   50,   50,   46,   46,   46,   50,   60,   61,   50,
       50,   50,   50,   50,   50,   50,   50,   50,   50,   47,
       48,   47,  144,  145,   51,   68,   69,   70,   70,   70,
       70,  119, 1023, 1023,  120,   62,   63,   68,   69,   70,
       70,   70,   70,  275,   64,   47,   48,   47, 1023, 1023,
       51,   71,   46,   72,   73,   73,   73, 1023,  490,  275,

      121,   62,   63,   71,   46,   72,   73,   73,   73,  331,
       64,   47,   48,   47,  490, 1023,   51,   65,   66,   67,
       67,   67,   67,  150,  151,  151,  151,  151,   63,   74,
       46,   75,   76,   76,   76,   74,   46,   75,   76,   76,
       76,   77,   78,   79,   79,   79,   79,   77,   78,   79,
       79,   79,   79,   47,   48,   47,  282,   81,   82,   47,
       48,   47,  365,   81,   82,  653,  126,  127,  126,  654,
       83,  128,  152,  152,  152,  152,   83,   84,   85,   86,
       86,   86,   86,   84,   85,   86,   86,   86,   86,   87,
       88,   89,   89,   89,   89,   87,   88,   89,   89,   89,

       89,   90,   91,   92,   92,   92,   92,   90,   91,   92,
       92,   92,   92,   93,   94,   95,   95,   95,   95,  119,
      119,  331,  120,  122,   96,  119,  282,  129,  122,  129,
      275, 1023,  130, 1010, 1008, 1007,   97, 1023,   98,   93,
       94,   95,   95,   95,   95,  504,  275, 1023,  121,  121,
       96,  132,  127,  132,  121, 1023,  133,  823,  132,  127,
      132,  504,   97,  133,   98,   99,  100,  101,  101,  101,
      101,  157,  158,  158,  158,  158,   96,  808,  134,  159,
      159,  159,  159,  162,  162,  162,  162,  794,   97, 1005,
       98,   99,  100,  101,  101,  101,  101,  166,  166,  166,

      166, 1004,   96,  166,  166,  166,  166,  166,  166,  166,
      166,  966,  965,  915,   97,  914,   98,  102,   46,  103,
      104,  104,  104,  167,  170,  170,  170,  170,   96,  168,
      169,  169,  169,  169,  179,  180,  180,  180,  180,  167,
       97,  913,   98,  102,   46,  103,  104,  104,  104, 1023,
      766,  132,  127,  132,   96,  131,  177,  181,  181,  181,
      181,  184,  185,  185,  185,  185,   97, 1023,   98,  105,
      106,  107,  107,  107,  107,  186,  186,  186,  186,  765,
       96,  191,  192,  192,  192,  192,  193,  193,  193,  193,
      764,  239,   97,  763,   98,  105,  106,  107,  107,  107,

      107,  198,  199,  199,  199,  199,   96,  200,  200,  200,
      200,  206,  207,  207,  207,  207,  655,  240,   97, 1023,
       98,   47,   48,   47,  241,  109,  110,  208,  208,  208,
      208,  211,  211,  211,  211,  652,  460, 1023,  111,  211,
      211,  211,  211,  211,  211,  211,  211,  459,  458,  457,
       97, 1023,   98,   47,   48,   47,  456,  109,  110,  212,
      213,  214,  214,  214,  214,  215,  215,  215,  215, 1023,
      111,  226,  226,  226,  226,  212,  224,  225,  225,  225,
      225,  455,   97,  454,   98,  112,  113,  114,  114,  114,
      114,  231,  232,  232,  232,  232,   96,  233,  233,  233,

      233,  242,  242,  242,  242,  275,  375,  374,   97,  373,
       98,  112,  113,  114,  114,  114,  114,  242,  242,  242,
      242,  275,   96,  242,  242,  242,  242,  126,  127,  126,
      372,  275,  128,  371,   97, 1023,   98,  115,  116,  117,
      117,  117,  117,  243,  129,  370,  129,  275,   96,  130,
      132,  127,  132, 1023,  369,  133,  129,  490,  129,  243,
       97,  130,   98,  115,  116,  117,  117,  117,  117,  490,
      245,  368,  245,  490,   96,  246,  132,  127,  132,  367,
      258,  133,  132,  127,  132,  490,   97,  133,   98,  123,
       46,  124,  125,  125,  125,  152,  152,  152,  152, 1023,

       46,  123,   46,  124,  125,  125,  125, 1023,  152,  152,
      152,  152,   46,  153,  153,  153, 1023, 1023,  154,  257,
      155,  151,  151,  151,  151,  132,  127,  132,  156,  275,
      133,  132,  127,  132, 1023,  268,  133,  269,  269,  269,
      269,  159,  159,  159,  159,  275,  156,  160,  158,  158,
      158,  158,  406,  256,  247,  161,  159,  159,  159,  159,
      407,  255, 1023,  161,  159,  159,  159,  159,  166,  166,
      166,  166,  254,  161,  163,  163,  163, 1023,  407,  164,
     1023,  161,  162,  162,  162,  162,  270,  253,  271,  271,
      271,  271,  163,  163,  163, 1023,  252,  164,  170,  170,

      170,  170,  165, 1023,  170,  170,  170,  170,  292,  275,
      293,  293,  293,  293,  181,  181,  181,  181,  165,  171,
      171,  171,  251,  250,  172,  275,  173,  169,  169,  169,
      169,  132,  127,  132,  174,  131,  177,  132,  127,  132,
      441,  131,  177,  181,  181,  181,  181,  249,  442,  248,
      183,  223,  174,  182,  180,  180,  180,  180,  205, 1023,
     1023,  183,  181,  181,  181,  181,  442,  294,  183,  295,
      295,  295,  295,  186,  186,  186,  186, 1023, 1023,  183,
      187,  187,  187,  178, 1023,  188,  659,  189,  185,  185,
      185,  185,  149, 1023,  660,  190, 1023,  186,  186,  186,

      186,  305, 1023,  306,  306,  306,  306,  193,  193,  193,
      193, 1023,  660,  190,  194,  194,  194,  148, 1023,  195,
      667,  196,  192,  192,  192,  192,  147, 1023,  668,  197,
     1023,  193,  193,  193,  193,  316, 1023,  317,  317,  317,
      317,  200,  200,  200,  200, 1023,  668,  197,  201,  201,
      201,  146, 1023,  202,  702,  203,  199,  199,  199,  199,
      143, 1023,  703,  204, 1023,  200,  200,  200,  200,  327,
     1023,  328,  328,  328,  328,  208,  208,  208,  208, 1023,
      703,  204,  209,  207,  207,  207,  207,  710,  142,  141,
      210,  208,  208,  208,  208,  711,  208,  208,  208,  208,

      140,  139,  329,  210,  330,  330,  330,  330,  210,  216,
      216,  216,  138,  711,  217,  137,  218,  214,  214,  214,
      214,  210,  136, 1023,  219,  211,  211,  211,  211,  215,
      215,  215,  215, 1023,  215,  215,  215,  215,  226,  226,
      226,  226,  219,  132,  127,  132, 1023,  131,  222,  341,
     1023,  342,  342,  342,  342, 1023,  226,  226,  226,  226,
      352, 1023,  353,  353,  353,  353,  233,  233,  233,  233,
     1023,  715,  131, 1023,  131,  227,  227,  227, 1023,  716,
      228,  723,  229,  225,  225,  225,  225, 1023, 1023,  724,
      230, 1023,  233,  233,  233,  233,  363,  716,  364,  364,

      364,  364,  242,  242,  242,  242,  504,  724,  230,  234,
      234,  234, 1023, 1023,  235, 1023,  236,  232,  232,  232,
      232,  245,  504,  245,  237,  245,  246,  245, 1023,  245,
      246,  245,  752,  760,  246,  260,  261,  261,  261,  261,
      753,  761,  237,  153,  153,  153, 1023, 1023,  154,  259,
      260,  261,  261,  261,  261,  263,  153,  263,  753,  761,
      264,  265,  266,  267,  267,  267,  267,  163,  163,  163,
      504, 1023,  164,  272, 1023,  273,  274,  274,  274,  276,
      163,  276, 1023, 1023,  277,  278,  504,  279,  280,  280,
      280,  171,  171,  171, 1023, 1023,  172,  283,  284,  285,

      285,  285,  285,  287,  171,  287, 1023, 1023,  288,  289,
      290,  291,  291,  291,  291,  187,  187,  187, 1023, 1023,
      188,  296,  297,  298,  298,  298,  298,  300,  187,  300,
     1023, 1023,  301,  302,  303,  304,  304,  304,  304,  194,
      194,  194, 1023, 1023,  195,  307,  308,  309,  309,  309,
      309,  311,  194,  311, 1023, 1023,  312,  313,  314,  315,
      315,  315,  315,  201,  201,  201, 1023, 1023,  202,  318,
      319,  320,  320,  320,  320,  322,  201,  322, 1023, 1023,
      323,  324,  325,  326,  326,  326,  326,  209,  207,  207,
      207,  207,  132,  127,  132,  210, 1023,  133,  376,  376,

      376,  376,  269,  269,  269,  269,  271,  271,  271,  271,
     1023,  366, 1023,  210,  216,  216,  216, 1023,  919,  217,
     1023,  218,  214,  214,  214,  214,  920, 1023, 1023,  219,
      271,  271,  271,  271,  274,  274,  274,  274,  163,  163,
      163, 1023, 1023,  164,  920, 1023, 1023,  219,  216,  216,
      216, 1023, 1023,  217,  332,  333,  334,  334,  334,  334,
      336,  216,  336, 1023, 1023,  337,  338,  339,  340,  340,
      340,  340,  132,  127,  132, 1023,  131,  222,  284,  285,
      285,  285,  285,  393,  393,  393,  393,  293,  293,  293,
      293,  295,  295,  295,  295,  295,  295,  295,  295, 1023,

     1023,  131, 1023,  131,  132,  127,  132, 1023,  131,  222,
      297,  298,  298,  298,  298,  403,  403,  403,  403,  306,
      306,  306,  306,  308,  309,  309,  309,  309,  408,  408,
      408,  408, 1023,  131, 1023,  131,  227,  227,  227, 1023,
     1023,  228, 1023,  229,  225,  225,  225,  225, 1023, 1023,
     1023,  230,  317,  317,  317,  317,  319,  320,  320,  320,
      320,  418,  418,  418,  418,  328,  328,  328,  328,  230,
      227,  227,  227, 1023, 1023,  228,  343,  344,  345,  345,
      345,  345,  347,  227,  347, 1023, 1023,  348,  349,  350,
      351,  351,  351,  351,  234,  234,  234, 1023, 1023,  235,

     1023,  236,  232,  232,  232,  232, 1023, 1023, 1023,  237,
      330,  330,  330,  330,  330,  330,  330,  330,  333,  334,
      334,  334,  334,  428,  428,  428,  428,  237,  234,  234,
      234, 1023, 1023,  235,  354,  355,  356,  356,  356,  356,
      358,  234,  358, 1023, 1023,  359,  360,  361,  362,  362,
      362,  362,  377,  377,  377, 1023, 1023,  378, 1023,  379,
      261,  261,  261,  261, 1023, 1023, 1023,  380,  342,  342,
      342,  342,  344,  345,  345,  345,  345,  438,  438,  438,
      438,  353,  353,  353,  353,  380,  263,  153,  263, 1023,
     1023,  264,  265,  266,  267,  267,  267,  267,  263,  153,

      263, 1023, 1023,  264,  265,  266,  267,  267,  267,  267,
      381,  382,  381, 1023, 1023,  383, 1023,  384,  355,  356,
      356,  356,  356, 1023, 1023,  385,  443,  443,  443,  443,
      364,  364,  364,  364, 1023,  376,  376,  376,  376,  403,
      403,  403,  403,  385,  153,  153,  153, 1023, 1023,  154,
     1023, 1023,  269,  269,  269,  269,  386,  386,  386, 1023,
     1023,  387, 1023, 1023,  274,  274,  274,  274,  132,  127,
      132, 1023,  470,  133,  471,  471,  471,  471,  386,  386,
      386, 1023, 1023,  387,  388,  522,  453,  523,  523,  523,
      523,  403,  403,  403,  403, 1023, 1023, 1023,  405, 1023,

      388,  276,  163,  276, 1023, 1023,  277,  278, 1023,  279,
      280,  280,  280,  276,  163,  276,  405, 1023,  277,  278,
     1023,  279,  280,  280,  280,  276,  163,  276, 1023, 1023,
      277,  278, 1023,  279,  280,  280,  280,  276,  163,  276,
     1023, 1023,  277,  278, 1023,  279,  280,  280,  280,  389,
      390,  389, 1023, 1023,  391,  278, 1023,  279,  280,  280,
      280,  539, 1023,  540,  540,  540,  540,  552, 1023,  553,
      553,  553,  553, 1023, 1023, 1023,  578,  392,  579,  579,
      579,  579,  604, 1023,  605,  605,  605,  605,  438,  438,
      438,  438, 1023,  392,  394,  394,  394, 1023,  927,  395,

     1023,  396,  285,  285,  285,  285,  928, 1023,  621,  397,
      622,  622,  622,  622,  656,  656,  656,  656,  438,  438,
      438,  438, 1023, 1023,  928,  440, 1023,  397,  287,  171,
      287, 1023, 1023,  288,  289,  290,  291,  291,  291,  291,
      287,  171,  287,  440, 1023,  288,  289,  290,  291,  291,
      291,  291,  398,  399,  398, 1023, 1023,  400,  634,  401,
      635,  635,  635,  635,  132,  127,  651,  402, 1023,  133,
      462,  463,  463,  463,  463,  471,  471,  471,  471,  477,
      478,  478,  478,  478, 1023,  402,  171,  171,  171, 1023,
     1023,  172, 1023, 1023,  293,  293,  293,  293,  404,  298,

      298,  298,  298, 1023, 1023, 1023,  405,  664,  664,  664,
      664,  486,  486,  486,  486,  489,  489,  489,  489, 1023,
      489,  489,  489,  489,  405,  300,  187,  300, 1023, 1023,
      301,  302,  303,  304,  304,  304,  304,  300,  187,  300,
      669, 1023,  301,  302,  303,  304,  304,  304,  304,  187,
      187,  187, 1023, 1023,  188, 1023,  669,  306,  306,  306,
      306,  409,  409,  409, 1023,  935,  410,  943,  411,  309,
      309,  309,  309,  936, 1023,  944,  412,  489,  489,  489,
      489,  386,  386,  386,  951, 1023,  387,  503,  503,  503,
      503,  936,  952,  944,  412,  311,  194,  311, 1023, 1023,

      312,  313,  314,  315,  315,  315,  315,  311,  194,  311,
      952, 1023,  312,  313,  314,  315,  315,  315,  315,  413,
      414,  413, 1023, 1023,  415, 1023,  416,  514,  515,  515,
      515,  515, 1023, 1023,  417,  675,  675,  675,  675,  523,
      523,  523,  523,  529,  530,  530,  530,  530,  691,  691,
      691,  691,  417,  194,  194,  194, 1023, 1023,  195, 1023,
     1023,  317,  317,  317,  317,  419,  419,  419, 1023, 1023,
      420, 1023,  421,  320,  320,  320,  320, 1023, 1023, 1023,
      422,  538,  538,  538,  538,  540,  540,  540,  540,  540,
      540,  540,  540,  544,  545,  545,  545,  545,  422,  322,

      201,  322, 1023, 1023,  323,  324,  325,  326,  326,  326,
      326,  322,  201,  322, 1023, 1023,  323,  324,  325,  326,
      326,  326,  326,  423,  424,  423, 1023, 1023,  425, 1023,
      426,  699,  699,  699,  699, 1023, 1023, 1023,  427,  553,
      553,  553,  553,  559,  560,  560,  560,  560,  707,  707,
      707,  707,  568,  568,  568,  568,  427,  201,  201,  201,
     1023, 1023,  202, 1023, 1023,  328,  328,  328,  328,  429,
      429,  429, 1023, 1023,  430, 1023,  431,  334,  334,  334,
      334, 1023, 1023, 1023,  432,  570,  571,  571,  571,  571,
      712,  712,  712,  712,  579,  579,  579,  579,  720,  720,

      720,  720,  432,  336,  216,  336, 1023, 1023,  337,  338,
      339,  340,  340,  340,  340,  336,  216,  336, 1023, 1023,
      337,  338,  339,  340,  340,  340,  340,  433,  434,  433,
     1023, 1023,  435, 1023,  436,  585,  586,  586,  586,  586,
     1023, 1023,  437,  594,  594,  594,  594,  596,  597,  597,
      597,  597,  725,  725,  725,  725,  605,  605,  605,  605,
      437,  216,  216,  216, 1023, 1023,  217, 1023, 1023,  342,
      342,  342,  342,  439,  345,  345,  345,  345, 1023, 1023,
     1023,  440,  611,  612,  612,  612,  612,  741,  741,  741,
      741,  620,  620,  620,  620,  622,  622,  622,  622,  440,

      347,  227,  347, 1023, 1023,  348,  349,  350,  351,  351,
      351,  351,  347,  227,  347, 1023, 1023,  348,  349,  350,
      351,  351,  351,  351,  227,  227,  227, 1023, 1023,  228,
     1023, 1023,  353,  353,  353,  353,  444,  444,  444, 1023,
     1023,  445, 1023,  446,  356,  356,  356,  356, 1023, 1023,
     1023,  447,  622,  622,  622,  622,  626,  627,  627,  627,
      627,  749,  749,  749,  749,  635,  635,  635,  635,  447,
      358,  234,  358, 1023, 1023,  359,  360,  361,  362,  362,
      362,  362,  358,  234,  358, 1023, 1023,  359,  360,  361,
      362,  362,  362,  362,  448,  449,  448, 1023, 1023,  450,

      959,  451,  641,  642,  642,  642,  642, 1023,  960,  452,
      757,  757,  757,  757,  650,  650,  650,  650,  656,  656,
      656,  656, 1023, 1023, 1023,  658,  960,  452,  234,  234,
      234, 1023, 1023,  235, 1023, 1023,  364,  364,  364,  364,
      377,  377,  377,  658, 1023,  378,  461,  462,  463,  463,
      463,  463,  465,  377,  465, 1023, 1023,  466,  467,  468,
      469,  469,  469,  469,  381,  382,  381, 1023, 1023,  383,
      472,  473,  474,  474,  474,  474,  382,  382,  382, 1023,
     1023,  475,  476,  477,  478,  478,  478,  478,  480,  382,
      480, 1023, 1023,  481,  482,  483,  484,  484,  484,  484,

      381,  382,  381, 1023, 1023,  383,  265,  266,  267,  267,
      267,  267,  263,  153,  263, 1023, 1023,  264,  485, 1023,
      486,  486,  486,  486,  386,  386,  386, 1023, 1023,  387,
      487, 1023,  488,  489,  489,  489,  491,  386,  491, 1023,
     1023,  492,  493, 1023,  494,  495,  495,  495,  389,  390,
      389, 1023, 1023,  391,  497, 1023,  498,  499,  499,  499,
      390,  390,  390, 1023, 1023,  500,  501, 1023,  502,  503,
      503,  503,  505,  390,  505, 1023, 1023,  506,  507, 1023,
      508,  509,  509,  509,  389,  390,  389, 1023, 1023,  391,
      278, 1023,  510,  511,  511,  511,  512,  512,  512,  512,

      512, 1023, 1023, 1023,  132,  127,  132, 1023, 1023,  133,
      656,  656,  656,  656, 1023, 1023,  512,  512,  512,  394,
      394,  394, 1023, 1023,  395, 1023, 1023,  393,  393,  393,
      393,  762, 1023,  767,  397,  768,  768,  768,  768,  773,
     1023,  774,  774,  774,  774,  386,  386,  386, 1023, 1023,
      387, 1023,  397,  394,  394,  394, 1023, 1023,  395,  513,
      514,  515,  515,  515,  515,  517,  394,  517, 1023, 1023,
      518,  519,  520,  521,  521,  521,  521,  398,  399,  398,
     1023, 1023,  400,  524,  525,  526,  526,  526,  526,  399,
      399,  399, 1023, 1023,  527,  528,  529,  530,  530,  530,

      530,  532,  399,  532, 1023, 1023,  533,  534,  535,  536,
      536,  536,  536,  398,  399,  398, 1023, 1023,  400,  289,
      290,  291,  291,  291,  291,  287,  171,  287, 1023, 1023,
      288,  537, 1023,  538,  538,  538,  538,  300,  187,  300,
     1023, 1023,  301,  302,  303,  304,  304,  304,  304,  300,
      187,  300, 1023, 1023,  301,  541,  303,  542,  542,  542,
      542,  409,  409,  409, 1023, 1023,  410, 1023, 1023,  408,
      408,  408,  408, 1023, 1023,  797,  412,  798,  798,  798,
      798,  289,  290,  685,  685,  685,  685,  828, 1023,  829,
      829,  829,  829, 1023,  412,  409,  409,  409, 1023, 1023,

      410,  543,  544,  545,  545,  545,  545,  547,  409,  547,
     1023, 1023,  548,  549,  550,  551,  551,  551,  551,  413,
      414,  413, 1023, 1023,  415,  554,  555,  556,  556,  556,
      556,  414,  414,  414, 1023, 1023,  557,  558,  559,  560,
      560,  560,  560,  562,  414,  562, 1023, 1023,  563,  564,
      565,  566,  566,  566,  566,  413,  414,  413, 1023, 1023,
      415,  313,  314,  315,  315,  315,  315,  311,  194,  311,
     1023, 1023,  312,  567, 1023,  568,  568,  568,  568,  419,
      419,  419,  794,  919,  420, 1023, 1023,  418,  418,  418,
      418,  920, 1023, 1023,  422,  699,  699,  699,  699,  712,

      712,  712,  712,  699,  699,  699,  699, 1023, 1023,  920,
      701, 1023,  422,  419,  419,  419, 1023, 1023,  420,  569,
      570,  571,  571,  571,  571,  573,  419,  573,  701, 1023,
      574,  575,  576,  577,  577,  577,  577,  423,  424,  423,
     1023, 1023,  425,  580,  581,  582,  582,  582,  582,  424,
      424,  424, 1023, 1023,  583,  584,  585,  586,  586,  586,
      586,  588,  424,  588, 1023, 1023,  589,  590,  591,  592,
      592,  592,  592,  423,  424,  423, 1023, 1023,  425,  324,
      325,  326,  326,  326,  326,  322,  201,  322, 1023, 1023,
      323,  593, 1023,  594,  594,  594,  594,  429,  429,  429,

     1023, 1023,  430, 1023, 1023,  428,  428,  428,  428, 1023,
     1023,  835,  432,  836,  836,  836,  836,  841, 1023,  842,
      842,  842,  842,  845, 1023,  846,  846,  846,  846, 1023,
      432,  429,  429,  429, 1023, 1023,  430,  595,  596,  597,
      597,  597,  597,  599,  429,  599, 1023, 1023,  600,  601,
      602,  603,  603,  603,  603,  433,  434,  433, 1023, 1023,
      435,  606,  607,  608,  608,  608,  608,  434,  434,  434,
     1023, 1023,  609,  610,  611,  612,  612,  612,  612,  614,
      434,  614, 1023, 1023,  615,  616,  617,  618,  618,  618,
      618,  433,  434,  433, 1023, 1023,  435,  338,  339,  340,

      340,  340,  340,  336,  216,  336, 1023, 1023,  337,  619,
     1023,  620,  620,  620,  620,  347,  227,  347, 1023, 1023,
      348,  349,  350,  351,  351,  351,  351,  347,  227,  347,
     1023, 1023,  348,  623,  350,  624,  624,  624,  624,  444,
      444,  444,  808,  927,  445, 1023, 1023,  443,  443,  443,
      443,  928, 1023,  851,  447,  852,  852,  852,  852,  749,
      749,  749,  749,  712,  712,  712,  712, 1023, 1023,  928,
      714, 1023,  447,  444,  444,  444, 1023, 1023,  445,  625,
      626,  627,  627,  627,  627,  629,  444,  629,  714, 1023,
      630,  631,  632,  633,  633,  633,  633,  448,  449,  448,

     1023, 1023,  450,  636,  637,  638,  638,  638,  638,  449,
      449,  449, 1023, 1023,  639,  640,  641,  642,  642,  642,
      642,  644,  449,  644, 1023, 1023,  645,  646,  647,  648,
      648,  648,  648,  448,  449,  448, 1023, 1023,  450,  360,
      361,  362,  362,  362,  362,  358,  234,  358, 1023, 1023,
      359,  649, 1023,  650,  650,  650,  650,  657,  463,  463,
      463,  463, 1023, 1023,  864,  658,  865,  865,  865,  865,
      338,  339,  735,  735,  735,  735,  895, 1023,  896,  896,
      896,  896, 1023,  658,  465,  377,  465, 1023, 1023,  466,
      467,  468,  469,  469,  469,  469,  465,  377,  465, 1023,

     1023,  466,  467,  468,  469,  469,  469,  469,  377,  377,
      377, 1023, 1023,  378, 1023, 1023,  471,  471,  471,  471,
      263,  153,  263, 1023, 1023,  264,  265,  473,  474,  474,
      474,  474,  263,  153,  263, 1023, 1023,  264,  265,  266,
      661,  661,  661,  661,  381,  382,  381,  823,  935,  383,
     1023,  662,  474,  474,  474,  474,  936, 1023,  902,  663,
      903,  903,  903,  903,  768,  768,  768,  768,  749,  749,
      749,  749, 1023, 1023,  936,  751, 1023,  663,  480,  382,
      480, 1023, 1023,  481,  482,  483,  484,  484,  484,  484,
      377,  377,  377,  751, 1023,  378, 1023,  665,  478,  478,

      478,  478, 1023, 1023,  908,  666,  909,  909,  909,  909,
      132,  127,  132, 1023, 1023,  133,  768,  768,  768,  768,
      912, 1023, 1023,  666,  480,  382,  480, 1023, 1023,  481,
      482,  483,  484,  484,  484,  484,  384,  486,  486,  486,
      486, 1023, 1023, 1023,  385,  774,  774,  774,  774,  386,
      386,  386, 1023, 1023,  387,  789,  790,  790,  790,  790,
     1023, 1023,  385,  491,  386,  491, 1023, 1023,  492,  493,
     1023,  494,  495,  495,  495,  491,  386,  491, 1023, 1023,
      492,  493, 1023,  494,  495,  495,  495,  491,  386,  491,
     1023, 1023,  492,  493, 1023,  494,  495,  495,  495,  491,

      386,  491, 1023, 1023,  492,  493, 1023,  494,  495,  495,
      495,  491,  386,  491, 1023, 1023,  492,  493, 1023,  494,
      495,  495,  495,  916,  916,  916,  916,  798,  798,  798,
      798,  803,  804,  804,  804,  804, 1023, 1023, 1023,  670,
      924,  924,  924,  924,  812,  812,  812,  812,  818,  819,
      819,  819,  819, 1023, 1023,  670,  276,  163,  276, 1023,
     1023,  277,  278, 1023,  671,  499,  499,  499,  389,  390,
      389, 1023, 1023,  391,  278, 1023,  671,  499,  499,  499,
      932,  932,  932,  932,  827,  827,  827,  827,  829,  829,
      829,  829,  834,  834,  834,  834,  672,  836,  836,  836,

      836,  836,  836,  836,  836,  842,  842,  842,  842, 1023,
     1023, 1023,  672,  505,  390,  505, 1023, 1023,  506,  507,
     1023,  508,  509,  509,  509,  386,  386,  386, 1023, 1023,
      387, 1023, 1023,  503,  503,  503,  503,  846,  846,  846,
      846,  846,  846,  846,  846,  852,  852,  852,  852,  940,
      940,  940,  940,  673,  856,  857,  857,  857,  857,  865,
      865,  865,  865,  870,  871,  871,  871,  871, 1023,  673,
      505,  390,  505, 1023, 1023,  506,  507, 1023,  508,  509,
      509,  509,  505,  390,  505, 1023, 1023,  506,  507, 1023,
      508,  509,  509,  509,  505,  390,  505, 1023, 1023,  506,

      507, 1023,  508,  509,  509,  509,  505,  390,  505, 1023,
     1023,  506,  507, 1023,  508,  509,  509,  509,  505,  390,
      505, 1023, 1023,  506,  507, 1023,  508,  509,  509,  509,
      948,  948,  948,  948,  879,  879,  879,  879,  885,  886,
      886,  886,  886, 1023, 1023, 1023,  674,  956,  956,  956,
      956,  894,  894,  894,  894,  896,  896,  896,  896, 1023,
     1023, 1023,  674,  510,  511,  511,  511,  512,  512,  512,
      512,  512,  901,  901,  901,  901,  903,  903,  903,  903,
      730,  731,  730,  392, 1023,  732, 1023,  512,  512,  512,
      903,  903,  903,  903,  909,  909,  909,  909, 1023,  392,

      676,  676,  676, 1023, 1023,  677, 1023,  678,  515,  515,
      515,  515,  132,  127,  132,  679, 1023,  133, 1023,  964,
      916,  916,  916,  916,  916,  916,  916,  916, 1023, 1023,
     1023,  918, 1023,  679,  517,  394,  517, 1023, 1023,  518,
      519,  520,  521,  521,  521,  521,  517,  394,  517,  918,
     1023,  518,  519,  520,  521,  521,  521,  521,  680,  681,
      680, 1023, 1023,  682,  967,  683,  968,  968,  968,  968,
     1023, 1023,  973,  684,  974,  974,  974,  974,  979, 1023,
      980,  980,  980,  980,  940,  940,  940,  940, 1023, 1023,
     1023,  684,  394,  394,  394, 1023, 1023,  395, 1023, 1023,

      523,  523,  523,  523,  287,  171,  287, 1023, 1023,  288,
      289,  525,  526,  526,  526,  526,  287,  171,  287, 1023,
     1023,  288,  289,  290,  685,  685,  685,  685,  686,  687,
      686, 1023, 1023,  688, 1023,  689,  526,  526,  526,  526,
     1023, 1023,  985,  690,  986,  986,  986,  986,  968,  968,
      968,  968,  940,  940,  940,  940, 1023, 1023, 1023,  942,
     1023,  690,  532,  399,  532, 1023, 1023,  533,  534,  535,
      536,  536,  536,  536,  681,  681,  681,  942, 1023,  692,
     1023,  693,  530,  530,  530,  530, 1023, 1023,  987,  694,
      988,  988,  988,  988,  733,  945,  945,  945,  945,  989,

     1023,  990,  990,  990,  990, 1023, 1023,  694,  532,  399,
      532, 1023, 1023,  533,  534,  535,  536,  536,  536,  536,
      695,  687,  695, 1023, 1023,  696, 1023,  697, 1023,  948,
      948,  948,  948, 1023,  991,  698,  992,  992,  992,  992,
      993, 1023,  994,  994,  994,  994,  436,  953,  953,  953,
      953, 1023, 1023,  698,  398,  399,  398, 1023, 1023,  400,
     1023,  401,  538,  538,  538,  538,  736,  737,  736,  402,
      995,  738,  996,  996,  996,  996, 1023,  956,  956,  956,
      956,  997, 1023,  998,  998,  998,  998,  402,  300,  187,
      300, 1023, 1023,  301,  302,  303,  542,  542,  542,  542,

      300,  187,  300, 1023, 1023,  301,  302,  406,  542,  542,
      542,  542, 1023, 1023,  999,  407, 1000, 1000, 1000, 1000,
      747,  961,  961,  961,  961,  745,  737,  745, 1023, 1023,
      746, 1023, 1023,  407,  700,  545,  545,  545,  545, 1023,
     1023, 1001,  701, 1002, 1002, 1002, 1002,  132,  127,  132,
     1023, 1023,  133, 1023, 1023, 1003,  968,  968,  968,  968,
      701,  547,  409,  547, 1023, 1023,  548,  549,  550,  551,
      551,  551,  551,  547,  409,  547, 1023, 1023,  548,  549,
      550,  551,  551,  551,  551,  409,  409,  409, 1023, 1023,
      410, 1023, 1023,  553,  553,  553,  553,  311,  194,  311,

     1023, 1023,  312,  313,  555,  556,  556,  556,  556,  311,
      194,  311, 1023, 1023,  312,  313,  314,  704,  704,  704,
      704,  413,  414,  413, 1023, 1023,  415, 1023,  705,  556,
      556,  556,  556, 1023, 1023, 1023,  706,  974,  974,  974,
      974,  974,  974,  974,  974,  980,  980,  980,  980,  980,
      980,  980,  980, 1023,  706,  562,  414,  562, 1023, 1023,
      563,  564,  565,  566,  566,  566,  566,  409,  409,  409,
     1023, 1023,  410, 1023,  708,  560,  560,  560,  560, 1023,
     1023, 1023,  709,  986,  986,  986,  986,  986,  986,  986,
      986,  988,  988,  988,  988,  990,  990,  990,  990, 1023,

      709,  562,  414,  562, 1023, 1023,  563,  564,  565,  566,
      566,  566,  566,  416,  568,  568,  568,  568, 1023, 1023,
     1023,  417,  992,  992,  992,  992,  992,  992,  992,  992,
      994,  994,  994,  994,  996,  996,  996,  996, 1023,  417,
      713,  571,  571,  571,  571, 1023, 1023, 1023,  714,  998,
      998,  998,  998,  998,  998,  998,  998, 1000, 1000, 1000,
     1000, 1002, 1002, 1002, 1002, 1023,  714,  573,  419,  573,
     1023, 1023,  574,  575,  576,  577,  577,  577,  577,  573,
      419,  573, 1023, 1023,  574,  575,  576,  577,  577,  577,
      577,  419,  419,  419, 1023, 1023,  420, 1023, 1023,  579,

      579,  579,  579,  322,  201,  322, 1023, 1023,  323,  324,
      581,  582,  582,  582,  582,  322,  201,  322, 1023, 1023,
      323,  324,  325,  717,  717,  717,  717,  423,  424,  423,
     1023, 1023,  425, 1023,  718,  582,  582,  582,  582,  132,
      127, 1006,  719, 1023,  133,  132,  127,  132, 1023, 1023,
      133,  132,  127,  132, 1023, 1023,  133, 1023, 1023, 1023,
      719,  588,  424,  588, 1023, 1023,  589,  590,  591,  592,
      592,  592,  592,  419,  419,  419, 1023, 1023,  420, 1023,
      721,  586,  586,  586,  586, 1023, 1023, 1009,  722, 1023,
     1023, 1023, 1011, 1023,  132,  127,  132, 1023, 1023,  133,

      132,  127,  132, 1023, 1023,  133,  722,  588,  424,  588,
     1023, 1013,  589,  590,  591,  592,  592,  592,  592,  426,
      594,  594,  594,  594, 1015, 1016, 1015,  427, 1012, 1017,
     1015, 1016, 1015, 1023, 1023, 1017, 1015, 1016, 1015, 1023,
     1023, 1017, 1023, 1023, 1023,  427,  726,  726,  726, 1023,
     1023,  727, 1023,  728,  597,  597,  597,  597, 1018, 1023,
     1018,  729, 1023, 1019, 1015, 1016, 1015, 1023, 1018, 1017,
     1018, 1023, 1021, 1019, 1021, 1023, 1023, 1022, 1023,  729,
      599,  429,  599, 1023, 1023,  600,  601,  602,  603,  603,
      603,  603,  599,  429,  599, 1023, 1023,  600,  601,  602,

      603,  603,  603,  603,  730,  731,  730, 1023, 1021,  732,
     1021,  733, 1021, 1022, 1021, 1023, 1021, 1022, 1021,  734,
     1023, 1022, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023,  734,  429,  429,
      429, 1023, 1023,  430, 1023, 1023,  605,  605,  605,  605,
      336,  216,  336, 1023, 1023,  337,  338,  607,  608,  608,
      608,  608,  336,  216,  336, 1023, 1023,  337,  338,  339,
      735,  735,  735,  735,  736,  737,  736, 1023, 1023,  738,
     1023,  739,  608,  608,  608,  608, 1023, 1023, 1023,  740,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,

     1023, 1023, 1023, 1023, 1023, 1023, 1023,  740,  614,  434,
      614, 1023, 1023,  615,  616,  617,  618,  618,  618,  618,
      731,  731,  731, 1023, 1023,  742, 1023,  743,  612,  612,
      612,  612, 1023, 1023, 1023,  744, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023,  744,  614,  434,  614, 1023, 1023,  615,
      616,  617,  618,  618,  618,  618,  745,  737,  745, 1023,
     1023,  746, 1023,  747, 1023, 1023, 1023, 1023, 1023, 1023,
     1023,  748, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,  748,

      433,  434,  433, 1023, 1023,  435, 1023,  436,  620,  620,
      620,  620, 1023, 1023, 1023,  437, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023,  437,  347,  227,  347, 1023, 1023,  348,
      349,  350,  624,  624,  624,  624,  347,  227,  347, 1023,
     1023,  348,  349,  441,  624,  624,  624,  624, 1023, 1023,
     1023,  442, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,  442,
      750,  627,  627,  627,  627, 1023, 1023, 1023,  751, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,

     1023, 1023, 1023, 1023, 1023, 1023,  751,  629,  444,  629,
     1023, 1023,  630,  631,  632,  633,  633,  633,  633,  629,
      444,  629, 1023, 1023,  630,  631,  632,  633,  633,  633,
      633,  444,  444,  444, 1023, 1023,  445, 1023, 1023,  635,
      635,  635,  635,  358,  234,  358, 1023, 1023,  359,  360,
      637,  638,  638,  638,  638,  358,  234,  358, 1023, 1023,
      359,  360,  361,  754,  754,  754,  754,  448,  449,  448,
     1023, 1023,  450, 1023,  755,  638,  638,  638,  638, 1023,
     1023, 1023,  756, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,

      756,  644,  449,  644, 1023, 1023,  645,  646,  647,  648,
      648,  648,  648,  444,  444,  444, 1023, 1023,  445, 1023,
      758,  642,  642,  642,  642, 1023, 1023, 1023,  759, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023,  759,  644,  449,  644,
     1023, 1023,  645,  646,  647,  648,  648,  648,  648,  451,
      650,  650,  650,  650, 1023, 1023, 1023,  452, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023,  452,  465,  377,  465, 1023,
     1023,  466,  467,  468,  469,  469,  469,  469,  465,  377,

      465, 1023, 1023,  466,  769,  468,  770,  770,  770,  770,
      381,  382,  381, 1023, 1023,  383,  265,  384,  661,  661,
      661,  661, 1023, 1023, 1023,  663, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023,  663,  381,  382,  381, 1023, 1023,  383,
      265,  266,  661,  661,  661,  661,  263,  153,  263, 1023,
     1023,  264,  771, 1023,  772,  772,  772,  772,  377,  377,
      377, 1023, 1023,  378, 1023, 1023,  664,  664,  664,  664,
     1023, 1023, 1023,  666, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,

     1023,  666,  480,  382,  480, 1023, 1023,  481,  482,  483,
      484,  484,  484,  484,  480,  382,  480, 1023, 1023,  481,
      775,  483,  776,  776,  776,  776,  491,  386,  491, 1023,
     1023,  492,  493, 1023,  778,  779,  779,  779,  780,  780,
      780,  780,  780, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,  780,  780,
      780,  389,  390,  389, 1023, 1023,  391,  278, 1023,  671,
      499,  499,  499, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,  392,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,

     1023, 1023, 1023, 1023, 1023,  392,  389,  390,  389, 1023,
     1023,  391,  278, 1023,  781,  782,  782,  782,  783,  783,
      783,  783,  783, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,  783,  783,
      783,  505,  390,  505, 1023, 1023,  506,  507, 1023,  785,
      786,  786,  786,  787,  787,  787,  787,  787, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023,  787,  787,  787,  676,  676,  676, 1023,
     1023,  677, 1023, 1023,  675,  675,  675,  675, 1023, 1023,
     1023,  679, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,

     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,  679,
      676,  676,  676, 1023, 1023,  677,  788,  789,  790,  790,
      790,  790,  792,  676,  792, 1023, 1023,  793,  794,  795,
      796,  796,  796,  796,  680,  681,  680, 1023, 1023,  682,
      799,  800,  801,  801,  801,  801,  681,  681,  681, 1023,
     1023,  692,  802,  803,  804,  804,  804,  804,  806,  681,
      806, 1023, 1023,  807,  808,  809,  810,  810,  810,  810,
      680,  681,  680, 1023, 1023,  682,  519,  520,  521,  521,
      521,  521,  517,  394,  517, 1023, 1023,  518,  811, 1023,
      812,  812,  812,  812,  686,  687,  686, 1023, 1023,  688,

      289,  401,  685,  685,  685,  685, 1023, 1023, 1023,  690,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023,  690,  686,  687,
      686, 1023, 1023,  688,  813,  814,  815,  815,  815,  815,
      687,  687,  687, 1023, 1023,  816,  817,  818,  819,  819,
      819,  819,  821,  687,  821, 1023, 1023,  822,  823,  824,
      825,  825,  825,  825,  287,  171,  287, 1023, 1023,  288,
      826,  290,  827,  827,  827,  827,  681,  681,  681, 1023,
     1023,  692, 1023, 1023,  691,  691,  691,  691, 1023, 1023,
     1023,  694, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,

     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,  694,
      806,  681,  806, 1023, 1023,  807,  808,  809,  810,  810,
      810,  810,  695,  687,  695, 1023, 1023,  696,  830,  831,
      832,  832,  832,  832,  821,  687,  821, 1023, 1023,  822,
      823,  824,  825,  825,  825,  825,  695,  687,  695, 1023,
     1023,  696,  534,  535,  536,  536,  536,  536,  532,  399,
      532, 1023, 1023,  533,  833, 1023,  834,  834,  834,  834,
      547,  409,  547, 1023, 1023,  548,  549,  550,  551,  551,
      551,  551,  547,  409,  547, 1023, 1023,  548,  837,  550,
      838,  838,  838,  838,  413,  414,  413, 1023, 1023,  415,

      313,  416,  704,  704,  704,  704, 1023, 1023, 1023,  706,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023,  706,  413,  414,
      413, 1023, 1023,  415,  313,  314,  704,  704,  704,  704,
      311,  194,  311, 1023, 1023,  312,  839, 1023,  840,  840,
      840,  840,  409,  409,  409, 1023, 1023,  410, 1023, 1023,
      707,  707,  707,  707, 1023, 1023, 1023,  709, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023,  709,  562,  414,  562, 1023,
     1023,  563,  564,  565,  566,  566,  566,  566,  562,  414,

      562, 1023, 1023,  563,  843,  565,  844,  844,  844,  844,
      573,  419,  573, 1023, 1023,  574,  575,  576,  577,  577,
      577,  577,  573,  419,  573, 1023, 1023,  574,  847,  576,
      848,  848,  848,  848,  423,  424,  423, 1023, 1023,  425,
      324,  426,  717,  717,  717,  717, 1023, 1023, 1023,  719,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023,  719,  423,  424,
      423, 1023, 1023,  425,  324,  325,  717,  717,  717,  717,
      322,  201,  322, 1023, 1023,  323,  849, 1023,  850,  850,
      850,  850,  419,  419,  419, 1023, 1023,  420, 1023, 1023,

      720,  720,  720,  720, 1023, 1023, 1023,  722, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023,  722,  588,  424,  588, 1023,
     1023,  589,  590,  591,  592,  592,  592,  592,  588,  424,
      588, 1023, 1023,  589,  853,  591,  854,  854,  854,  854,
      726,  726,  726, 1023, 1023,  727, 1023, 1023,  725,  725,
      725,  725, 1023, 1023, 1023,  729, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023,  729,  726,  726,  726, 1023, 1023,  727,
      855,  856,  857,  857,  857,  857,  859,  726,  859, 1023,

     1023,  860,  861,  862,  863,  863,  863,  863,  730,  731,
      730, 1023, 1023,  732,  866,  867,  868,  868,  868,  868,
      731,  731,  731, 1023, 1023,  742,  869,  870,  871,  871,
      871,  871,  873,  731,  873, 1023, 1023,  874,  875,  876,
      877,  877,  877,  877,  730,  731,  730, 1023, 1023,  732,
      601,  602,  603,  603,  603,  603,  599,  429,  599, 1023,
     1023,  600,  878, 1023,  879,  879,  879,  879,  736,  737,
      736, 1023, 1023,  738,  338,  436,  735,  735,  735,  735,
     1023, 1023, 1023,  740, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,

     1023,  740,  736,  737,  736, 1023, 1023,  738,  880,  881,
      882,  882,  882,  882,  737,  737,  737, 1023, 1023,  883,
      884,  885,  886,  886,  886,  886,  888,  737,  888, 1023,
     1023,  889,  890,  891,  892,  892,  892,  892,  336,  216,
      336, 1023, 1023,  337,  893,  339,  894,  894,  894,  894,
      731,  731,  731, 1023, 1023,  742, 1023, 1023,  741,  741,
      741,  741, 1023, 1023, 1023,  744, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023,  744,  873,  731,  873, 1023, 1023,  874,
      875,  876,  877,  877,  877,  877,  745,  737,  745, 1023,

     1023,  746,  897,  898,  899,  899,  899,  899,  888,  737,
      888, 1023, 1023,  889,  890,  891,  892,  892,  892,  892,
      745,  737,  745, 1023, 1023,  746,  616,  617,  618,  618,
      618,  618,  614,  434,  614, 1023, 1023,  615,  900, 1023,
      901,  901,  901,  901,  629,  444,  629, 1023, 1023,  630,
      631,  632,  633,  633,  633,  633,  629,  444,  629, 1023,
     1023,  630,  904,  632,  905,  905,  905,  905,  448,  449,
      448, 1023, 1023,  450,  360,  451,  754,  754,  754,  754,
     1023, 1023, 1023,  756, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,

     1023,  756,  448,  449,  448, 1023, 1023,  450,  360,  361,
      754,  754,  754,  754,  358,  234,  358, 1023, 1023,  359,
      906, 1023,  907,  907,  907,  907,  444,  444,  444, 1023,
     1023,  445, 1023, 1023,  757,  757,  757,  757, 1023, 1023,
     1023,  759, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,  759,
      644,  449,  644, 1023, 1023,  645,  646,  647,  648,  648,
      648,  648,  644,  449,  644, 1023, 1023,  645,  910,  647,
      911,  911,  911,  911,  465,  377,  465, 1023, 1023,  466,
      467,  468,  770,  770,  770,  770,  465,  377,  465, 1023,

     1023,  466,  467,  659,  770,  770,  770,  770, 1023, 1023,
     1023,  660, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,  660,
      263,  153,  263, 1023, 1023,  264,  265,  266,  772,  772,
      772,  772,  381,  382,  381, 1023, 1023,  383,  265,  384,
      772,  772,  772,  772, 1023, 1023, 1023,  385, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023,  385,  377,  377,  377, 1023,
     1023,  378, 1023, 1023,  774,  774,  774,  774,  480,  382,
      480, 1023, 1023,  481,  482,  483,  776,  776,  776,  776,

      480,  382,  480, 1023, 1023,  481,  482,  667,  776,  776,
      776,  776, 1023, 1023, 1023,  668, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023,  668,  490,  491,  386,  491,  490,  490,
      492,  493,  490,  778,  779,  779,  779,  780,  780,  780,
      780,  780,  490,  490,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  670,  490,  490,  490,  780,  780,  780,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  670,
      275,  389,  390,  389,  275,  275,  391,  278,  275,  781,
      782,  782,  782,  783,  783,  783,  783,  783,  275,  275,

      275,  275,  275,  275,  275,  275,  275,  275,  275,  392,
      275,  275,  275,  783,  783,  783,  275,  275,  275,  275,
      275,  275,  275,  275,  275,  392,  504,  505,  390,  505,
      504,  504,  506,  507,  504,  785,  786,  786,  786,  787,
      787,  787,  787,  787,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  504,  504,  674,  504,  504,  504,  787,
      787,  787,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  674,  917,  790,  790,  790,  790, 1023, 1023, 1023,
      918, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,  918,  792,

      676,  792, 1023, 1023,  793,  794,  795,  796,  796,  796,
      796,  792,  676,  792, 1023, 1023,  793,  794,  795,  796,
      796,  796,  796,  676,  676,  676, 1023, 1023,  677, 1023,
     1023,  798,  798,  798,  798,  517,  394,  517, 1023, 1023,
      518,  519,  800,  801,  801,  801,  801,  517,  394,  517,
     1023, 1023,  518,  519,  520,  921,  921,  921,  921,  680,
      681,  680, 1023, 1023,  682, 1023,  922,  801,  801,  801,
      801, 1023, 1023, 1023,  923, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023,  923,  676,  676,  676, 1023, 1023,  677, 1023,

      925,  804,  804,  804,  804, 1023, 1023, 1023,  926, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023,  926,  806,  681,  806,
     1023, 1023,  807,  808,  809,  810,  810,  810,  810,  806,
      681,  806, 1023, 1023,  807,  808,  809,  810,  810,  810,
      810,  683,  812,  812,  812,  812, 1023, 1023, 1023,  684,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023,  684,  287,  171,
      287, 1023, 1023,  288,  289,  814,  815,  815,  815,  815,
      287,  171,  287, 1023, 1023,  288,  289,  290,  929,  929,

      929,  929,  686,  687,  686, 1023, 1023,  688, 1023,  930,
      815,  815,  815,  815, 1023, 1023, 1023,  931, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023,  931,  821,  687,  821, 1023,
     1023,  822,  823,  824,  825,  825,  825,  825,  681,  681,
      681, 1023, 1023,  692, 1023,  933,  819,  819,  819,  819,
     1023, 1023, 1023,  934, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023,  934,  821,  687,  821, 1023, 1023,  822,  823,  824,
      825,  825,  825,  825,  401,  827,  827,  827,  827, 1023,

     1023, 1023,  402, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
      402,  681,  681,  681, 1023, 1023,  692, 1023, 1023,  829,
      829,  829,  829,  532,  399,  532, 1023, 1023,  533,  534,
      831,  832,  832,  832,  832,  532,  399,  532, 1023, 1023,
      533,  534,  535,  937,  937,  937,  937,  695,  687,  695,
     1023, 1023,  696, 1023,  938,  832,  832,  832,  832, 1023,
     1023, 1023,  939, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
      939,  697,  834,  834,  834,  834, 1023, 1023, 1023,  698,

     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023,  698,  547,  409,
      547, 1023, 1023,  548,  549,  550,  838,  838,  838,  838,
      547,  409,  547, 1023, 1023,  548,  549,  702,  838,  838,
      838,  838, 1023, 1023, 1023,  703, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023,  703,  311,  194,  311, 1023, 1023,  312,
      313,  314,  840,  840,  840,  840,  413,  414,  413, 1023,
     1023,  415,  313,  416,  840,  840,  840,  840, 1023, 1023,
     1023,  417, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,

     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,  417,
      409,  409,  409, 1023, 1023,  410, 1023, 1023,  842,  842,
      842,  842,  562,  414,  562, 1023, 1023,  563,  564,  565,
      844,  844,  844,  844,  562,  414,  562, 1023, 1023,  563,
      564,  710,  844,  844,  844,  844, 1023, 1023, 1023,  711,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023,  711,  573,  419,
      573, 1023, 1023,  574,  575,  576,  848,  848,  848,  848,
      573,  419,  573, 1023, 1023,  574,  575,  715,  848,  848,
      848,  848, 1023, 1023, 1023,  716, 1023, 1023, 1023, 1023,

     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023,  716,  322,  201,  322, 1023, 1023,  323,
      324,  325,  850,  850,  850,  850,  423,  424,  423, 1023,
     1023,  425,  324,  426,  850,  850,  850,  850, 1023, 1023,
     1023,  427, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,  427,
      419,  419,  419, 1023, 1023,  420, 1023, 1023,  852,  852,
      852,  852,  588,  424,  588, 1023, 1023,  589,  590,  591,
      854,  854,  854,  854,  588,  424,  588, 1023, 1023,  589,
      590,  723,  854,  854,  854,  854, 1023, 1023, 1023,  724,

     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023,  724,  941,  857,
      857,  857,  857, 1023, 1023, 1023,  942, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023,  942,  859,  726,  859, 1023, 1023,
      860,  861,  862,  863,  863,  863,  863,  859,  726,  859,
     1023, 1023,  860,  861,  862,  863,  863,  863,  863,  726,
      726,  726, 1023, 1023,  727, 1023, 1023,  865,  865,  865,
      865,  599,  429,  599, 1023, 1023,  600,  601,  867,  868,
      868,  868,  868,  599,  429,  599, 1023, 1023,  600,  601,

      602,  945,  945,  945,  945,  730,  731,  730, 1023, 1023,
      732, 1023,  946,  868,  868,  868,  868, 1023, 1023, 1023,
      947, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,  947,  726,
      726,  726, 1023, 1023,  727, 1023,  949,  871,  871,  871,
      871, 1023, 1023, 1023,  950, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023,  950,  873,  731,  873, 1023, 1023,  874,  875,
      876,  877,  877,  877,  877,  873,  731,  873, 1023, 1023,
      874,  875,  876,  877,  877,  877,  877,  733,  879,  879,

      879,  879, 1023, 1023, 1023,  734, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023,  734,  336,  216,  336, 1023, 1023,  337,
      338,  881,  882,  882,  882,  882,  336,  216,  336, 1023,
     1023,  337,  338,  339,  953,  953,  953,  953,  736,  737,
      736, 1023, 1023,  738, 1023,  954,  882,  882,  882,  882,
     1023, 1023, 1023,  955, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023,  955,  888,  737,  888, 1023, 1023,  889,  890,  891,
      892,  892,  892,  892,  731,  731,  731, 1023, 1023,  742,

     1023,  957,  886,  886,  886,  886, 1023, 1023, 1023,  958,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023,  958,  888,  737,
      888, 1023, 1023,  889,  890,  891,  892,  892,  892,  892,
      436,  894,  894,  894,  894, 1023, 1023, 1023,  437, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023,  437,  731,  731,  731,
     1023, 1023,  742, 1023, 1023,  896,  896,  896,  896,  614,
      434,  614, 1023, 1023,  615,  616,  898,  899,  899,  899,
      899,  614,  434,  614, 1023, 1023,  615,  616,  617,  961,

      961,  961,  961,  745,  737,  745, 1023, 1023,  746, 1023,
      962,  899,  899,  899,  899, 1023, 1023, 1023,  963, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023,  963,  747,  901,  901,
      901,  901, 1023, 1023, 1023,  748, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023,  748,  629,  444,  629, 1023, 1023,  630,
      631,  632,  905,  905,  905,  905,  629,  444,  629, 1023,
     1023,  630,  631,  752,  905,  905,  905,  905, 1023, 1023,
     1023,  753, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,

     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,  753,
      358,  234,  358, 1023, 1023,  359,  360,  361,  907,  907,
      907,  907,  448,  449,  448, 1023, 1023,  450,  360,  451,
      907,  907,  907,  907, 1023, 1023, 1023,  452, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023,  452,  444,  444,  444, 1023,
     1023,  445, 1023, 1023,  909,  909,  909,  909,  644,  449,
      644, 1023, 1023,  645,  646,  647,  911,  911,  911,  911,
      644,  449,  644, 1023, 1023,  645,  646,  760,  911,  911,
      911,  911, 1023, 1023, 1023,  761, 1023, 1023, 1023, 1023,

     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023,  761,  792,  676,  792, 1023, 1023,  793,
      794,  795,  796,  796,  796,  796,  792,  676,  792, 1023,
     1023,  793,  969,  795,  970,  970,  970,  970,  680,  681,
      680, 1023, 1023,  682,  519,  683,  921,  921,  921,  921,
     1023, 1023, 1023,  923, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023,  923,  680,  681,  680, 1023, 1023,  682,  519,  520,
      921,  921,  921,  921,  517,  394,  517, 1023, 1023,  518,
      971, 1023,  972,  972,  972,  972,  676,  676,  676, 1023,

     1023,  677, 1023, 1023,  924,  924,  924,  924, 1023, 1023,
     1023,  926, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,  926,
      806,  681,  806, 1023, 1023,  807,  808,  809,  810,  810,
      810,  810,  806,  681,  806, 1023, 1023,  807,  975,  809,
      976,  976,  976,  976,  686,  687,  686, 1023, 1023,  688,
      289,  401,  929,  929,  929,  929, 1023, 1023, 1023,  931,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023,  931,  686,  687,
      686, 1023, 1023,  688,  289,  290,  929,  929,  929,  929,

      287,  171,  287, 1023, 1023,  288,  977, 1023,  978,  978,
      978,  978,  681,  681,  681, 1023, 1023,  692, 1023, 1023,
      932,  932,  932,  932, 1023, 1023, 1023,  934, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023,  934,  821,  687,  821, 1023,
     1023,  822,  823,  824,  825,  825,  825,  825,  821,  687,
      821, 1023, 1023,  822,  981,  824,  982,  982,  982,  982,
      695,  687,  695, 1023, 1023,  696,  534,  697,  937,  937,
      937,  937, 1023, 1023, 1023,  939, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,

     1023, 1023, 1023,  939,  695,  687,  695, 1023, 1023,  696,
      534,  535,  937,  937,  937,  937,  532,  399,  532, 1023,
     1023,  533,  983, 1023,  984,  984,  984,  984,  517,  394,
      517, 1023, 1023,  518, 1023, 1023,  972,  972,  972,  972,
      683,  972,  972,  972,  972, 1023, 1023, 1023,  684, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023,  684,  287,  171,  287,
     1023, 1023,  288, 1023, 1023,  978,  978,  978,  978,  401,
      978,  978,  978,  978, 1023, 1023, 1023,  402, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,

     1023, 1023, 1023, 1023, 1023,  402,  532,  399,  532, 1023,
     1023,  533, 1023, 1023,  984,  984,  984,  984,  697,  984,
      984,  984,  984, 1023, 1023, 1023,  698, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023,  698,  943,  988,  988,  988,  988,
     1023, 1023, 1023,  944, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023,  944,  733,  990,  990,  990,  990, 1023, 1023, 1023,
      734, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,  734,  951,

      994,  994,  994,  994, 1023, 1023, 1023,  952, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023,  952,  436,  996,  996,  996,
      996, 1023, 1023, 1023,  437, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023,  437,  959, 1000, 1000, 1000, 1000, 1023, 1023,
     1023,  960, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,  960,
      747, 1002, 1002, 1002, 1002, 1023, 1023, 1023,  748, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,

     1023, 1023, 1023, 1023, 1023, 1023,  748,   46,   46,   46,
       46,   46,   46,   46,   46,   46,   80,   80,   80,   80,
       80,   80,   80,   80,   80,  108,  108,  108,  108,  108,
      108,  108,  108,  108,  118,  118,  118,  118,  118,  118,
      118,  118,  118,  131,  131,  131,  131,  131,  131,  131,
      131,  131,  135, 1023, 1023,  135,  175, 1023, 1023,  175,
     1023,  175,  175,  175,  175,  176,  176,  176,  176,  176,
      176,  176,  176,  176,  220, 1023, 1023,  220, 1023,  220,
      220, 1023,  220,  221,  221,  221,  221,  221,  221,  221,
      221,  221,  238,  238, 1023,  238, 1023,  238,  238,  238,

      244,  244, 1023,  244,  244,  244,  244,  244,  244,  262,
      262,  262,  262,  262,  262,  262,  262,  262,  275,  275,
      275,  275,  275,  275,  275,  275,  275,  281,  281, 1023,
     1023,  281,  281,  286,  286,  286,  286,  286,  286,  286,
      286,  286,  299,  299,  299,  299,  299,  299,  299,  299,
      299,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      321,  321,  321,  321,  321,  321,  321,  321,  321,  335,
      335,  335,  335,  335,  335,  335,  335,  335,  220, 1023,
     1023,  220, 1023,  220,  220, 1023,  220,  221,  221,  221,
      221,  221,  221,  221,  221,  221,  346,  346,  346,  346,

      346,  346,  346,  346,  346,  357,  357,  357,  357,  357,
      357,  357,  357,  357,  238,  238, 1023,  238, 1023,  238,
      238,  238,  244,  244, 1023,  244,  244,  244,  244,  244,
      244,  131,  131,  131,  131,  131,  131,  131,  131,  131,
      135, 1023, 1023,  135,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  281,  281, 1023, 1023,  281,  281,  286,  286,
      286,  286,  286,  286,  286,  286,  286,  299,  299,  299,
      299,  299,  299,  299,  299,  299,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  321,  321,  321,  321,  321,

      321,  321,  321,  321,  335,  335,  335,  335,  335,  335,
      335,  335,  335,  346,  346,  346,  346,  346,  346,  346,
      346,  346,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  464,  464,  464,  464,  464,  464,  464,  464,  464,
      262,  262,  262,  262,  262,  262,  262,  262,  262,  479,
      479,  479,  479,  479,  479,  479,  479,  479,  490,  490,
      490,  490,  490,  490,  490,  490,  490,  496,  496, 1023,
     1023,  496,  496,  275,  275,  275,  275,  275,  275,  275,
      275,  275,  504,  504,  504,  504,  504,  504,  504,  504,
      504,  516,  516,  516,  516,  516,  516,  516,  516,  516,

      286,  286,  286,  286,  286,  286,  286,  286,  286,  531,
      531,  531,  531,  531,  531,  531,  531,  531,  299,  299,
      299,  299,  299,  299,  299,  299,  299,  546,  546,  546,
      546,  546,  546,  546,  546,  546,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  598,  598,  598,  598,  598,  598,  598,  598,  598,
      335,  335,  335,  335,  335,  335,  335,  335,  335,  613,

      613,  613,  613,  613,  613,  613,  613,  613,  346,  346,
      346,  346,  346,  346,  346,  346,  346,  628,  628,  628,
      628,  628,  628,  628,  628,  628,  357,  357,  357,  357,
      357,  357,  357,  357,  357,  643,  643,  643,  643,  643,
      643,  643,  643,  643,  131,  131,  131,  131,  131,  131,
      131,  131,  131,  135, 1023, 1023,  135,  464,  464,  464,
      464,  464,  464,  464,  464,  464,  262,  262,  262,  262,
      262,  262,  262,  262,  262,  479,  479,  479,  479,  479,
      479,  479,  479,  479,  490,  490,  490,  490,  490,  490,
      490,  490,  490,  496,  496, 1023, 1023,  496,  496,  275,

      275,  275,  275,  275,  275,  275,  275,  275,  504,  504,
      504,  504,  504,  504,  504,  504,  504,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  286,  286,  286,  286,
      286,  286,  286,  286,  286,  531,  531,  531,  531,  531,
      531,  531,  531,  531,  299,  299,  299,  299,  299,  299,
      299,  299,  299,  546,  546,  546,  546,  546,  546,  546,
      546,  546,  310,  310,  310,  310,  310,  310,  310,  310,
      310,  561,  561,  561,  561,  561,  561,  561,  561,  561,
      572,  572,  572,  572,  572,  572,  572,  572,  572,  321,
      321,  321,  321,  321,  321,  321,  321,  321,  587,  587,

      587,  587,  587,  587,  587,  587,  587,  598,  598,  598,
      598,  598,  598,  598,  598,  598,  335,  335,  335,  335,
      335,  335,  335,  335,  335,  613,  613,  613,  613,  613,
      613,  613,  613,  613,  346,  346,  346,  346,  346,  346,
      346,  346,  346,  628,  628,  628,  628,  628,  628,  628,
      628,  628,  357,  357,  357,  357,  357,  357,  357,  357,
      357,  643,  643,  643,  643,  643,  643,  643,  643,  643,
      131,  131,  131,  131,  131,  131,  131,  131,  131,  135,
     1023, 1023,  135,  464,  464,  464,  464,  464,  464,  464,
      464,  464,  262,  262,  262,  262,  262,  262,  262,  262,

      262,  479,  479,  479,  479,  479,  479,  479,  479,  479,
      490,  490,  490,  490,  490,  490,  490,  490,  490,  275,
      275,  275,  275,  275,  275,  275,  275,  275,  784,  784,
     1023, 1023,  784,  784,  504,  504,  504,  504,  504,  504,
      504,  504,  504,  791,  791,  791,  791,  791,  791,  791,
      791,  791,  516,  516,  516,  516,  516,  516,  516,  516,
      516,  805,  805,  805,  805,  805,  805,  805,  805,  805,
      286,  286,  286,  286,  286,  286,  286,  286,  286,  820,
      820,  820,  820,  820,  820,  820,  820,  820,  531,  531,
      531,  531,  531,  531,  531,  531,  531,  546,  546,  546,

      546,  546,  546,  546,  546,  546,  310,  310,  310,  310,
      310,  310,  310,  310,  310,  561,  561,  561,  561,  561,
      561,  561,  561,  561,  572,  572,  572,  572,  572,  572,
      572,  572,  572,  321,  321,  321,  321,  321,  321,  321,
      321,  321,  587,  587,  587,  587,  587,  587,  587,  587,
      587,  858,  858,  858,  858,  858,  858,  858,  858,  858,
      598,  598,  598,  598,  598,  598,  598,  598,  598,  872,
      872,  872,  872,  872,  872,  872,  872,  872,  335,  335,
      335,  335,  335,  335,  335,  335,  335,  887,  887,  887,
      887,  887,  887,  887,  887,  887,  613,  613,  613,  613,

      613,  613,  613,  613,  613,  628,  628,  628,  628,  628,
      628,  628,  628,  628,  357,  357,  357,  357,  357,  357,
      357,  357,  357,  643,  643,  643,  643,  643,  643,  643,
      643,  643,  131,  131,  131,  131,  131,  131,  131,  131,
      131,  135, 1023, 1023,  135,  464,  464,  464,  464,  464,
      464,  464,  464,  464,  262,  262,  262,  262,  262,  262,
      262,  262,  262,  479,  479,  479,  479,  479,  479,  479,
      479,  479,  784,  784, 1023, 1023,  784,  784,  791,  791,
      791,  791,  791,  791,  791,  791,  791,  516,  516,  516,
      516,  516,  516,  516,  516,  516,  805,  805,  805,  805,

      805,  805,  805,  805,  805,  286,  286,  286,  286,  286,
      286,  286,  286,  286,  820,  820,  820,  820,  820,  820,
      820,  820,  820,  531,  531,  531,  531,  531,  531,  531,
      531,  531,  546,  546,  546,  546,  546,  546,  546,  546,
      546,  310,  310,  310,  310,  310,  310,  310,  310,  310,
      561,  561,  561,  561,  561,  561,  561,  561,  561,  572,
      572,  572,  572,  572,  572,  572,  572,  572,  321,  321,
      321,  321,  321,  321,  321,  321,  321,  587,  587,  587,
      587,  587,  587,  587,  587,  587,  858,  858,  858,  858,
      858,  858,  858,  858,  858,  598,  598,  598,  598,  598,

      598,  598,  598,  598,  872,  872,  872,  872,  872,  872,
      872,  872,  872,  335,  335,  335,  335,  335,  335,  335,
      335,  335,  887,  887,  887,  887,  887,  887,  887,  887,
      887,  613,  613,  613,  613,  613,  613,  613,  613,  613,
      628,  628,  628,  628,  628,  628,  628,  628,  628,  357,
      357,  357,  357,  357,  357,  357,  357,  357,  643,  643,
      643,  643,  643,  643,  643,  643,  643,  131,  131,  131,
      131,  131,  131,  131,  131,  131,  135, 1023, 1023,  135,
      791,  791,  791,  791,  791,  791,  791,  791,  791,  516,
      516,  516,  516,  516,  516,  516,  516,  516,  805,  805,

      805,  805,  805,  805,  805,  805,  805,  286,  286,  286,
      286,  286,  286,  286,  286,  286,  820,  820,  820,  820,
      820,  820,  820,  820,  820,  531,  531,  531,  531,  531,
      531,  531,  531,  531, 1014, 1014, 1014, 1014, 1014, 1014,
     1014, 1014, 1014, 1020, 1020, 1023, 1020, 1020, 1020, 1020,
     1020, 1020,   45, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023

    } ;

static yyconst short int yy_chk[9900] =
    {   0,
        0,    1,    1,    1,    0,    0,    1,    2,    2,    2,
     1153, 1122,    2,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    5,
        5,    5,   60,   60,    5,    9,    9,    9,    9,    9,
        9,   39,   73,  274,   39,    5,    5,   10,   10,   10,
       10,   10,   10,  280,    5,    6,    6,    6,   73,  274,
        6,   11,   11,   11,   11,   11,   11,  155,  495,  280,

       39,    6,    6,   12,   12,   12,   12,   12,   12, 1063,
        6,    7,    7,    7,  495,  155,    7,    7,    7,    7,
        7,    7,    7,   65,   65,   65,   65,   65,    7,   13,
       13,   13,   13,   13,   13,   14,   14,   14,   14,   14,
       14,   15,   15,   15,   15,   15,   15,   16,   16,   16,
       16,   16,   16,   17,   17,   17, 1058,   17,   17,   18,
       18,   18, 1051,   18,   18,  457,   47,   47,   47,  457,
       17,   47,   66,   66,   66,   66,   18,   19,   19,   19,
       19,   19,   19,   20,   20,   20,   20,   20,   20,   21,
       21,   21,   21,   21,   21,   22,   22,   22,   22,   22,

       22,   23,   23,   23,   23,   23,   23,   24,   24,   24,
       24,   24,   24,   25,   25,   25,   25,   25,   25,   40,
       41, 1044,   40,   41,   25,   42, 1039,   48,   42,   48,
      499,  503,   48, 1008, 1005, 1004,   25,  173,   25,   26,
       26,   26,   26,   26,   26,  509,  499,  503,   40,   41,
       26,   49,   49,   49,   42,  173,   49,  981,   51,   51,
       51,  509,   26,   51,   26,   27,   27,   27,   27,   27,
       27,   68,   68,   68,   68,   68,   27,  975,   49,   69,
       69,   69,   69,   71,   71,   71,   71,  969,   27,  966,
       27,   28,   28,   28,   28,   28,   28,   74,   74,   74,

       74,  965,   28,   75,   75,   75,   75,   76,   76,   76,
       76,  915,  913,  766,   28,  765,   28,   29,   29,   29,
       29,   29,   29,   75,   78,   78,   78,   78,   29,   77,
       77,   77,   77,   77,   84,   84,   84,   84,   84,   75,
       29,  763,   29,   30,   30,   30,   30,   30,   30,  189,
      655,   82,   82,   82,   30,   82,   82,   85,   85,   85,
       85,   87,   87,   87,   87,   87,   30,  189,   30,   31,
       31,   31,   31,   31,   31,   88,   88,   88,   88,  654,
       31,   90,   90,   90,   90,   90,   91,   91,   91,   91,
      653,  121,   31,  652,   31,   32,   32,   32,   32,   32,

       32,   93,   93,   93,   93,   93,   32,   94,   94,   94,
       94,   99,   99,   99,   99,   99,  458,  121,   32,  196,
       32,   33,   33,   33,  121,   33,   33,  100,  100,  100,
      100,  102,  102,  102,  102,  454,  374,  196,   33,  103,
      103,  103,  103,  104,  104,  104,  104,  373,  372,  371,
       33,  203,   33,   34,   34,   34,  370,   34,   34,  103,
      105,  105,  105,  105,  105,  106,  106,  106,  106,  203,
       34,  113,  113,  113,  113,  103,  112,  112,  112,  112,
      112,  369,   34,  367,   34,   35,   35,   35,   35,   35,
       35,  115,  115,  115,  115,  115,   35,  116,  116,  116,

      116,  123,  123,  123,  123,  511,  258,  257,   35,  256,
       35,   36,   36,   36,   36,   36,   36,  125,  125,  125,
      125,  511,   36,  124,  124,  124,  124,  126,  126,  126,
      255,  512,  126,  254,   36,  218,   36,   37,   37,   37,
       37,   37,   37,  124,  127,  252,  127,  512,   37,  127,
      128,  128,  128,  218,  251,  128,  129,  779,  129,  124,
       37,  129,   37,   38,   38,   38,   38,   38,   38,  780,
      130,  250,  130,  779,   38,  130,  131,  131,  131,  249,
      149,  131,  132,  132,  132,  780,   38,  132,   38,   43,
       43,   43,   43,   43,   43,  150,  150,  150,  150,  229,

       43,   44,   44,   44,   44,   44,   44,  152,  152,  152,
      152,  152,   44,   67,   67,   67,  236,  229,   67,  147,
       67,   67,   67,   67,   67,  133,  133,  133,   67,  782,
      133,  134,  134,  134,  236,  156,  134,  156,  156,  156,
      156,  157,  157,  157,  157,  782,   67,   70,   70,   70,
       70,   70,  304,  146,  134,   70,  159,  159,  159,  159,
      304,  145,  379,  159,  160,  160,  160,  160,  166,  166,
      166,  166,  144,   70,   72,   72,   72,  396,  304,   72,
      379,  159,   72,   72,   72,   72,  161,  143,  161,  161,
      161,  161,  165,  165,  165,  396,  141,  165,  168,  168,

      168,  168,   72,  170,  170,  170,  170,  170,  174,  783,
      174,  174,  174,  174,  179,  179,  179,  179,   72,   79,
       79,   79,  140,  139,   79,  783,   79,   79,   79,   79,
       79,  176,  176,  176,   79,  176,  176,  177,  177,  177,
      351,  177,  177,  181,  181,  181,  181,  137,  351,  136,
      181,  111,   79,   86,   86,   86,   86,   86,   96,  411,
      421,   86,  182,  182,  182,  182,  351,  183,  181,  183,
      183,  183,  183,  184,  184,  184,  184,  411,  421,   86,
       89,   89,   89,   83,  431,   89,  469,   89,   89,   89,
       89,   89,   64,  446,  469,   89,  186,  186,  186,  186,

      186,  190,  431,  190,  190,  190,  190,  191,  191,  191,
      191,  446,  469,   89,   92,   92,   92,   63,  665,   92,
      484,   92,   92,   92,   92,   92,   62,  678,  484,   92,
      193,  193,  193,  193,  193,  197,  665,  197,  197,  197,
      197,  198,  198,  198,  198,  678,  484,   92,   95,   95,
       95,   61,  693,   95,  551,   95,   95,   95,   95,   95,
       59,  708,  551,   95,  200,  200,  200,  200,  200,  204,
      693,  204,  204,  204,  204,  206,  206,  206,  206,  708,
      551,   95,  101,  101,  101,  101,  101,  566,   58,   57,
      101,  209,  209,  209,  209,  566,  208,  208,  208,  208,

       56,   55,  210,  208,  210,  210,  210,  210,  101,  107,
      107,  107,   54,  566,  107,   53,  107,  107,  107,  107,
      107,  208,   52,   45,  107,  211,  211,  211,  211,  213,
      213,  213,  213,  215,  215,  215,  215,  215,  224,  224,
      224,  224,  107,  110,  110,  110,    0,  110,  110,  219,
        0,  219,  219,  219,  219,  226,  226,  226,  226,  226,
      230,    0,  230,  230,  230,  230,  231,  231,  231,  231,
      721,  577,  110,    0,  110,  114,  114,  114,    0,  577,
      114,  592,  114,  114,  114,  114,  114,    0,  721,  592,
      114,  233,  233,  233,  233,  233,  237,  577,  237,  237,

      237,  237,  242,  242,  242,  242,  786,  592,  114,  117,
      117,  117,    0,    0,  117,    0,  117,  117,  117,  117,
      117,  244,  786,  244,  117,  245,  244,  245,  728,  246,
      245,  246,  633,  648,  246,  259,  259,  259,  259,  259,
      633,  648,  117,  153,  153,  153,  728,    0,  153,  153,
      153,  153,  153,  153,  153,  154,  154,  154,  633,  648,
      154,  154,  154,  154,  154,  154,  154,  163,  163,  163,
      787,    0,  163,  163,    0,  163,  163,  163,  163,  164,
      164,  164,    0,    0,  164,  164,  787,  164,  164,  164,
      164,  171,  171,  171,    0,    0,  171,  171,  171,  171,

      171,  171,  171,  172,  172,  172,    0,    0,  172,  172,
      172,  172,  172,  172,  172,  187,  187,  187,    0,    0,
      187,  187,  187,  187,  187,  187,  187,  188,  188,  188,
        0,    0,  188,  188,  188,  188,  188,  188,  188,  194,
      194,  194,    0,    0,  194,  194,  194,  194,  194,  194,
      194,  195,  195,  195,    0,    0,  195,  195,  195,  195,
      195,  195,  195,  201,  201,  201,    0,    0,  201,  201,
      201,  201,  201,  201,  201,  202,  202,  202,  743,    0,
      202,  202,  202,  202,  202,  202,  202,  207,  207,  207,
      207,  207,  247,  247,  247,  207,  743,  247,  260,  260,

      260,  260,  268,  268,  268,  268,  270,  270,  270,  270,
      758,  247,    0,  207,  214,  214,  214,    0,  796,  214,
        0,  214,  214,  214,  214,  214,  796,  925,  758,  214,
      271,  271,  271,  271,  272,  272,  272,  272,  281,  281,
      281,    0,    0,  281,  796,  925,  933,  214,  216,  216,
      216,    0,    0,  216,  216,  216,  216,  216,  216,  216,
      217,  217,  217,    0,  933,  217,  217,  217,  217,  217,
      217,  217,  221,  221,  221,    0,  221,  221,  283,  283,
      283,  283,  283,  284,  284,  284,  284,  292,  292,  292,
      292,  294,  294,  294,  294,  295,  295,  295,  295,    0,

        0,  221,    0,  221,  222,  222,  222,    0,  222,  222,
      296,  296,  296,  296,  296,  297,  297,  297,  297,  305,
      305,  305,  305,  307,  307,  307,  307,  307,  308,  308,
      308,  308,  949,  222,    0,  222,  225,  225,  225,    0,
        0,  225,    0,  225,  225,  225,  225,  225,    0,    0,
      949,  225,  316,  316,  316,  316,  318,  318,  318,  318,
      318,  319,  319,  319,  319,  327,  327,  327,  327,  225,
      227,  227,  227,    0,    0,  227,  227,  227,  227,  227,
      227,  227,  228,  228,  228,    0,    0,  228,  228,  228,
      228,  228,  228,  228,  232,  232,  232,    0,    0,  232,

        0,  232,  232,  232,  232,  232,    0,    0,    0,  232,
      329,  329,  329,  329,  330,  330,  330,  330,  332,  332,
      332,  332,  332,  333,  333,  333,  333,  232,  234,  234,
      234,    0,    0,  234,  234,  234,  234,  234,  234,  234,
      235,  235,  235,    0,    0,  235,  235,  235,  235,  235,
      235,  235,  261,  261,  261,    0,    0,  261,    0,  261,
      261,  261,  261,  261,    0,    0,    0,  261,  341,  341,
      341,  341,  343,  343,  343,  343,  343,  344,  344,  344,
      344,  352,  352,  352,  352,  261,  262,  262,  262,    0,
        0,  262,  262,  262,  262,  262,  262,  262,  263,  263,

      263,    0,    0,  263,  263,  263,  263,  263,  263,  263,
      267,  267,  267,    0,    0,  267,    0,  267,  354,  354,
      354,  354,  354,    0,    0,  267,  355,  355,  355,  355,
      363,  363,  363,  363,  376,  376,  376,  376,  376,  404,
      404,  404,  404,  267,  269,  269,  269,    0,    0,  269,
        0,    0,  269,  269,  269,  269,  273,  273,  273,    0,
        0,  273,    0,  957,  273,  273,  273,  273,  366,  366,
      366,    0,  380,  366,  380,  380,  380,  380,  388,  388,
      388,  957,    0,  388,  273,  397,  366,  397,  397,  397,
      397,  403,  403,  403,  403,    0,    0,    0,  403,    0,

      273,  275,  275,  275,    0,    0,  275,  275,    0,  275,
      275,  275,  275,  276,  276,  276,  403,    0,  276,  276,
        0,  276,  276,  276,  276,  277,  277,  277,    0,    0,
      277,  277,    0,  277,  277,  277,  277,  278,  278,  278,
        0,    0,  278,  278,    0,  278,  278,  278,  278,  279,
      279,  279,    0,    0,  279,  279,    0,  279,  279,  279,
      279,  405,    0,  405,  405,  405,  405,  412,    0,  412,
      412,  412,  412,    0,    0,    0,  422,  279,  422,  422,
      422,  422,  432,    0,  432,  432,  432,  432,  439,  439,
      439,  439,    0,  279,  285,  285,  285,    0,  810,  285,

        0,  285,  285,  285,  285,  285,  810,    0,  440,  285,
      440,  440,  440,  440,  462,  462,  462,  462,  438,  438,
      438,  438,    0,    0,  810,  438,    0,  285,  286,  286,
      286,    0,    0,  286,  286,  286,  286,  286,  286,  286,
      287,  287,  287,  438,    0,  287,  287,  287,  287,  287,
      287,  287,  291,  291,  291,    0,    0,  291,  447,  291,
      447,  447,  447,  447,  453,  453,  453,  291,    0,  453,
      461,  461,  461,  461,  461,  470,  470,  470,  470,  476,
      476,  476,  476,  476,    0,  291,  293,  293,  293,    0,
        0,  293,    0,    0,  293,  293,  293,  293,  298,  298,

      298,  298,  298,    0,    0,    0,  298,  477,  477,  477,
      477,  485,  485,  485,  485,  487,  487,  487,  487,    0,
      488,  488,  488,  488,  298,  299,  299,  299,    0,    0,
      299,  299,  299,  299,  299,  299,  299,  300,  300,  300,
      488,    0,  300,  300,  300,  300,  300,  300,  300,  306,
      306,  306,    0,    0,  306,    0,  488,  306,  306,  306,
      306,  309,  309,  309,    0,  825,  309,  863,  309,  309,
      309,  309,  309,  825,    0,  863,  309,  489,  489,  489,
      489,  496,  496,  496,  877,    0,  496,  501,  501,  501,
      501,  825,  877,  863,  309,  310,  310,  310,    0,    0,

      310,  310,  310,  310,  310,  310,  310,  311,  311,  311,
      877,    0,  311,  311,  311,  311,  311,  311,  311,  315,
      315,  315,    0,    0,  315,    0,  315,  513,  513,  513,
      513,  513,    0,    0,  315,  514,  514,  514,  514,  522,
      522,  522,  522,  528,  528,  528,  528,  528,  529,  529,
      529,  529,  315,  317,  317,  317,    0,    0,  317,    0,
        0,  317,  317,  317,  317,  320,  320,  320,    0,    0,
      320,    0,  320,  320,  320,  320,  320,    0,    0,    0,
      320,  537,  537,  537,  537,  539,  539,  539,  539,  540,
      540,  540,  540,  543,  543,  543,  543,  543,  320,  321,

      321,  321,    0,    0,  321,  321,  321,  321,  321,  321,
      321,  322,  322,  322,    0,    0,  322,  322,  322,  322,
      322,  322,  322,  326,  326,  326,    0,    0,  326,    0,
      326,  544,  544,  544,  544,    0,    0,    0,  326,  552,
      552,  552,  552,  558,  558,  558,  558,  558,  559,  559,
      559,  559,  567,  567,  567,  567,  326,  328,  328,  328,
        0,    0,  328,    0,    0,  328,  328,  328,  328,  334,
      334,  334,    0,    0,  334,    0,  334,  334,  334,  334,
      334,    0,    0,    0,  334,  569,  569,  569,  569,  569,
      570,  570,  570,  570,  578,  578,  578,  578,  585,  585,

      585,  585,  334,  335,  335,  335,    0,    0,  335,  335,
      335,  335,  335,  335,  335,  336,  336,  336,    0,    0,
      336,  336,  336,  336,  336,  336,  336,  340,  340,  340,
        0,    0,  340,    0,  340,  584,  584,  584,  584,  584,
        0,    0,  340,  593,  593,  593,  593,  595,  595,  595,
      595,  595,  596,  596,  596,  596,  604,  604,  604,  604,
      340,  342,  342,  342,    0,    0,  342,    0,    0,  342,
      342,  342,  342,  345,  345,  345,  345,  345,    0,    0,
        0,  345,  610,  610,  610,  610,  610,  611,  611,  611,
      611,  619,  619,  619,  619,  621,  621,  621,  621,  345,

      346,  346,  346,    0,    0,  346,  346,  346,  346,  346,
      346,  346,  347,  347,  347,    0,    0,  347,  347,  347,
      347,  347,  347,  347,  353,  353,  353,    0,    0,  353,
        0,    0,  353,  353,  353,  353,  356,  356,  356,    0,
        0,  356,    0,  356,  356,  356,  356,  356,    0,    0,
        0,  356,  622,  622,  622,  622,  625,  625,  625,  625,
      625,  626,  626,  626,  626,  634,  634,  634,  634,  356,
      357,  357,  357,    0,    0,  357,  357,  357,  357,  357,
      357,  357,  358,  358,  358,    0,    0,  358,  358,  358,
      358,  358,  358,  358,  362,  362,  362,    0,    0,  362,

      892,  362,  640,  640,  640,  640,  640,    0,  892,  362,
      641,  641,  641,  641,  649,  649,  649,  649,  656,  656,
      656,  656,    0,    0,    0,  656,  892,  362,  364,  364,
      364,    0,    0,  364,    0,    0,  364,  364,  364,  364,
      377,  377,  377,  656,    0,  377,  377,  377,  377,  377,
      377,  377,  378,  378,  378,    0,    0,  378,  378,  378,
      378,  378,  378,  378,  381,  381,  381,    0,    0,  381,
      381,  381,  381,  381,  381,  381,  382,  382,  382,    0,
        0,  382,  382,  382,  382,  382,  382,  382,  383,  383,
      383,    0,    0,  383,  383,  383,  383,  383,  383,  383,

      384,  384,  384,    0,    0,  384,  384,  384,  384,  384,
      384,  384,  385,  385,  385,    0,    0,  385,  385,    0,
      385,  385,  385,  385,  386,  386,  386,    0,    0,  386,
      386,    0,  386,  386,  386,  386,  387,  387,  387,    0,
        0,  387,  387,    0,  387,  387,  387,  387,  389,  389,
      389,    0,    0,  389,  389,    0,  389,  389,  389,  389,
      390,  390,  390,    0,    0,  390,  390,    0,  390,  390,
      390,  390,  391,  391,  391,    0,    0,  391,  391,    0,
      391,  391,  391,  391,  392,  392,  392,    0,    0,  392,
      392,    0,  392,  392,  392,  392,  392,  392,  392,  392,

      392,    0,    0,    0,  651,  651,  651,    0,    0,  651,
      657,  657,  657,  657,    0,    0,  392,  392,  392,  393,
      393,  393,    0,    0,  393,    0,    0,  393,  393,  393,
      393,  651,    0,  658,  393,  658,  658,  658,  658,  666,
        0,  666,  666,  666,  666,  673,  673,  673,    0,    0,
      673,    0,  393,  394,  394,  394,    0,    0,  394,  394,
      394,  394,  394,  394,  394,  395,  395,  395,    0,    0,
      395,  395,  395,  395,  395,  395,  395,  398,  398,  398,
        0,    0,  398,  398,  398,  398,  398,  398,  398,  399,
      399,  399,    0,    0,  399,  399,  399,  399,  399,  399,

      399,  400,  400,  400,    0,    0,  400,  400,  400,  400,
      400,  400,  400,  401,  401,  401,    0,    0,  401,  401,
      401,  401,  401,  401,  401,  402,  402,  402,    0,    0,
      402,  402,    0,  402,  402,  402,  402,  406,  406,  406,
        0,    0,  406,  406,  406,  406,  406,  406,  406,  407,
      407,  407,    0,    0,  407,  407,  407,  407,  407,  407,
      407,  408,  408,  408,    0,    0,  408,    0,    0,  408,
      408,  408,  408,    0,    0,  679,  408,  679,  679,  679,
      679,  689,  689,  689,  689,  689,  689,  694,    0,  694,
      694,  694,  694,    0,  408,  409,  409,  409,    0,    0,

      409,  409,  409,  409,  409,  409,  409,  410,  410,  410,
        0,    0,  410,  410,  410,  410,  410,  410,  410,  413,
      413,  413,    0,    0,  413,  413,  413,  413,  413,  413,
      413,  414,  414,  414,    0,    0,  414,  414,  414,  414,
      414,  414,  414,  415,  415,  415,    0,    0,  415,  415,
      415,  415,  415,  415,  415,  416,  416,  416,    0,    0,
      416,  416,  416,  416,  416,  416,  416,  417,  417,  417,
        0,    0,  417,  417,    0,  417,  417,  417,  417,  418,
      418,  418,  970,  970,  418,    0,    0,  418,  418,  418,
      418,  970,    0,    0,  418,  700,  700,  700,  700,  713,

      713,  713,  713,  699,  699,  699,  699,    0,    0,  970,
      699,    0,  418,  419,  419,  419,    0,    0,  419,  419,
      419,  419,  419,  419,  419,  420,  420,  420,  699,    0,
      420,  420,  420,  420,  420,  420,  420,  423,  423,  423,
        0,    0,  423,  423,  423,  423,  423,  423,  423,  424,
      424,  424,    0,    0,  424,  424,  424,  424,  424,  424,
      424,  425,  425,  425,    0,    0,  425,  425,  425,  425,
      425,  425,  425,  426,  426,  426,    0,    0,  426,  426,
      426,  426,  426,  426,  426,  427,  427,  427,    0,    0,
      427,  427,    0,  427,  427,  427,  427,  428,  428,  428,

        0,    0,  428,    0,    0,  428,  428,  428,  428,    0,
        0,  701,  428,  701,  701,  701,  701,  709,    0,  709,
      709,  709,  709,  714,    0,  714,  714,  714,  714,    0,
      428,  429,  429,  429,    0,    0,  429,  429,  429,  429,
      429,  429,  429,  430,  430,  430,    0,    0,  430,  430,
      430,  430,  430,  430,  430,  433,  433,  433,    0,    0,
      433,  433,  433,  433,  433,  433,  433,  434,  434,  434,
        0,    0,  434,  434,  434,  434,  434,  434,  434,  435,
      435,  435,    0,    0,  435,  435,  435,  435,  435,  435,
      435,  436,  436,  436,    0,    0,  436,  436,  436,  436,

      436,  436,  436,  437,  437,  437,    0,    0,  437,  437,
        0,  437,  437,  437,  437,  441,  441,  441,    0,    0,
      441,  441,  441,  441,  441,  441,  441,  442,  442,  442,
        0,    0,  442,  442,  442,  442,  442,  442,  442,  443,
      443,  443,  976,  976,  443,    0,    0,  443,  443,  443,
      443,  976,    0,  722,  443,  722,  722,  722,  722,  750,
      750,  750,  750,  712,  712,  712,  712,    0,    0,  976,
      712,    0,  443,  444,  444,  444,    0,    0,  444,  444,
      444,  444,  444,  444,  444,  445,  445,  445,  712,    0,
      445,  445,  445,  445,  445,  445,  445,  448,  448,  448,

        0,    0,  448,  448,  448,  448,  448,  448,  448,  449,
      449,  449,    0,    0,  449,  449,  449,  449,  449,  449,
      449,  450,  450,  450,    0,    0,  450,  450,  450,  450,
      450,  450,  450,  451,  451,  451,    0,    0,  451,  451,
      451,  451,  451,  451,  451,  452,  452,  452,    0,    0,
      452,  452,    0,  452,  452,  452,  452,  463,  463,  463,
      463,  463,    0,    0,  729,  463,  729,  729,  729,  729,
      739,  739,  739,  739,  739,  739,  744,    0,  744,  744,
      744,  744,    0,  463,  464,  464,  464,    0,    0,  464,
      464,  464,  464,  464,  464,  464,  465,  465,  465,    0,

        0,  465,  465,  465,  465,  465,  465,  465,  471,  471,
      471,    0,    0,  471,    0,    0,  471,  471,  471,  471,
      472,  472,  472,    0,    0,  472,  472,  472,  472,  472,
      472,  472,  473,  473,  473,    0,    0,  473,  473,  473,
      473,  473,  473,  473,  474,  474,  474,  982,  982,  474,
        0,  474,  474,  474,  474,  474,  982,    0,  751,  474,
      751,  751,  751,  751,  767,  767,  767,  767,  749,  749,
      749,  749,    0,    0,  982,  749,    0,  474,  475,  475,
      475,    0,    0,  475,  475,  475,  475,  475,  475,  475,
      478,  478,  478,  749,    0,  478,    0,  478,  478,  478,

      478,  478,    0,    0,  759,  478,  759,  759,  759,  759,
      762,  762,  762,    0,    0,  762,  768,  768,  768,  768,
      762,    0,    0,  478,  479,  479,  479,    0,    0,  479,
      479,  479,  479,  479,  479,  479,  486,  486,  486,  486,
      486,    0,    0,    0,  486,  773,  773,  773,  773,  784,
      784,  784,    0,    0,  784,  788,  788,  788,  788,  788,
        0,    0,  486,  490,  490,  490,    0,    0,  490,  490,
        0,  490,  490,  490,  490,  491,  491,  491,    0,    0,
      491,  491,    0,  491,  491,  491,  491,  492,  492,  492,
        0,    0,  492,  492,    0,  492,  492,  492,  492,  493,

      493,  493,    0,    0,  493,  493,    0,  493,  493,  493,
      493,  494,  494,  494,    0,    0,  494,  494,    0,  494,
      494,  494,  494,  789,  789,  789,  789,  797,  797,  797,
      797,  802,  802,  802,  802,  802,    0,    0,    0,  494,
      803,  803,  803,  803,  811,  811,  811,  811,  817,  817,
      817,  817,  817,    0,    0,  494,  497,  497,  497,    0,
        0,  497,  497,    0,  497,  497,  497,  497,  498,  498,
      498,    0,    0,  498,  498,    0,  498,  498,  498,  498,
      818,  818,  818,  818,  826,  826,  826,  826,  828,  828,
      828,  828,  833,  833,  833,  833,  498,  835,  835,  835,

      835,  836,  836,  836,  836,  841,  841,  841,  841,    0,
        0,    0,  498,  500,  500,  500,    0,    0,  500,  500,
        0,  500,  500,  500,  500,  502,  502,  502,    0,    0,
      502,    0,    0,  502,  502,  502,  502,  845,  845,  845,
      845,  846,  846,  846,  846,  851,  851,  851,  851,  856,
      856,  856,  856,  502,  855,  855,  855,  855,  855,  864,
      864,  864,  864,  869,  869,  869,  869,  869,    0,  502,
      504,  504,  504,    0,    0,  504,  504,    0,  504,  504,
      504,  504,  505,  505,  505,    0,    0,  505,  505,    0,
      505,  505,  505,  505,  506,  506,  506,    0,    0,  506,

      506,    0,  506,  506,  506,  506,  507,  507,  507,    0,
        0,  507,  507,    0,  507,  507,  507,  507,  508,  508,
      508,    0,    0,  508,  508,    0,  508,  508,  508,  508,
      870,  870,  870,  870,  878,  878,  878,  878,  884,  884,
      884,  884,  884,    0,    0,    0,  508,  885,  885,  885,
      885,  893,  893,  893,  893,  895,  895,  895,  895,    0,
        0,    0,  508,  510,  510,  510,  510,  510,  510,  510,
      510,  510,  900,  900,  900,  900,  902,  902,  902,  902,
      946,  946,  946,  510,    0,  946,    0,  510,  510,  510,
      903,  903,  903,  903,  908,  908,  908,  908,    0,  510,

      515,  515,  515,    0,    0,  515,    0,  515,  515,  515,
      515,  515,  912,  912,  912,  515,    0,  912,    0,  912,
      917,  917,  917,  917,  916,  916,  916,  916,    0,    0,
        0,  916,    0,  515,  516,  516,  516,    0,    0,  516,
      516,  516,  516,  516,  516,  516,  517,  517,  517,  916,
        0,  517,  517,  517,  517,  517,  517,  517,  521,  521,
      521,    0,    0,  521,  918,  521,  918,  918,  918,  918,
        0,    0,  926,  521,  926,  926,  926,  926,  934,    0,
      934,  934,  934,  934,  941,  941,  941,  941,    0,    0,
        0,  521,  523,  523,  523,    0,    0,  523,    0,    0,

      523,  523,  523,  523,  524,  524,  524,    0,    0,  524,
      524,  524,  524,  524,  524,  524,  525,  525,  525,    0,
        0,  525,  525,  525,  525,  525,  525,  525,  526,  526,
      526,    0,    0,  526,    0,  526,  526,  526,  526,  526,
        0,    0,  942,  526,  942,  942,  942,  942,  967,  967,
      967,  967,  940,  940,  940,  940,    0,    0,    0,  940,
        0,  526,  527,  527,  527,    0,    0,  527,  527,  527,
      527,  527,  527,  527,  530,  530,  530,  940,    0,  530,
        0,  530,  530,  530,  530,  530,    0,    0,  944,  530,
      944,  944,  944,  944,  945,  945,  945,  945,  945,  947,

        0,  947,  947,  947,  947,    0,    0,  530,  531,  531,
      531,    0,    0,  531,  531,  531,  531,  531,  531,  531,
      536,  536,  536,    0,    0,  536,    0,  536,  948,  948,
      948,  948,  948,    0,  950,  536,  950,  950,  950,  950,
      952,    0,  952,  952,  952,  952,  953,  953,  953,  953,
      953,    0,    0,  536,  538,  538,  538,    0,    0,  538,
        0,  538,  538,  538,  538,  538,  954,  954,  954,  538,
      955,  954,  955,  955,  955,  955,  956,  956,  956,  956,
      956,  958,    0,  958,  958,  958,  958,  538,  541,  541,
      541,    0,    0,  541,  541,  541,  541,  541,  541,  541,

      542,  542,  542,    0,    0,  542,  542,  542,  542,  542,
      542,  542,    0,    0,  960,  542,  960,  960,  960,  960,
      961,  961,  961,  961,  961,  962,  962,  962,    0,    0,
      962,    0,    0,  542,  545,  545,  545,  545,  545,    0,
        0,  963,  545,  963,  963,  963,  963,  964,  964,  964,
        0,    0,  964,    0,    0,  964,  968,  968,  968,  968,
      545,  546,  546,  546,    0,    0,  546,  546,  546,  546,
      546,  546,  546,  547,  547,  547,    0,    0,  547,  547,
      547,  547,  547,  547,  547,  553,  553,  553,    0,    0,
      553,    0,    0,  553,  553,  553,  553,  554,  554,  554,

        0,    0,  554,  554,  554,  554,  554,  554,  554,  555,
      555,  555,    0,    0,  555,  555,  555,  555,  555,  555,
      555,  556,  556,  556,    0,    0,  556,    0,  556,  556,
      556,  556,  556,    0,    0,    0,  556,  973,  973,  973,
      973,  974,  974,  974,  974,  979,  979,  979,  979,  980,
      980,  980,  980,    0,  556,  557,  557,  557,    0,    0,
      557,  557,  557,  557,  557,  557,  557,  560,  560,  560,
        0,    0,  560,    0,  560,  560,  560,  560,  560,    0,
        0,    0,  560,  985,  985,  985,  985,  986,  986,  986,
      986,  987,  987,  987,  987,  989,  989,  989,  989,    0,

      560,  561,  561,  561,    0,    0,  561,  561,  561,  561,
      561,  561,  561,  568,  568,  568,  568,  568,    0,    0,
        0,  568,  991,  991,  991,  991,  992,  992,  992,  992,
      993,  993,  993,  993,  995,  995,  995,  995,    0,  568,
      571,  571,  571,  571,  571,    0,    0,    0,  571,  997,
      997,  997,  997,  998,  998,  998,  998,  999,  999,  999,
      999, 1001, 1001, 1001, 1001,    0,  571,  572,  572,  572,
        0,    0,  572,  572,  572,  572,  572,  572,  572,  573,
      573,  573,    0,    0,  573,  573,  573,  573,  573,  573,
      573,  579,  579,  579,    0,    0,  579,    0,    0,  579,

      579,  579,  579,  580,  580,  580,    0,    0,  580,  580,
      580,  580,  580,  580,  580,  581,  581,  581,    0,    0,
      581,  581,  581,  581,  581,  581,  581,  582,  582,  582,
        0,    0,  582,    0,  582,  582,  582,  582,  582, 1003,
     1003, 1003,  582,    0, 1003, 1006, 1006, 1006,    0,    0,
     1006, 1009, 1009, 1009,    0,    0, 1009,    0,    0,    0,
      582,  583,  583,  583,    0,    0,  583,  583,  583,  583,
      583,  583,  583,  586,  586,  586,    0,    0,  586,    0,
      586,  586,  586,  586,  586,    0,    0, 1006,  586,    0,
        0,    0, 1009,    0, 1011, 1011, 1011,    0,    0, 1011,

     1012, 1012, 1012,    0,    0, 1012,  586,  587,  587,  587,
        0, 1012,  587,  587,  587,  587,  587,  587,  587,  594,
      594,  594,  594,  594, 1013, 1013, 1013,  594, 1011, 1013,
     1014, 1014, 1014,    0,    0, 1014, 1015, 1015, 1015,    0,
        0, 1015,    0,    0,    0,  594,  597,  597,  597,    0,
        0,  597,    0,  597,  597,  597,  597,  597, 1016,    0,
     1016,  597,    0, 1016, 1017, 1017, 1017,    0, 1018, 1017,
     1018,    0, 1019, 1018, 1019,    0,    0, 1019,    0,  597,
      598,  598,  598,    0,    0,  598,  598,  598,  598,  598,
      598,  598,  599,  599,  599,    0,    0,  599,  599,  599,

      599,  599,  599,  599,  603,  603,  603,    0, 1020,  603,
     1020,  603, 1021, 1020, 1021,    0, 1022, 1021, 1022,  603,
        0, 1022,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  603,  605,  605,
      605,    0,    0,  605,    0,    0,  605,  605,  605,  605,
      606,  606,  606,    0,    0,  606,  606,  606,  606,  606,
      606,  606,  607,  607,  607,    0,    0,  607,  607,  607,
      607,  607,  607,  607,  608,  608,  608,    0,    0,  608,
        0,  608,  608,  608,  608,  608,    0,    0,    0,  608,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,  608,  609,  609,
      609,    0,    0,  609,  609,  609,  609,  609,  609,  609,
      612,  612,  612,    0,    0,  612,    0,  612,  612,  612,
      612,  612,    0,    0,    0,  612,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  612,  613,  613,  613,    0,    0,  613,
      613,  613,  613,  613,  613,  613,  618,  618,  618,    0,
        0,  618,    0,  618,    0,    0,    0,    0,    0,    0,
        0,  618,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  618,

      620,  620,  620,    0,    0,  620,    0,  620,  620,  620,
      620,  620,    0,    0,    0,  620,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  620,  623,  623,  623,    0,    0,  623,
      623,  623,  623,  623,  623,  623,  624,  624,  624,    0,
        0,  624,  624,  624,  624,  624,  624,  624,    0,    0,
        0,  624,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  624,
      627,  627,  627,  627,  627,    0,    0,    0,  627,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,  627,  628,  628,  628,
        0,    0,  628,  628,  628,  628,  628,  628,  628,  629,
      629,  629,    0,    0,  629,  629,  629,  629,  629,  629,
      629,  635,  635,  635,    0,    0,  635,    0,    0,  635,
      635,  635,  635,  636,  636,  636,    0,    0,  636,  636,
      636,  636,  636,  636,  636,  637,  637,  637,    0,    0,
      637,  637,  637,  637,  637,  637,  637,  638,  638,  638,
        0,    0,  638,    0,  638,  638,  638,  638,  638,    0,
        0,    0,  638,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      638,  639,  639,  639,    0,    0,  639,  639,  639,  639,
      639,  639,  639,  642,  642,  642,    0,    0,  642,    0,
      642,  642,  642,  642,  642,    0,    0,    0,  642,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  642,  643,  643,  643,
        0,    0,  643,  643,  643,  643,  643,  643,  643,  650,
      650,  650,  650,  650,    0,    0,    0,  650,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  650,  659,  659,  659,    0,
        0,  659,  659,  659,  659,  659,  659,  659,  660,  660,

      660,    0,    0,  660,  660,  660,  660,  660,  660,  660,
      661,  661,  661,    0,    0,  661,  661,  661,  661,  661,
      661,  661,    0,    0,    0,  661,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  661,  662,  662,  662,    0,    0,  662,
      662,  662,  662,  662,  662,  662,  663,  663,  663,    0,
        0,  663,  663,    0,  663,  663,  663,  663,  664,  664,
      664,    0,    0,  664,    0,    0,  664,  664,  664,  664,
        0,    0,    0,  664,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  664,  667,  667,  667,    0,    0,  667,  667,  667,
      667,  667,  667,  667,  668,  668,  668,    0,    0,  668,
      668,  668,  668,  668,  668,  668,  670,  670,  670,    0,
        0,  670,  670,    0,  670,  670,  670,  670,  670,  670,
      670,  670,  670,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  670,  670,
      670,  671,  671,  671,    0,    0,  671,  671,    0,  671,
      671,  671,  671,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  671,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  671,  672,  672,  672,    0,
        0,  672,  672,    0,  672,  672,  672,  672,  672,  672,
      672,  672,  672,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  672,  672,
      672,  674,  674,  674,    0,    0,  674,  674,    0,  674,
      674,  674,  674,  674,  674,  674,  674,  674,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  674,  674,  674,  675,  675,  675,    0,
        0,  675,    0,    0,  675,  675,  675,  675,    0,    0,
        0,  675,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  675,
      676,  676,  676,    0,    0,  676,  676,  676,  676,  676,
      676,  676,  677,  677,  677,    0,    0,  677,  677,  677,
      677,  677,  677,  677,  680,  680,  680,    0,    0,  680,
      680,  680,  680,  680,  680,  680,  681,  681,  681,    0,
        0,  681,  681,  681,  681,  681,  681,  681,  682,  682,
      682,    0,    0,  682,  682,  682,  682,  682,  682,  682,
      683,  683,  683,    0,    0,  683,  683,  683,  683,  683,
      683,  683,  684,  684,  684,    0,    0,  684,  684,    0,
      684,  684,  684,  684,  685,  685,  685,    0,    0,  685,

      685,  685,  685,  685,  685,  685,    0,    0,    0,  685,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  685,  686,  686,
      686,    0,    0,  686,  686,  686,  686,  686,  686,  686,
      687,  687,  687,    0,    0,  687,  687,  687,  687,  687,
      687,  687,  688,  688,  688,    0,    0,  688,  688,  688,
      688,  688,  688,  688,  690,  690,  690,    0,    0,  690,
      690,  690,  690,  690,  690,  690,  691,  691,  691,    0,
        0,  691,    0,    0,  691,  691,  691,  691,    0,    0,
        0,  691,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  691,
      692,  692,  692,    0,    0,  692,  692,  692,  692,  692,
      692,  692,  695,  695,  695,    0,    0,  695,  695,  695,
      695,  695,  695,  695,  696,  696,  696,    0,    0,  696,
      696,  696,  696,  696,  696,  696,  697,  697,  697,    0,
        0,  697,  697,  697,  697,  697,  697,  697,  698,  698,
      698,    0,    0,  698,  698,    0,  698,  698,  698,  698,
      702,  702,  702,    0,    0,  702,  702,  702,  702,  702,
      702,  702,  703,  703,  703,    0,    0,  703,  703,  703,
      703,  703,  703,  703,  704,  704,  704,    0,    0,  704,

      704,  704,  704,  704,  704,  704,    0,    0,    0,  704,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  704,  705,  705,
      705,    0,    0,  705,  705,  705,  705,  705,  705,  705,
      706,  706,  706,    0,    0,  706,  706,    0,  706,  706,
      706,  706,  707,  707,  707,    0,    0,  707,    0,    0,
      707,  707,  707,  707,    0,    0,    0,  707,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  707,  710,  710,  710,    0,
        0,  710,  710,  710,  710,  710,  710,  710,  711,  711,

      711,    0,    0,  711,  711,  711,  711,  711,  711,  711,
      715,  715,  715,    0,    0,  715,  715,  715,  715,  715,
      715,  715,  716,  716,  716,    0,    0,  716,  716,  716,
      716,  716,  716,  716,  717,  717,  717,    0,    0,  717,
      717,  717,  717,  717,  717,  717,    0,    0,    0,  717,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  717,  718,  718,
      718,    0,    0,  718,  718,  718,  718,  718,  718,  718,
      719,  719,  719,    0,    0,  719,  719,    0,  719,  719,
      719,  719,  720,  720,  720,    0,    0,  720,    0,    0,

      720,  720,  720,  720,    0,    0,    0,  720,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  720,  723,  723,  723,    0,
        0,  723,  723,  723,  723,  723,  723,  723,  724,  724,
      724,    0,    0,  724,  724,  724,  724,  724,  724,  724,
      725,  725,  725,    0,    0,  725,    0,    0,  725,  725,
      725,  725,    0,    0,    0,  725,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  725,  726,  726,  726,    0,    0,  726,
      726,  726,  726,  726,  726,  726,  727,  727,  727,    0,

        0,  727,  727,  727,  727,  727,  727,  727,  730,  730,
      730,    0,    0,  730,  730,  730,  730,  730,  730,  730,
      731,  731,  731,    0,    0,  731,  731,  731,  731,  731,
      731,  731,  732,  732,  732,    0,    0,  732,  732,  732,
      732,  732,  732,  732,  733,  733,  733,    0,    0,  733,
      733,  733,  733,  733,  733,  733,  734,  734,  734,    0,
        0,  734,  734,    0,  734,  734,  734,  734,  735,  735,
      735,    0,    0,  735,  735,  735,  735,  735,  735,  735,
        0,    0,    0,  735,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  735,  736,  736,  736,    0,    0,  736,  736,  736,
      736,  736,  736,  736,  737,  737,  737,    0,    0,  737,
      737,  737,  737,  737,  737,  737,  738,  738,  738,    0,
        0,  738,  738,  738,  738,  738,  738,  738,  740,  740,
      740,    0,    0,  740,  740,  740,  740,  740,  740,  740,
      741,  741,  741,    0,    0,  741,    0,    0,  741,  741,
      741,  741,    0,    0,    0,  741,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  741,  742,  742,  742,    0,    0,  742,
      742,  742,  742,  742,  742,  742,  745,  745,  745,    0,

        0,  745,  745,  745,  745,  745,  745,  745,  746,  746,
      746,    0,    0,  746,  746,  746,  746,  746,  746,  746,
      747,  747,  747,    0,    0,  747,  747,  747,  747,  747,
      747,  747,  748,  748,  748,    0,    0,  748,  748,    0,
      748,  748,  748,  748,  752,  752,  752,    0,    0,  752,
      752,  752,  752,  752,  752,  752,  753,  753,  753,    0,
        0,  753,  753,  753,  753,  753,  753,  753,  754,  754,
      754,    0,    0,  754,  754,  754,  754,  754,  754,  754,
        0,    0,    0,  754,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,  754,  755,  755,  755,    0,    0,  755,  755,  755,
      755,  755,  755,  755,  756,  756,  756,    0,    0,  756,
      756,    0,  756,  756,  756,  756,  757,  757,  757,    0,
        0,  757,    0,    0,  757,  757,  757,  757,    0,    0,
        0,  757,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  757,
      760,  760,  760,    0,    0,  760,  760,  760,  760,  760,
      760,  760,  761,  761,  761,    0,    0,  761,  761,  761,
      761,  761,  761,  761,  769,  769,  769,    0,    0,  769,
      769,  769,  769,  769,  769,  769,  770,  770,  770,    0,

        0,  770,  770,  770,  770,  770,  770,  770,    0,    0,
        0,  770,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  770,
      771,  771,  771,    0,    0,  771,  771,  771,  771,  771,
      771,  771,  772,  772,  772,    0,    0,  772,  772,  772,
      772,  772,  772,  772,    0,    0,    0,  772,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  772,  774,  774,  774,    0,
        0,  774,    0,    0,  774,  774,  774,  774,  775,  775,
      775,    0,    0,  775,  775,  775,  775,  775,  775,  775,

      776,  776,  776,    0,    0,  776,  776,  776,  776,  776,
      776,  776,    0,    0,    0,  776,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  776,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      778,  778,  778,  778,  778,  778,  778,  778,  778,  778,
      781,  781,  781,  781,  781,  781,  781,  781,  781,  781,
      781,  781,  781,  781,  781,  781,  781,  781,  781,  781,

      781,  781,  781,  781,  781,  781,  781,  781,  781,  781,
      781,  781,  781,  781,  781,  781,  781,  781,  781,  781,
      781,  781,  781,  781,  781,  781,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  785,  785,  785,  785,  785,  785,  785,  785,
      785,  785,  790,  790,  790,  790,  790,    0,    0,    0,
      790,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  790,  791,

      791,  791,    0,    0,  791,  791,  791,  791,  791,  791,
      791,  792,  792,  792,    0,    0,  792,  792,  792,  792,
      792,  792,  792,  798,  798,  798,    0,    0,  798,    0,
        0,  798,  798,  798,  798,  799,  799,  799,    0,    0,
      799,  799,  799,  799,  799,  799,  799,  800,  800,  800,
        0,    0,  800,  800,  800,  800,  800,  800,  800,  801,
      801,  801,    0,    0,  801,    0,  801,  801,  801,  801,
      801,    0,    0,    0,  801,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  801,  804,  804,  804,    0,    0,  804,    0,

      804,  804,  804,  804,  804,    0,    0,    0,  804,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  804,  805,  805,  805,
        0,    0,  805,  805,  805,  805,  805,  805,  805,  806,
      806,  806,    0,    0,  806,  806,  806,  806,  806,  806,
      806,  812,  812,  812,  812,  812,    0,    0,    0,  812,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  812,  813,  813,
      813,    0,    0,  813,  813,  813,  813,  813,  813,  813,
      814,  814,  814,    0,    0,  814,  814,  814,  814,  814,

      814,  814,  815,  815,  815,    0,    0,  815,    0,  815,
      815,  815,  815,  815,    0,    0,    0,  815,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  815,  816,  816,  816,    0,
        0,  816,  816,  816,  816,  816,  816,  816,  819,  819,
      819,    0,    0,  819,    0,  819,  819,  819,  819,  819,
        0,    0,    0,  819,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  819,  820,  820,  820,    0,    0,  820,  820,  820,
      820,  820,  820,  820,  827,  827,  827,  827,  827,    0,

        0,    0,  827,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      827,  829,  829,  829,    0,    0,  829,    0,    0,  829,
      829,  829,  829,  830,  830,  830,    0,    0,  830,  830,
      830,  830,  830,  830,  830,  831,  831,  831,    0,    0,
      831,  831,  831,  831,  831,  831,  831,  832,  832,  832,
        0,    0,  832,    0,  832,  832,  832,  832,  832,    0,
        0,    0,  832,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      832,  834,  834,  834,  834,  834,    0,    0,    0,  834,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  834,  837,  837,
      837,    0,    0,  837,  837,  837,  837,  837,  837,  837,
      838,  838,  838,    0,    0,  838,  838,  838,  838,  838,
      838,  838,    0,    0,    0,  838,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  838,  839,  839,  839,    0,    0,  839,
      839,  839,  839,  839,  839,  839,  840,  840,  840,    0,
        0,  840,  840,  840,  840,  840,  840,  840,    0,    0,
        0,  840,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  840,
      842,  842,  842,    0,    0,  842,    0,    0,  842,  842,
      842,  842,  843,  843,  843,    0,    0,  843,  843,  843,
      843,  843,  843,  843,  844,  844,  844,    0,    0,  844,
      844,  844,  844,  844,  844,  844,    0,    0,    0,  844,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  844,  847,  847,
      847,    0,    0,  847,  847,  847,  847,  847,  847,  847,
      848,  848,  848,    0,    0,  848,  848,  848,  848,  848,
      848,  848,    0,    0,    0,  848,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  848,  849,  849,  849,    0,    0,  849,
      849,  849,  849,  849,  849,  849,  850,  850,  850,    0,
        0,  850,  850,  850,  850,  850,  850,  850,    0,    0,
        0,  850,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  850,
      852,  852,  852,    0,    0,  852,    0,    0,  852,  852,
      852,  852,  853,  853,  853,    0,    0,  853,  853,  853,
      853,  853,  853,  853,  854,  854,  854,    0,    0,  854,
      854,  854,  854,  854,  854,  854,    0,    0,    0,  854,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  854,  857,  857,
      857,  857,  857,    0,    0,    0,  857,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  857,  858,  858,  858,    0,    0,
      858,  858,  858,  858,  858,  858,  858,  859,  859,  859,
        0,    0,  859,  859,  859,  859,  859,  859,  859,  865,
      865,  865,    0,    0,  865,    0,    0,  865,  865,  865,
      865,  866,  866,  866,    0,    0,  866,  866,  866,  866,
      866,  866,  866,  867,  867,  867,    0,    0,  867,  867,

      867,  867,  867,  867,  867,  868,  868,  868,    0,    0,
      868,    0,  868,  868,  868,  868,  868,    0,    0,    0,
      868,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  868,  871,
      871,  871,    0,    0,  871,    0,  871,  871,  871,  871,
      871,    0,    0,    0,  871,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  871,  872,  872,  872,    0,    0,  872,  872,
      872,  872,  872,  872,  872,  873,  873,  873,    0,    0,
      873,  873,  873,  873,  873,  873,  873,  879,  879,  879,

      879,  879,    0,    0,    0,  879,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  879,  880,  880,  880,    0,    0,  880,
      880,  880,  880,  880,  880,  880,  881,  881,  881,    0,
        0,  881,  881,  881,  881,  881,  881,  881,  882,  882,
      882,    0,    0,  882,    0,  882,  882,  882,  882,  882,
        0,    0,    0,  882,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  882,  883,  883,  883,    0,    0,  883,  883,  883,
      883,  883,  883,  883,  886,  886,  886,    0,    0,  886,

        0,  886,  886,  886,  886,  886,    0,    0,    0,  886,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  886,  887,  887,
      887,    0,    0,  887,  887,  887,  887,  887,  887,  887,
      894,  894,  894,  894,  894,    0,    0,    0,  894,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  894,  896,  896,  896,
        0,    0,  896,    0,    0,  896,  896,  896,  896,  897,
      897,  897,    0,    0,  897,  897,  897,  897,  897,  897,
      897,  898,  898,  898,    0,    0,  898,  898,  898,  898,

      898,  898,  898,  899,  899,  899,    0,    0,  899,    0,
      899,  899,  899,  899,  899,    0,    0,    0,  899,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  899,  901,  901,  901,
      901,  901,    0,    0,    0,  901,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  901,  904,  904,  904,    0,    0,  904,
      904,  904,  904,  904,  904,  904,  905,  905,  905,    0,
        0,  905,  905,  905,  905,  905,  905,  905,    0,    0,
        0,  905,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,  905,
      906,  906,  906,    0,    0,  906,  906,  906,  906,  906,
      906,  906,  907,  907,  907,    0,    0,  907,  907,  907,
      907,  907,  907,  907,    0,    0,    0,  907,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  907,  909,  909,  909,    0,
        0,  909,    0,    0,  909,  909,  909,  909,  910,  910,
      910,    0,    0,  910,  910,  910,  910,  910,  910,  910,
      911,  911,  911,    0,    0,  911,  911,  911,  911,  911,
      911,  911,    0,    0,    0,  911,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,  911,  919,  919,  919,    0,    0,  919,
      919,  919,  919,  919,  919,  919,  920,  920,  920,    0,
        0,  920,  920,  920,  920,  920,  920,  920,  921,  921,
      921,    0,    0,  921,  921,  921,  921,  921,  921,  921,
        0,    0,    0,  921,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  921,  922,  922,  922,    0,    0,  922,  922,  922,
      922,  922,  922,  922,  923,  923,  923,    0,    0,  923,
      923,    0,  923,  923,  923,  923,  924,  924,  924,    0,

        0,  924,    0,    0,  924,  924,  924,  924,    0,    0,
        0,  924,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,  924,
      927,  927,  927,    0,    0,  927,  927,  927,  927,  927,
      927,  927,  928,  928,  928,    0,    0,  928,  928,  928,
      928,  928,  928,  928,  929,  929,  929,    0,    0,  929,
      929,  929,  929,  929,  929,  929,    0,    0,    0,  929,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,  929,  930,  930,
      930,    0,    0,  930,  930,  930,  930,  930,  930,  930,

      931,  931,  931,    0,    0,  931,  931,    0,  931,  931,
      931,  931,  932,  932,  932,    0,    0,  932,    0,    0,
      932,  932,  932,  932,    0,    0,    0,  932,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  932,  935,  935,  935,    0,
        0,  935,  935,  935,  935,  935,  935,  935,  936,  936,
      936,    0,    0,  936,  936,  936,  936,  936,  936,  936,
      937,  937,  937,    0,    0,  937,  937,  937,  937,  937,
      937,  937,    0,    0,    0,  937,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,  937,  938,  938,  938,    0,    0,  938,
      938,  938,  938,  938,  938,  938,  939,  939,  939,    0,
        0,  939,  939,    0,  939,  939,  939,  939,  971,  971,
      971,    0,    0,  971,    0,    0,  971,  971,  971,  971,
      972,  972,  972,  972,  972,    0,    0,    0,  972,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,  972,  977,  977,  977,
        0,    0,  977,    0,    0,  977,  977,  977,  977,  978,
      978,  978,  978,  978,    0,    0,    0,  978,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,  978,  983,  983,  983,    0,
        0,  983,    0,    0,  983,  983,  983,  983,  984,  984,
      984,  984,  984,    0,    0,    0,  984,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,  984,  988,  988,  988,  988,  988,
        0,    0,    0,  988,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,  988,  990,  990,  990,  990,  990,    0,    0,    0,
      990,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,  990,  994,

      994,  994,  994,  994,    0,    0,    0,  994,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,  994,  996,  996,  996,  996,
      996,    0,    0,    0,  996,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,  996, 1000, 1000, 1000, 1000, 1000,    0,    0,
        0, 1000,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0, 1000,
     1002, 1002, 1002, 1002, 1002,    0,    0,    0, 1002,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,

        0,    0,    0,    0,    0,    0, 1002, 1024, 1024, 1024,
     1024, 1024, 1024, 1024, 1024, 1024, 1025, 1025, 1025, 1025,
     1025, 1025, 1025, 1025, 1025, 1026, 1026, 1026, 1026, 1026,
     1026, 1026, 1026, 1026, 1027, 1027, 1027, 1027, 1027, 1027,
     1027, 1027, 1027, 1028, 1028, 1028, 1028, 1028, 1028, 1028,
     1028, 1028, 1029,    0,    0, 1029, 1030,    0,    0, 1030,
        0, 1030, 1030, 1030, 1030, 1031, 1031, 1031, 1031, 1031,
     1031, 1031, 1031, 1031, 1032,    0,    0, 1032,    0, 1032,
     1032,    0, 1032, 1033, 1033, 1033, 1033, 1033, 1033, 1033,
     1033, 1033, 1034, 1034,    0, 1034,    0, 1034, 1034, 1034,

     1035, 1035,    0, 1035, 1035, 1035, 1035, 1035, 1035, 1036,
     1036, 1036, 1036, 1036, 1036, 1036, 1036, 1036, 1037, 1037,
     1037, 1037, 1037, 1037, 1037, 1037, 1037, 1038, 1038,    0,
        0, 1038, 1038, 1040, 1040, 1040, 1040, 1040, 1040, 1040,
     1040, 1040, 1041, 1041, 1041, 1041, 1041, 1041, 1041, 1041,
     1041, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042, 1042,
     1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1043, 1045,
     1045, 1045, 1045, 1045, 1045, 1045, 1045, 1045, 1046,    0,
        0, 1046,    0, 1046, 1046,    0, 1046, 1047, 1047, 1047,
     1047, 1047, 1047, 1047, 1047, 1047, 1048, 1048, 1048, 1048,

     1048, 1048, 1048, 1048, 1048, 1049, 1049, 1049, 1049, 1049,
     1049, 1049, 1049, 1049, 1050, 1050,    0, 1050,    0, 1050,
     1050, 1050, 1052, 1052,    0, 1052, 1052, 1052, 1052, 1052,
     1052, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053, 1053,
     1054,    0,    0, 1054, 1055, 1055, 1055, 1055, 1055, 1055,
     1055, 1055, 1055, 1056, 1056, 1056, 1056, 1056, 1056, 1056,
     1056, 1056, 1057, 1057,    0,    0, 1057, 1057, 1059, 1059,
     1059, 1059, 1059, 1059, 1059, 1059, 1059, 1060, 1060, 1060,
     1060, 1060, 1060, 1060, 1060, 1060, 1061, 1061, 1061, 1061,
     1061, 1061, 1061, 1061, 1061, 1062, 1062, 1062, 1062, 1062,

     1062, 1062, 1062, 1062, 1064, 1064, 1064, 1064, 1064, 1064,
     1064, 1064, 1064, 1065, 1065, 1065, 1065, 1065, 1065, 1065,
     1065, 1065, 1066, 1066, 1066, 1066, 1066, 1066, 1066, 1066,
     1066, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067, 1067,
     1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1068, 1069,
     1069, 1069, 1069, 1069, 1069, 1069, 1069, 1069, 1070, 1070,
     1070, 1070, 1070, 1070, 1070, 1070, 1070, 1071, 1071,    0,
        0, 1071, 1071, 1072, 1072, 1072, 1072, 1072, 1072, 1072,
     1072, 1072, 1073, 1073, 1073, 1073, 1073, 1073, 1073, 1073,
     1073, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074, 1074,

     1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1075, 1076,
     1076, 1076, 1076, 1076, 1076, 1076, 1076, 1076, 1077, 1077,
     1077, 1077, 1077, 1077, 1077, 1077, 1077, 1078, 1078, 1078,
     1078, 1078, 1078, 1078, 1078, 1078, 1079, 1079, 1079, 1079,
     1079, 1079, 1079, 1079, 1079, 1080, 1080, 1080, 1080, 1080,
     1080, 1080, 1080, 1080, 1081, 1081, 1081, 1081, 1081, 1081,
     1081, 1081, 1081, 1082, 1082, 1082, 1082, 1082, 1082, 1082,
     1082, 1082, 1083, 1083, 1083, 1083, 1083, 1083, 1083, 1083,
     1083, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084, 1084,
     1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1085, 1086,

     1086, 1086, 1086, 1086, 1086, 1086, 1086, 1086, 1087, 1087,
     1087, 1087, 1087, 1087, 1087, 1087, 1087, 1088, 1088, 1088,
     1088, 1088, 1088, 1088, 1088, 1088, 1089, 1089, 1089, 1089,
     1089, 1089, 1089, 1089, 1089, 1090, 1090, 1090, 1090, 1090,
     1090, 1090, 1090, 1090, 1091, 1091, 1091, 1091, 1091, 1091,
     1091, 1091, 1091, 1092,    0,    0, 1092, 1093, 1093, 1093,
     1093, 1093, 1093, 1093, 1093, 1093, 1094, 1094, 1094, 1094,
     1094, 1094, 1094, 1094, 1094, 1095, 1095, 1095, 1095, 1095,
     1095, 1095, 1095, 1095, 1096, 1096, 1096, 1096, 1096, 1096,
     1096, 1096, 1096, 1097, 1097,    0,    0, 1097, 1097, 1098,

     1098, 1098, 1098, 1098, 1098, 1098, 1098, 1098, 1099, 1099,
     1099, 1099, 1099, 1099, 1099, 1099, 1099, 1100, 1100, 1100,
     1100, 1100, 1100, 1100, 1100, 1100, 1101, 1101, 1101, 1101,
     1101, 1101, 1101, 1101, 1101, 1102, 1102, 1102, 1102, 1102,
     1102, 1102, 1102, 1102, 1103, 1103, 1103, 1103, 1103, 1103,
     1103, 1103, 1103, 1104, 1104, 1104, 1104, 1104, 1104, 1104,
     1104, 1104, 1105, 1105, 1105, 1105, 1105, 1105, 1105, 1105,
     1105, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106, 1106,
     1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1107, 1108,
     1108, 1108, 1108, 1108, 1108, 1108, 1108, 1108, 1109, 1109,

     1109, 1109, 1109, 1109, 1109, 1109, 1109, 1110, 1110, 1110,
     1110, 1110, 1110, 1110, 1110, 1110, 1111, 1111, 1111, 1111,
     1111, 1111, 1111, 1111, 1111, 1112, 1112, 1112, 1112, 1112,
     1112, 1112, 1112, 1112, 1113, 1113, 1113, 1113, 1113, 1113,
     1113, 1113, 1113, 1114, 1114, 1114, 1114, 1114, 1114, 1114,
     1114, 1114, 1115, 1115, 1115, 1115, 1115, 1115, 1115, 1115,
     1115, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116, 1116,
     1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1117, 1118,
        0,    0, 1118, 1119, 1119, 1119, 1119, 1119, 1119, 1119,
     1119, 1119, 1120, 1120, 1120, 1120, 1120, 1120, 1120, 1120,

     1120, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121, 1121,
     1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1123, 1124,
     1124, 1124, 1124, 1124, 1124, 1124, 1124, 1124, 1125, 1125,
        0,    0, 1125, 1125, 1126, 1126, 1126, 1126, 1126, 1126,
     1126, 1126, 1126, 1127, 1127, 1127, 1127, 1127, 1127, 1127,
     1127, 1127, 1128, 1128, 1128, 1128, 1128, 1128, 1128, 1128,
     1128, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129, 1129,
     1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1130, 1131,
     1131, 1131, 1131, 1131, 1131, 1131, 1131, 1131, 1132, 1132,
     1132, 1132, 1132, 1132, 1132, 1132, 1132, 1133, 1133, 1133,

     1133, 1133, 1133, 1133, 1133, 1133, 1134, 1134, 1134, 1134,
     1134, 1134, 1134, 1134, 1134, 1135, 1135, 1135, 1135, 1135,
     1135, 1135, 1135, 1135, 1136, 1136, 1136, 1136, 1136, 1136,
     1136, 1136, 1136, 1137, 1137, 1137, 1137, 1137, 1137, 1137,
     1137, 1137, 1138, 1138, 1138, 1138, 1138, 1138, 1138, 1138,
     1138, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139, 1139,
     1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1140, 1141,
     1141, 1141, 1141, 1141, 1141, 1141, 1141, 1141, 1142, 1142,
     1142, 1142, 1142, 1142, 1142, 1142, 1142, 1143, 1143, 1143,
     1143, 1143, 1143, 1143, 1143, 1143, 1144, 1144, 1144, 1144,

     1144, 1144, 1144, 1144, 1144, 1145, 1145, 1145, 1145, 1145,
     1145, 1145, 1145, 1145, 1146, 1146, 1146, 1146, 1146, 1146,
     1146, 1146, 1146, 1147, 1147, 1147, 1147, 1147, 1147, 1147,
     1147, 1147, 1148, 1148, 1148, 1148, 1148, 1148, 1148, 1148,
     1148, 1149,    0,    0, 1149, 1150, 1150, 1150, 1150, 1150,
     1150, 1150, 1150, 1150, 1151, 1151, 1151, 1151, 1151, 1151,
     1151, 1151, 1151, 1152, 1152, 1152, 1152, 1152, 1152, 1152,
     1152, 1152, 1154, 1154,    0,    0, 1154, 1154, 1155, 1155,
     1155, 1155, 1155, 1155, 1155, 1155, 1155, 1156, 1156, 1156,
     1156, 1156, 1156, 1156, 1156, 1156, 1157, 1157, 1157, 1157,

     1157, 1157, 1157, 1157, 1157, 1158, 1158, 1158, 1158, 1158,
     1158, 1158, 1158, 1158, 1159, 1159, 1159, 1159, 1159, 1159,
     1159, 1159, 1159, 1160, 1160, 1160, 1160, 1160, 1160, 1160,
     1160, 1160, 1161, 1161, 1161, 1161, 1161, 1161, 1161, 1161,
     1161, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162, 1162,
     1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1163, 1164,
     1164, 1164, 1164, 1164, 1164, 1164, 1164, 1164, 1165, 1165,
     1165, 1165, 1165, 1165, 1165, 1165, 1165, 1166, 1166, 1166,
     1166, 1166, 1166, 1166, 1166, 1166, 1167, 1167, 1167, 1167,
     1167, 1167, 1167, 1167, 1167, 1168, 1168, 1168, 1168, 1168,

     1168, 1168, 1168, 1168, 1169, 1169, 1169, 1169, 1169, 1169,
     1169, 1169, 1169, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
     1170, 1170, 1171, 1171, 1171, 1171, 1171, 1171, 1171, 1171,
     1171, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172, 1172,
     1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1173, 1174,
     1174, 1174, 1174, 1174, 1174, 1174, 1174, 1174, 1175, 1175,
     1175, 1175, 1175, 1175, 1175, 1175, 1175, 1176, 1176, 1176,
     1176, 1176, 1176, 1176, 1176, 1176, 1177,    0,    0, 1177,
     1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1178, 1179,
     1179, 1179, 1179, 1179, 1179, 1179, 1179, 1179, 1180, 1180,

     1180, 1180, 1180, 1180, 1180, 1180, 1180, 1181, 1181, 1181,
     1181, 1181, 1181, 1181, 1181, 1181, 1182, 1182, 1182, 1182,
     1182, 1182, 1182, 1182, 1182, 1183, 1183, 1183, 1183, 1183,
     1183, 1183, 1183, 1183, 1184, 1184, 1184, 1184, 1184, 1184,
     1184, 1184, 1184, 1185, 1185,    0, 1185, 1185, 1185, 1185,
     1185, 1185, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023,
     1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023, 1023

    } ;

static yy_state_type yy_last_accepting_state;
static char *yy_last_accepting_cpos;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
char *yytext;
#define INITIAL 0
/**************************************************
 * VRML 2.0 Parser
 * Copyright (C) 1996 Silicon Graphics, Inc.
 *
 * Author(s)	: Gavin Bell
 *                Daniel Woods (first port)
 **************************************************
 */

#include "config.h"
#include <string.h>

#include "VrmlNode.h"

#include "VrmlMFColor.h"
#include "VrmlMFFloat.h"
#include "VrmlMFInt.h"
#include "VrmlMFRotation.h"
#include "VrmlMFString.h"
#include "VrmlMFVec2f.h"
#include "VrmlMFVec3f.h"

#include "VrmlSFBool.h"
#include "VrmlSFColor.h"
#include "VrmlSFFloat.h"
#include "VrmlSFImage.h"
#include "VrmlSFInt.h"
#include "VrmlSFRotation.h"
#include "VrmlSFString.h"
#include "VrmlSFTime.h"
#include "VrmlSFVec2f.h"
#include "VrmlSFVec3f.h"

#include "parser.h"

#define YY_NO_UNPUT 1	/* Not using yyunput/yyless */


char *yyinStr = 0;			/* For input from strings */
int (*yyinFunc)(char *, int) = 0;	/* For input from functions */

#if HAVE_LIBPNG || HAVE_ZLIB
#include <zlib.h>

gzFile yygz = 0;			/* For input from gzipped files */

#define YY_INPUT(buf,result,max_size) \
	if (yyinStr) { \
		for (result=0; result<max_size && *yyinStr; ) \
		    buf[result++] = *yyinStr++; \
	} else if (yyinFunc) { \
		if ((result = (*yyinFunc)( buf, max_size )) == -1) \
		    YY_FATAL_ERROR( "cb input in flex scanner failed" ); \
	} else if (yygz) { \
		if ((result = gzread( yygz, buf, max_size )) == -1) \
		    YY_FATAL_ERROR( "gz input in flex scanner failed" ); \
	} else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "yyin input in flex scanner failed" );
#else
#define YY_INPUT(buf,result,max_size) \
	if (yyinStr) { \
		for (result=0; result<max_size && *yyinStr; ) \
		    buf[result++] = *yyinStr++; \
	} else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

	/* Current line number */
int currentLineNumber = 1;

extern void yyerror(const char *);

	/* The YACC parser sets this to a token to direct the lexer */
	/* in cases where just syntax isn't enough: */
int expectToken = 0;
int expectCoordIndex = 0;

	/* True when parsing a multiple-valued field: */
static int parsing_mf = 0;

	/* These are used when parsing SFImage fields: */
static int sfImageIntsParsed = 0;
static int sfImageIntsExpected = 0;
static int sfImageNC = 0;
static unsigned char *sfImagePixels = 0;
static int sfImageMask[] = { 0x000000FF, 0x0000FF00, 0x00FF0000, 0xFF000000 };

	/* These are used when parsing SFString fields: */
#define STRING_SIZE_INCR 1000
static int sfStringMax = 0;
static int sfStringN = 0;
static char *sfStringChars = 0;

static void checkStringSize(int nmore)
{
  if (sfStringN+nmore >= sfStringMax)
    {
      int incr = STRING_SIZE_INCR > nmore ? STRING_SIZE_INCR : (nmore+1);
      char *p = new char[sfStringMax += incr];
      if (sfStringChars)
	{
	  strcpy(p, sfStringChars);
	  delete [] sfStringChars;
	}
      sfStringChars = p;
    }
}

static void initString()
{
  checkStringSize(0);
  sfStringN = 0;
  sfStringChars[0] = 0;
}

	/* These are used when parsing MF* fields */

static vector<int> mfInts;
static vector<float> mfFloats;
static vector<char*> mfStrs;

#ifdef __cplusplus
extern "C"
#endif
int yywrap(void) { yyinStr = 0; yyinFunc = 0; BEGIN INITIAL; return 1; }



static char *skip_ws(char *s)
{
  while (*s == ' ' ||
	 *s == '\f' ||
	 *s == '\n' ||
	 *s == '\r' ||
	 *s == '\t' ||
	 *s == '\v' ||
	 *s == ',' ||
	 *s == '#')
    {
      if (*s == '#')
	{
	  while (*s && *s != '\n') ++s;
	}
      else
	{
	  if (*s++ == '\n') ++currentLineNumber;
	}
    }
  return s;
}


/* Normal state:  parsing nodes.  The initial start state is used */
/* only to recognize the VRML header. */
#define NODE 1

/* Start tokens for all of the field types, */
/* except for MFNode and SFNode, which are almost completely handled */
/* by the parser: */
#define SFB 2
#define SFC 3
#define SFF 4
#define SFIMG 5
#define SFI 6
#define SFR 7
#define SFS 8
#define SFT 9
#define SFV2 10
#define SFV3 11

#define MFC 12
#define MFF 13
#define MFI 14
#define MFR 15
#define MFS 16
#define MFV2 17
#define MFV3 18

#define IN_SFS 19
#define IN_MFS 20
#define IN_SFIMG 21

/* Big hairy expression for floating point numbers: */
/* Ints are decimal or hex (0x##): */
/* Whitespace.  Using this pattern can screw up currentLineNumber, */
/* so it is only used wherever it is really convenient and it is */
/* extremely unlikely that the user will put in a carriage return */
/* (example: between the floats in an SFVec3f) */
/* And the same pattern without the newline */
/* Legal characters to start an identifier */
/* Legal other characters in an identifier */

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif

#ifndef YY_NO_UNPUT
static void yyunput YY_PROTO(( int c, char *buf_ptr ));
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#ifdef __cplusplus
static int yyinput YY_PROTO(( void ));
#else
static int input YY_PROTO(( void ));
#endif
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO (void) fwrite( yytext, yyleng, 1, yyout )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( yy_current_buffer->yy_is_interactive ) \
		{ \
		int c = '*', n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else if ( ((result = fread( buf, 1, max_size, yyin )) == 0) \
		  && ferror( yyin ) ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yylex YY_PROTO(( void ))
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;




	/* Switch into a new start state if the parser */
	/* just told us that we've read a field name */
	/* and should expect a field value (or IS) */
  if (expectToken != 0) {
#if DEBUG
    extern int yy_flex_debug;
    if (yy_flex_debug)
      fprintf(stderr,"LEX--> Start State %d\n", expectToken);
#endif
      
    /*
     * Annoying.  This big switch is necessary because
     * LEX wants to assign particular numbers to start
     * tokens, and YACC wants to define all the tokens
     * used, too.  Sigh.
     */
    switch(expectToken) {
    case SF_BOOL: BEGIN SFB; break;
    case SF_COLOR: BEGIN SFC; break;
    case SF_FLOAT: BEGIN SFF; break;
    case SF_IMAGE: BEGIN SFIMG; break;
    case SF_INT32: BEGIN SFI; break;
    case SF_ROTATION: BEGIN SFR; break;
    case SF_STRING: BEGIN SFS; break;
    case SF_TIME: BEGIN SFT; break;
    case SF_VEC2F: BEGIN SFV2; break;
    case SF_VEC3F: BEGIN SFV3; break;
    case MF_COLOR: BEGIN MFC; break;
    case MF_FLOAT: BEGIN MFF; break;
    case MF_INT32: BEGIN MFI; break;
    case MF_ROTATION: BEGIN MFR; break;
    case MF_STRING: BEGIN MFS; break;
    case MF_VEC2F: BEGIN MFV2; break;
    case MF_VEC3F: BEGIN MFV3; break;

      /* SFNode and MFNode are special.  Here the lexer just returns */
      /* "marker tokens" so the parser knows what type of field is */
      /* being parsed; unlike the other fields, parsing of SFNode/MFNode */
      /* field happens in the parser. */
    case MF_NODE: expectToken = 0; return MF_NODE;
    case SF_NODE: expectToken = 0; return SF_NODE;
        
    default: yyerror("ACK: Bad expectToken"); break;
    }
  }


	/* This is more complicated than they really need to be because */
	/* I was ambitious and made the whitespace-matching rule aggressive */

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 1024 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 9853 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
{ BEGIN NODE; currentLineNumber = 2; }
	YY_BREAK
/* The lexer is in the NODE state when parsing nodes, either */
/* top-level nodes in the .wrl file, in a prototype implementation, */
/* or when parsing the contents of SFNode or MFNode fields. */
case 2:
YY_RULE_SETUP
{ return PROTO; }
	YY_BREAK
case 3:
YY_RULE_SETUP
{ return EXTERNPROTO; }
	YY_BREAK
case 4:
YY_RULE_SETUP
{ return DEF; }
	YY_BREAK
case 5:
YY_RULE_SETUP
{ return USE; }
	YY_BREAK
case 6:
YY_RULE_SETUP
{ return TO; }
	YY_BREAK
case 7:
YY_RULE_SETUP
{ return IS; }
	YY_BREAK
case 8:
YY_RULE_SETUP
{ return ROUTE; }
	YY_BREAK
case 9:
YY_RULE_SETUP
{ return SFN_NULL; }
	YY_BREAK
case 10:
YY_RULE_SETUP
{ return EVENTIN; }
	YY_BREAK
case 11:
YY_RULE_SETUP
{ return EVENTOUT; }
	YY_BREAK
case 12:
YY_RULE_SETUP
{ return FIELD; }
	YY_BREAK
case 13:
YY_RULE_SETUP
{ return EXPOSEDFIELD; }
	YY_BREAK
/* Legal identifiers. */
case 14:
YY_RULE_SETUP
{ yylval.string = strdup(yytext);
					  return IDENTIFIER; }
	YY_BREAK
/* All fields may have an IS declaration: */
case 15:
YY_RULE_SETUP
{ BEGIN NODE;
					  expectToken = 0;
					  yyless(0);
					}
	YY_BREAK
case 16:
YY_RULE_SETUP
{ BEGIN NODE;
					expectToken = 0;
                                        yyless(0); /* put back the IS */
                                      }
	YY_BREAK
/* All MF field types other than MFNode are completely parsed here */
/* in the lexer, and one token is returned to the parser.  They all */
/* share the same rules for open and closing brackets: */
case 17:
YY_RULE_SETUP
{ if (parsing_mf) yyerror("Double [");
					  parsing_mf = 1;
					  mfInts.erase(mfInts.begin(), mfInts.end());
					  mfFloats.erase(mfFloats.begin(), mfFloats.end());
					  /* parse errors can leak memory */
					  mfStrs.erase(mfStrs.begin(), mfStrs.end());
					}
	YY_BREAK
case 18:
YY_RULE_SETUP
{
					  if (! parsing_mf) yyerror("Unmatched ]");
					  int fieldType = expectToken;

					  switch (fieldType) {
					  case MF_COLOR:
					    yylval.field = new VrmlMFColor(mfFloats.size() / 3, &mfFloats[0]);
					    break;
					  case MF_FLOAT:
					    yylval.field = new VrmlMFFloat(mfFloats.size(), &mfFloats[0]);
					    break;
					  case MF_INT32:
					    if (expectCoordIndex &&
						mfInts.size() > 0 &&
						-1 != mfInts[mfInts.size()-1])
					      mfInts.push_back(-1);
					    yylval.field = new VrmlMFInt(mfInts.size(), &mfInts[0]);
					    break;
					  case MF_ROTATION:
					    yylval.field = new VrmlMFRotation(mfFloats.size() / 4, &mfFloats[0]);
					    break;
					  case MF_STRING:
					    yylval.field = new VrmlMFString(mfStrs.size(), &mfStrs[0]);
					    vector<char*>::iterator mfs;
					    for (mfs = mfStrs.begin();
						 mfs != mfStrs.end(); ++mfs)
					      delete [] (*mfs);
					    mfStrs.erase(mfStrs.begin(), mfStrs.end());
					    break;
					  case MF_VEC2F:
					    yylval.field = new VrmlMFVec2f(mfFloats.size() / 2, &mfFloats[0]);
					    break;
					  case MF_VEC3F:
					    yylval.field = new VrmlMFVec3f(mfFloats.size() / 3, &mfFloats[0]);
					    break;
					  }
					  BEGIN NODE;
					  parsing_mf = 0;
					  expectToken = 0;

					  mfFloats.erase(mfFloats.begin(), mfFloats.end());
					  mfInts.erase(mfInts.begin(), mfInts.end());
					  return fieldType;
					}
	YY_BREAK
case 19:
YY_RULE_SETUP
{ BEGIN NODE; expectToken = 0;
			  yylval.field = new VrmlSFBool(0); return SF_BOOL; }
	YY_BREAK
case 20:
YY_RULE_SETUP
{ BEGIN NODE; expectToken = 0;
			  yylval.field = new VrmlSFBool(1); return SF_BOOL; }
	YY_BREAK
case 21:
YY_RULE_SETUP
{ BEGIN NODE; expectToken = 0;
			  yylval.field = new VrmlSFInt(strtol(yytext,0,0));
			  return SF_INT32;
			}
	YY_BREAK
case 22:
YY_RULE_SETUP
{
			  int i = strtol(yytext,0,0);
			  if (parsing_mf)
			    mfInts.push_back(i);
			  else {    /* No open bracket means a single value: */
			    yylval.field = new VrmlMFInt(i);
			    BEGIN NODE; expectToken = 0;
			    return MF_INT32;
			  }
			}
	YY_BREAK
/* All the floating-point types are pretty similar: */
case 23:
YY_RULE_SETUP
{
			  yylval.field = new VrmlSFFloat(atof(yytext));
			  BEGIN NODE; expectToken = 0;
			  return SF_FLOAT;
			}
	YY_BREAK
case 24:
YY_RULE_SETUP
{
			  float f = atof(yytext);
			  if (parsing_mf)
			    mfFloats.push_back(f);
                  	  else {    /* No open bracket means a single value: */
			    yylval.field = new VrmlMFFloat(f);
			    BEGIN NODE; expectToken = 0;
			    return MF_FLOAT;
			  }
			}
	YY_BREAK
case 25:
YY_RULE_SETUP
{
				  float x = 0.0, y = 0.0;
				  int n = 0;
				  char *s = &yytext[0];

				  sscanf(s,"%g%n", &x, &n);
				  s = skip_ws(s+n);
				  sscanf(s,"%g", &y);
				  yylval.field = new VrmlSFVec2f(x,y);
				  BEGIN NODE; expectToken = 0;
				  return SF_VEC2F; 
				}
	YY_BREAK
case 26:
YY_RULE_SETUP
{
				  float x = 0.0, y = 0.0;
				  int n = 0;
				  char *s = &yytext[0];

				  sscanf(s,"%g%n", &x, &n);
				  s = skip_ws(s+n);
				  sscanf(s,"%g", &y);
				  if (parsing_mf) {
				    mfFloats.push_back(x);
				    mfFloats.push_back(y);
				  } else {
				    yylval.field = new VrmlMFVec2f(x,y);
				    BEGIN NODE; expectToken = 0;
				    return MF_VEC2F;
				  }
				}
	YY_BREAK
case 27:
YY_RULE_SETUP
{
				  float x = 0.0, y = 0.0, z = 0.0;
				  int n = 0;
				  char *s = &yytext[0];

				  sscanf(s,"%g%n", &x, &n);
				  s = skip_ws(s+n);
				  sscanf(s,"%g%n", &y, &n);
				  s = skip_ws(s+n);
				  sscanf(s,"%g", &z);

				  yylval.field = new VrmlSFVec3f(x,y,z);

				  BEGIN NODE; expectToken = 0; 
				  return SF_VEC3F;
				}
	YY_BREAK
case 28:
YY_RULE_SETUP
{
				  float x = 0.0, y = 0.0, z = 0.0;
				  int n = 0;
				  char *s = &yytext[0];

				  sscanf(s,"%g%n", &x, &n);
				  s = skip_ws(s+n);
				  sscanf(s,"%g%n", &y, &n);
				  s = skip_ws(s+n);
				  sscanf(s,"%g", &z);

				  if (parsing_mf) {
				    mfFloats.push_back(x);
				    mfFloats.push_back(y);
				    mfFloats.push_back(z);
				  } else {
				    yylval.field = new VrmlMFVec3f(x,y,z);
                                    BEGIN NODE; expectToken = 0;
				    return MF_VEC3F;
                                  }
                                }
	YY_BREAK
case 29:
YY_RULE_SETUP
{
				  float x = 0.0, y = 0.0, z = 0.0, r = 0.0;
				  int n = 0;
				  char *s = &yytext[0];
				  sscanf(s,"%g%n", &x, &n);
				  s = skip_ws(s+n);
				  sscanf(s,"%g%n", &y, &n);
				  s = skip_ws(s+n);
				  sscanf(s,"%g%n", &z, &n);
				  s = skip_ws(s+n);
				  sscanf(s,"%g", &r);
				  yylval.field = new VrmlSFRotation(x,y,z,r);
				  BEGIN NODE; expectToken = 0; 
				  return SF_ROTATION;
				}
	YY_BREAK
case 30:
YY_RULE_SETUP
{
				  float x = 0.0, y = 0.0, z = 0.0, r = 0.0;
				  int n = 0;
				  char *s = &yytext[0];
				  sscanf(s,"%g%n", &x, &n);
				  s = skip_ws(s+n);
				  sscanf(s,"%g%n", &y, &n);
				  s = skip_ws(s+n);
				  sscanf(s,"%g%n", &z, &n);
				  s = skip_ws(s+n);
				  sscanf(s,"%g", &r);

				  if (parsing_mf) {
				    mfFloats.push_back(x);
				    mfFloats.push_back(y);
				    mfFloats.push_back(z);
				    mfFloats.push_back(r);
				  } else {
				    yylval.field = new VrmlMFRotation(x,y,z,r);
                                    BEGIN NODE; expectToken = 0;
				    return MF_ROTATION;
                                  }
                                }
	YY_BREAK
case 31:
YY_RULE_SETUP
{
				  float r = 0.0, g = 0.0, b = 0.0;
				  int n = 0;
				  char *s = &yytext[0];
				  sscanf(s,"%g%n", &r, &n);
				  s = skip_ws(s+n);
				  sscanf(s,"%g%n", &g, &n);
				  s = skip_ws(s+n);
				  sscanf(s,"%g", &b);

				  yylval.field = new VrmlSFColor(r,g,b);
				  BEGIN NODE; expectToken = 0; 
				  return SF_COLOR;
				}
	YY_BREAK
case 32:
YY_RULE_SETUP
{
				  float r = 0.0, g = 0.0, b = 0.0;
				  int n = 0;
				  char *s = &yytext[0];
				  sscanf(s,"%g%n", &r, &n);
				  s = skip_ws(s+n);
				  sscanf(s,"%g%n", &g, &n);
				  s = skip_ws(s+n);
				  sscanf(s,"%g", &b);

				  if (parsing_mf) {
				    mfFloats.push_back(r);
				    mfFloats.push_back(g);
				    mfFloats.push_back(b);
				  } else {
				    yylval.field = new VrmlMFColor(r,g,b);
                                    BEGIN NODE; expectToken = 0;
				    return MF_COLOR;
                                  }
                                }
	YY_BREAK
case 33:
YY_RULE_SETUP
{
				  yylval.field = new VrmlSFTime(atof(yytext));
				  BEGIN NODE; expectToken = 0;
				  return SF_TIME;
				}
	YY_BREAK
/* SFString/MFString */
case 34:
YY_RULE_SETUP
{ BEGIN IN_SFS; initString(); }
	YY_BREAK
case 35:
YY_RULE_SETUP
{ BEGIN IN_MFS; initString(); }
	YY_BREAK
/* Anything besides open-quote (or whitespace) is an error: */
case 36:
YY_RULE_SETUP
{ yyerror("SFString missing open-quote");
			  yylval.field = 0;
			  BEGIN NODE; expectToken = 0;
			  return SF_STRING;
                        }
	YY_BREAK
/* Expect open-quote, open-bracket, or whitespace: */
case 37:
YY_RULE_SETUP
{ yyerror("MFString missing open-quote");
				  yylval.field = 0;
				  BEGIN NODE; expectToken = 0;
				  return MF_STRING;
				}
	YY_BREAK
/* Backslashed-quotes and backslashed-backslashes are OK: */
case 38:
YY_RULE_SETUP
{ checkStringSize(1);
                                  strcpy(sfStringChars+sfStringN++,"\""); }
	YY_BREAK
case 39:
YY_RULE_SETUP
{ checkStringSize(1);
                                  strcpy(sfStringChars+sfStringN++,"\\"); }
	YY_BREAK
case 40:
YY_RULE_SETUP
{ checkStringSize(2);
                                  strcpy(sfStringChars+sfStringN, "\\n");
				  sfStringN += 2;
				}
	YY_BREAK
/* Newline characters are OK: */
case 41:
YY_RULE_SETUP
{ checkStringSize(1);
                                  strcpy(sfStringChars+sfStringN++,"\n");
				  ++currentLineNumber;
				}
	YY_BREAK
/* Eat anything besides quotes, backslashed (escaped) chars and newlines. */
case 42:
YY_RULE_SETUP
{ checkStringSize(yyleng);
				  strcpy(sfStringChars+sfStringN,yytext);
				  sfStringN += yyleng;
				}
	YY_BREAK
/* Quote ends the string: */
case 43:
YY_RULE_SETUP
{
				  yylval.field = new VrmlSFString(sfStringChars);
				  BEGIN NODE; expectToken = 0;
				  return SF_STRING;
				}
	YY_BREAK
case 44:
YY_RULE_SETUP
{
				  if (parsing_mf) {
				    char *s = new char[strlen(sfStringChars)+1];
				    strcpy(s,sfStringChars);
				    mfStrs.push_back(s);
				    BEGIN MFS;
				  } else {
				    yylval.field = new VrmlMFString(sfStringChars);
				    BEGIN NODE; expectToken = 0;
				    return MF_STRING;
				  }
				}
	YY_BREAK
/* SFImage: width height numComponents then width*height integers: */
case 45:
YY_RULE_SETUP
{ int w = 0, h = 0, nc = 0, n = 0;
				  unsigned char *pixels = 0;
				  char *s = &yytext[0];

				  sscanf(s,"%d%n", &w, &n);
				  s = skip_ws(s+n);
				  sscanf(s,"%d%n", &h, &n);
				  s = skip_ws(s+n);
				  sscanf(s,"%d", &nc);

				  sfImageIntsExpected = w*h;
				  sfImageIntsParsed = 0;
				  sfImageNC = nc;

				  if (sfImageIntsExpected > 0)
				    pixels = new unsigned char[nc*w*h];

				  sfImagePixels = pixels;
				  memset(pixels,0,nc*w*h);

				  yylval.field = new VrmlSFImage(w,h,nc,pixels);

				  if (sfImageIntsExpected > 0) {
				    BEGIN IN_SFIMG;
				  } else {
				    BEGIN NODE; expectToken = 0;
				    return SF_IMAGE;
				  }
				}
	YY_BREAK
case 46:
YY_RULE_SETUP
{
			  unsigned long pixval = strtol(yytext, 0, 0);

			  int i, j = sfImageNC * sfImageIntsParsed++;
			  for (i=0; i<sfImageNC; ++i)
			    sfImagePixels[i+j] = (sfImageMask[i] & pixval) >> (8*i);
			  if (sfImageIntsParsed == sfImageIntsExpected) {
			    BEGIN NODE; expectToken = 0;
			    return SF_IMAGE;
                          }
                        }
	YY_BREAK
/* Whitespace rules apply to all start states except inside strings: */

case 47:
YY_RULE_SETUP
;
	YY_BREAK
/* This is also whitespace, but we'll keep track of line number */
/* to report in errors: */
case 48:
YY_RULE_SETUP
{ ++currentLineNumber; }
	YY_BREAK

/* This catch-all rule catches anything not covered by any of */
/* the above: */
case 49:
YY_RULE_SETUP
{ return yytext[0]; }
	YY_BREAK
case 50:
YY_RULE_SETUP
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(NODE):
case YY_STATE_EOF(SFB):
case YY_STATE_EOF(SFC):
case YY_STATE_EOF(SFF):
case YY_STATE_EOF(SFIMG):
case YY_STATE_EOF(SFI):
case YY_STATE_EOF(SFR):
case YY_STATE_EOF(SFS):
case YY_STATE_EOF(SFT):
case YY_STATE_EOF(SFV2):
case YY_STATE_EOF(SFV3):
case YY_STATE_EOF(MFC):
case YY_STATE_EOF(MFF):
case YY_STATE_EOF(MFI):
case YY_STATE_EOF(MFR):
case YY_STATE_EOF(MFS):
case YY_STATE_EOF(MFV2):
case YY_STATE_EOF(MFV3):
case YY_STATE_EOF(IN_SFS):
case YY_STATE_EOF(IN_MFS):
case YY_STATE_EOF(IN_SFIMG):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */


/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

static int yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

static yy_state_type yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 1024 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

#ifdef YY_USE_PROTOS
static yy_state_type yy_try_NUL_trans( yy_state_type yy_current_state )
#else
static yy_state_type yy_try_NUL_trans( yy_current_state )
yy_state_type yy_current_state;
#endif
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 1024 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 1023);

	return yy_is_jam ? 0 : yy_current_state;
	}


#ifndef YY_NO_UNPUT
#ifdef YY_USE_PROTOS
static void yyunput( int c, register char *yy_bp )
#else
static void yyunput( c, yy_bp )
int c;
register char *yy_bp;
#endif
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}
#endif	/* ifndef YY_NO_UNPUT */


#ifdef __cplusplus
static int yyinput()
#else
static int input()
#endif
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


#ifdef YY_USE_PROTOS
void yyrestart( FILE *input_file )
#else
void yyrestart( input_file )
FILE *input_file;
#endif
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


#ifdef YY_USE_PROTOS
void yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
#else
void yy_switch_to_buffer( new_buffer )
YY_BUFFER_STATE new_buffer;
#endif
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


#ifdef YY_USE_PROTOS
void yy_load_buffer_state( void )
#else
void yy_load_buffer_state()
#endif
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_create_buffer( FILE *file, int size )
#else
YY_BUFFER_STATE yy_create_buffer( file, size )
FILE *file;
int size;
#endif
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


#ifdef YY_USE_PROTOS
void yy_delete_buffer( YY_BUFFER_STATE b )
#else
void yy_delete_buffer( b )
YY_BUFFER_STATE b;
#endif
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


#ifndef YY_ALWAYS_INTERACTIVE
#ifndef YY_NEVER_INTERACTIVE
extern int isatty YY_PROTO(( int ));
#endif
#endif

#ifdef YY_USE_PROTOS
void yy_init_buffer( YY_BUFFER_STATE b, FILE *file )
#else
void yy_init_buffer( b, file )
YY_BUFFER_STATE b;
FILE *file;
#endif


	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

#if YY_ALWAYS_INTERACTIVE
	b->yy_is_interactive = 1;
#else
#if YY_NEVER_INTERACTIVE
	b->yy_is_interactive = 0;
#else
	b->yy_is_interactive = file ? (isatty( fileno(file) ) > 0) : 0;
#endif
#endif
	}


#ifdef YY_USE_PROTOS
void yy_flush_buffer( YY_BUFFER_STATE b )
#else
void yy_flush_buffer( b )
YY_BUFFER_STATE b;
#endif

	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_buffer( char *base, yy_size_t size )
#else
YY_BUFFER_STATE yy_scan_buffer( base, size )
char *base;
yy_size_t size;
#endif
	{
	YY_BUFFER_STATE b;

	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	yy_switch_to_buffer( b );

	return b;
	}
#endif


#ifndef YY_NO_SCAN_STRING
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_string( yyconst char *yy_str )
#else
YY_BUFFER_STATE yy_scan_string( yy_str )
yyconst char *yy_str;
#endif
	{
	int len;
	for ( len = 0; yy_str[len]; ++len )
		;

	return yy_scan_bytes( yy_str, len );
	}
#endif


#ifndef YY_NO_SCAN_BYTES
#ifdef YY_USE_PROTOS
YY_BUFFER_STATE yy_scan_bytes( yyconst char *bytes, int len )
#else
YY_BUFFER_STATE yy_scan_bytes( bytes, len )
yyconst char *bytes;
int len;
#endif
	{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	int i;

	/* Get memory for full buffer, including space for trailing EOB's. */
	n = len + 2;
	buf = (char *) yy_flex_alloc( n );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_scan_bytes()" );

	for ( i = 0; i < len; ++i )
		buf[i] = bytes[i];

	buf[len] = buf[len+1] = YY_END_OF_BUFFER_CHAR;

	b = yy_scan_buffer( buf, n );
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in yy_scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
	}
#endif


#ifndef YY_NO_PUSH_STATE
#ifdef YY_USE_PROTOS
static void yy_push_state( int new_state )
#else
static void yy_push_state( new_state )
int new_state;
#endif
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
static void yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
static int yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

#ifdef YY_USE_PROTOS
static void yy_fatal_error( yyconst char msg[] )
#else
static void yy_fatal_error( msg )
char msg[];
#endif
	{
	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
	}



/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif


/* Set up to read from string s. Reading from strings skips the header */

void yystring(char *s) 
{
  yyin = 0;
#if HAVE_LIBPNG || HAVE_ZLIB
  yygz = 0;
#endif
  yyinStr = s;
  yyinFunc = 0;
  BEGIN NODE;
  expectToken = 0;
  parsing_mf = 0;
  currentLineNumber = 1;
}

/* Set up to read from function f. */

void yyfunction( int (*f)(char *, int) )
{
  yyin = 0;
#if HAVE_LIBPNG || HAVE_ZLIB
  yygz = 0;
#endif
  yyinStr = 0;
  yyinFunc = f;
  BEGIN INITIAL;
  expectToken = 0;
  parsing_mf = 0;
  currentLineNumber = 1;
}

